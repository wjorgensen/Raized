/* tslint:disable */
/* eslint-disable */

type EpochString = "2.0" | "2.05" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "3.0"


/**
*/
export class CallFnArgs {
  free(): void;
/**
* @param {string} contract
* @param {string} method
* @param {(Uint8Array)[]} args
* @param {string} sender
*/
  constructor(contract: string, method: string, args: (Uint8Array)[], sender: string);
}
/**
*/
export class ContractOptions {
  free(): void;
/**
* @param {number | undefined} [clarity_version]
*/
  constructor(clarity_version?: number);
}
/**
*/
export class DeployContractArgs {
  free(): void;
/**
* @param {string} name
* @param {string} content
* @param {ContractOptions} options
* @param {string} sender
*/
  constructor(name: string, content: string, options: ContractOptions, sender: string);
}
/**
*/
export class SDK {
  free(): void;
/**
* @param {Function} fs_request
* @param {SDKOptions | undefined} [options]
*/
  constructor(fs_request: Function, options?: SDKOptions);
/**
* @param {string} cwd
* @param {string} manifest_path
* @returns {Promise<void>}
*/
  initSession(cwd: string, manifest_path: string): Promise<void>;
/**
* @param {EpochString} epoch
*/
  setEpoch(epoch: EpochString): void;
/**
* @returns {any}
*/
  getContractsInterfaces(): any;
/**
* @param {string} contract
* @returns {string | undefined}
*/
  getContractSource(contract: string): string | undefined;
/**
* @param {string} contract
* @returns {any}
*/
  getContractAST(contract: string): any;
/**
* @returns {Map<string, Map<string, bigint>>}
*/
  getAssetsMap(): Map<string, Map<string, bigint>>;
/**
* @returns {Map<string, string>}
*/
  getAccounts(): Map<string, string>;
/**
* @param {string} contract
* @param {string} var_name
* @returns {string}
*/
  getDataVar(contract: string, var_name: string): string;
/**
* @returns {bigint}
*/
  getBlockTime(): bigint;
/**
* @param {string} contract
* @param {string} map_name
* @param {Uint8Array} map_key
* @returns {string}
*/
  getMapEntry(contract: string, map_name: string, map_key: Uint8Array): string;
/**
* @param {CallFnArgs} args
* @returns {TransactionRes}
*/
  callReadOnlyFn(args: CallFnArgs): TransactionRes;
/**
* @param {DeployContractArgs} args
* @returns {TransactionRes}
*/
  deployContract(args: DeployContractArgs): TransactionRes;
/**
* @param {TransferSTXArgs} args
* @returns {TransactionRes}
*/
  transferSTX(args: TransferSTXArgs): TransactionRes;
/**
* @param {CallFnArgs} args
* @returns {TransactionRes}
*/
  callPublicFn(args: CallFnArgs): TransactionRes;
/**
* @param {CallFnArgs} args
* @returns {TransactionRes}
*/
  callPrivateFn(args: CallFnArgs): TransactionRes;
/**
* @param {Array<any>} js_txs
* @returns {any}
*/
  mineBlock(js_txs: Array<any>): any;
/**
* @returns {number}
*/
  mineEmptyBlock(): number;
/**
* @param {number | undefined} [count]
* @returns {number}
*/
  mineEmptyBlocks(count?: number): number;
/**
* @param {string} snippet
* @returns {string}
*/
  runSnippet(snippet: string): string;
/**
* @param {string} test_name
*/
  setCurrentTestName(test_name: string): void;
/**
* @param {boolean} include_boot_contracts
* @param {string} boot_contracts_path
* @returns {SessionReport}
*/
  collectReport(include_boot_contracts: boolean, boot_contracts_path: string): SessionReport;
/**
*/
  readonly blockHeight: number;
/**
*/
  readonly currentEpoch: string;
/**
*/
  deployer: string;
}
/**
*/
export class SDKOptions {
  free(): void;
/**
* @param {boolean} track_costs
* @param {boolean} track_coverage
*/
  constructor(track_costs: boolean, track_coverage: boolean);
/**
*/
  trackCosts: boolean;
/**
*/
  trackCoverage: boolean;
}
/**
*/
export class SessionReport {
  free(): void;
/**
*/
  costs: string;
/**
*/
  coverage: string;
}
/**
*/
export class TransactionRes {
  free(): void;
/**
*/
  events: string;
/**
*/
  result: string;
}
/**
*/
export class TransferSTXArgs {
  free(): void;
/**
* @param {bigint} amount
* @param {string} recipient
* @param {string} sender
*/
  constructor(amount: bigint, recipient: string, sender: string);
}
/**
*/
export class TxArgs {
  free(): void;
}
