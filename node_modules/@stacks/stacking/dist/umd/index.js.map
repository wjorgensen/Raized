{"version":3,"file":"index.js","mappings":"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","sources":["webpack://StacksStacking/webpack/universalModuleDefinition","webpack://StacksStacking/webpack/runtime/create fake namespace object","webpack://StacksStacking/../../node_modules/@noble/hashes/_assert.js","webpack://StacksStacking/../../node_modules/@noble/hashes/_sha2.js","webpack://StacksStacking/../../node_modules/@noble/hashes/cryptoBrowser.js","webpack://StacksStacking/../../node_modules/@noble/hashes/sha256.js","webpack://StacksStacking/../../node_modules/@noble/hashes/utils.js","webpack://StacksStacking/../../node_modules/base-x/src/index.js","webpack://StacksStacking/../../node_modules/base64-js/index.js","webpack://StacksStacking/../../node_modules/bs58/index.js","webpack://StacksStacking/../../node_modules/c32check/lib/address.js","webpack://StacksStacking/../../node_modules/c32check/lib/base58check.js","webpack://StacksStacking/../../node_modules/c32check/lib/checksum.js","webpack://StacksStacking/../../node_modules/c32check/lib/encoding.js","webpack://StacksStacking/../../node_modules/c32check/lib/index.js","webpack://StacksStacking/../../node_modules/cross-fetch/dist/browser-polyfill.js","webpack://StacksStacking/../../node_modules/lodash.clonedeep/index.js","webpack://StacksStacking/webpack/bootstrap","webpack://StacksStacking/webpack/runtime/compat get default export","webpack://StacksStacking/webpack/runtime/define property getters","webpack://StacksStacking/webpack/runtime/global","webpack://StacksStacking/webpack/runtime/hasOwnProperty shorthand","webpack://StacksStacking/webpack/runtime/make namespace object","webpack://StacksStacking/webpack/runtime/node module decorator","webpack://StacksStacking/../common/dist/esm/utils.js","webpack://StacksStacking/../common/dist/esm/constants.js","webpack://StacksStacking/../network/dist/esm/fetch.js","webpack://StacksStacking/../network/dist/esm/network.js","webpack://StacksStacking/../transactions/dist/esm/constants.js","webpack://StacksStacking/../common/dist/esm/buffer.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/_assert.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/utils.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/cryptoBrowser.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/_sha2.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/ripemd160.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/sha256.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/_u64.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/sha512.js","webpack://StacksStacking/../../node_modules/@noble/secp256k1/lib/esm/index.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/hmac.js","webpack://StacksStacking/../common/dist/esm/signatures.js","webpack://StacksStacking/../transactions/dist/esm/common.js","webpack://StacksStacking/../transactions/dist/esm/keys.js","webpack://StacksStacking/../common/dist/esm/keys.js","webpack://StacksStacking/../transactions/dist/esm/postcondition-types.js","webpack://StacksStacking/../transactions/dist/esm/clarity/constants.js","webpack://StacksStacking/../transactions/dist/esm/payload.js","webpack://StacksStacking/../transactions/dist/esm/signature.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/optionalCV.js","webpack://StacksStacking/../transactions/dist/esm/errors.js","webpack://StacksStacking/../transactions/dist/esm/types.js","webpack://StacksStacking/../transactions/dist/esm/clarity/serialize.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/intCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/bufferCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/principalCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/tupleCV.js","webpack://StacksStacking/../transactions/dist/esm/utils.js","webpack://StacksStacking/../transactions/dist/esm/bytesReader.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/stringCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/deserialize.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/booleanCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/responseCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/types/listCV.js","webpack://StacksStacking/../transactions/dist/esm/authorization.js","webpack://StacksStacking/../transactions/dist/esm/clarity/clarityValue.js","webpack://StacksStacking/../transactions/dist/esm/contract-abi.js","webpack://StacksStacking/../transactions/dist/esm/signer.js","webpack://StacksStacking/../transactions/dist/esm/transaction.js","webpack://StacksStacking/../transactions/dist/esm/builders.js","webpack://StacksStacking/./src/constants.ts","webpack://StacksStacking/../../node_modules/@scure/base/lib/esm/index.js","webpack://StacksStacking/../encryption/dist/esm/keys.js","webpack://StacksStacking/../encryption/dist/esm/varuint.js","webpack://StacksStacking/../encryption/dist/esm/messageSignature.js","webpack://StacksStacking/../encryption/dist/esm/ec.js","webpack://StacksStacking/../transactions/dist/esm/structuredDataSignature.js","webpack://StacksStacking/./src/utils.ts","webpack://StacksStacking/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StacksStacking\"] = factory();\n\telse\n\t\troot[\"StacksStacking\"] = factory();\n})(this, () => {\nreturn ","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32ToB58 = exports.b58ToC32 = exports.c32addressDecode = exports.c32address = exports.versions = void 0;\nconst checksum_1 = require(\"./checksum\");\nconst base58check = require(\"./base58check\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.versions = {\n    mainnet: {\n        p2pkh: 22,\n        p2sh: 20, // 'M'\n    },\n    testnet: {\n        p2pkh: 26,\n        p2sh: 21, // 'N'\n    },\n};\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS = {};\nADDR_BITCOIN_TO_STACKS[0] = exports.versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = exports.versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = exports.versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = exports.versions.testnet.p2sh;\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN = {};\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2sh] = 196;\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nfunction c32address(version, hash160hex) {\n    if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n        throw new Error('Invalid argument: not a hash160 hex string');\n    }\n    const c32string = (0, checksum_1.c32checkEncode)(version, hash160hex);\n    return `S${c32string}`;\n}\nexports.c32address = c32address;\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nfunction c32addressDecode(c32addr) {\n    if (c32addr.length <= 5) {\n        throw new Error('Invalid c32 address: invalid length');\n    }\n    if (c32addr[0] != 'S') {\n        throw new Error('Invalid c32 address: must start with \"S\"');\n    }\n    return (0, checksum_1.c32checkDecode)(c32addr.slice(1));\n}\nexports.c32addressDecode = c32addressDecode;\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nfunction b58ToC32(b58check, version = -1) {\n    const addrInfo = base58check.decode(b58check);\n    const hash160String = (0, utils_1.bytesToHex)(addrInfo.data);\n    const addrVersion = parseInt((0, utils_1.bytesToHex)(addrInfo.prefix), 16);\n    let stacksVersion;\n    if (version < 0) {\n        stacksVersion = addrVersion;\n        if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n            stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n        }\n    }\n    else {\n        stacksVersion = version;\n    }\n    return c32address(stacksVersion, hash160String);\n}\nexports.b58ToC32 = b58ToC32;\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nfunction c32ToB58(c32string, version = -1) {\n    const addrInfo = c32addressDecode(c32string);\n    const stacksVersion = addrInfo[0];\n    const hash160String = addrInfo[1];\n    let bitcoinVersion;\n    if (version < 0) {\n        bitcoinVersion = stacksVersion;\n        if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n            bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n        }\n    }\n    else {\n        bitcoinVersion = version;\n    }\n    let prefix = bitcoinVersion.toString(16);\n    if (prefix.length === 1) {\n        prefix = `0${prefix}`;\n    }\n    return base58check.encode(hash160String, prefix);\n}\nexports.c32ToB58 = c32ToB58;\n","/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32checkDecode = exports.c32checkEncode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst encoding_1 = require(\"./encoding\");\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex) {\n    const dataHash = (0, sha256_1.sha256)((0, sha256_1.sha256)((0, utils_1.hexToBytes)(dataHex)));\n    const checksum = (0, utils_1.bytesToHex)(dataHash.slice(0, 4));\n    return checksum;\n}\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nfunction c32checkEncode(version, data) {\n    if (version < 0 || version >= 32) {\n        throw new Error('Invalid version (must be between 0 and 31)');\n    }\n    if (!data.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Invalid data (not a hex string)');\n    }\n    data = data.toLowerCase();\n    if (data.length % 2 !== 0) {\n        data = `0${data}`;\n    }\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    const checksumHex = c32checksum(`${versionHex}${data}`);\n    const c32str = (0, encoding_1.c32encode)(`${data}${checksumHex}`);\n    return `${encoding_1.c32[version]}${c32str}`;\n}\nexports.c32checkEncode = c32checkEncode;\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nfunction c32checkDecode(c32data) {\n    c32data = (0, encoding_1.c32normalize)(c32data);\n    const dataHex = (0, encoding_1.c32decode)(c32data.slice(1));\n    const versionChar = c32data[0];\n    const version = encoding_1.c32.indexOf(versionChar);\n    const checksum = dataHex.slice(-8);\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n        throw new Error('Invalid c32check string: checksum mismatch');\n    }\n    return [version, dataHex.substring(0, dataHex.length - 8)];\n}\nexports.c32checkDecode = c32checkDecode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32decode = exports.c32normalize = exports.c32encode = exports.c32 = void 0;\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nfunction c32encode(inputHex, minLength) {\n    // must be hex\n    if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Not a hex-encoded string');\n    }\n    if (inputHex.length % 2 !== 0) {\n        inputHex = `0${inputHex}`;\n    }\n    inputHex = inputHex.toLowerCase();\n    let res = [];\n    let carry = 0;\n    for (let i = inputHex.length - 1; i >= 0; i--) {\n        if (carry < 4) {\n            const currentCode = hex.indexOf(inputHex[i]) >> carry;\n            let nextCode = 0;\n            if (i !== 0) {\n                nextCode = hex.indexOf(inputHex[i - 1]);\n            }\n            // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n            const nextBits = 1 + carry;\n            const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n            const curC32Digit = exports.c32[currentCode + nextLowBits];\n            carry = nextBits;\n            res.unshift(curC32Digit);\n        }\n        else {\n            carry = 0;\n        }\n    }\n    let C32leadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            C32leadingZeros++;\n        }\n    }\n    res = res.slice(C32leadingZeros);\n    const zeroPrefix = new TextDecoder().decode((0, utils_1.hexToBytes)(inputHex)).match(/^\\u0000*/);\n    const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n    for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n        res.unshift(exports.c32[0]);\n    }\n    if (minLength) {\n        const count = minLength - res.length;\n        for (let i = 0; i < count; i++) {\n            res.unshift(exports.c32[0]);\n        }\n    }\n    return res.join('');\n}\nexports.c32encode = c32encode;\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nfunction c32normalize(c32input) {\n    // must be upper-case\n    // replace all O's with 0's\n    // replace all I's and L's with 1's\n    return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\nexports.c32normalize = c32normalize;\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nfunction c32decode(c32input, minLength) {\n    c32input = c32normalize(c32input);\n    // must result in a c32 string\n    if (!c32input.match(`^[${exports.c32}]*$`)) {\n        throw new Error('Not a c32-encoded string');\n    }\n    const zeroPrefix = c32input.match(`^${exports.c32[0]}*`);\n    const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n    let res = [];\n    let carry = 0;\n    let carryBits = 0;\n    for (let i = c32input.length - 1; i >= 0; i--) {\n        if (carryBits === 4) {\n            res.unshift(hex[carry]);\n            carryBits = 0;\n            carry = 0;\n        }\n        const currentCode = exports.c32.indexOf(c32input[i]) << carryBits;\n        const currentValue = currentCode + carry;\n        const currentHexDigit = hex[currentValue % 16];\n        carryBits += 1;\n        carry = currentValue >> 4;\n        if (carry > 1 << carryBits) {\n            throw new Error('Panic error in decoding.');\n        }\n        res.unshift(currentHexDigit);\n    }\n    // one last carry\n    res.unshift(hex[carry]);\n    if (res.length % 2 === 1) {\n        res.unshift('0');\n    }\n    let hexLeadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            hexLeadingZeros++;\n        }\n    }\n    res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n    let hexStr = res.join('');\n    for (let i = 0; i < numLeadingZeroBytes; i++) {\n        hexStr = `00${hexStr}`;\n    }\n    if (minLength) {\n        const count = minLength * 2 - hexStr.length;\n        for (let i = 0; i < count; i += 2) {\n            hexStr = `00${hexStr}`;\n        }\n    }\n    return hexStr;\n}\nexports.c32decode = c32decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b58ToC32 = exports.c32ToB58 = exports.versions = exports.c32normalize = exports.c32addressDecode = exports.c32address = exports.c32checkDecode = exports.c32checkEncode = exports.c32decode = exports.c32encode = void 0;\nconst encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"c32encode\", { enumerable: true, get: function () { return encoding_1.c32encode; } });\nObject.defineProperty(exports, \"c32decode\", { enumerable: true, get: function () { return encoding_1.c32decode; } });\nObject.defineProperty(exports, \"c32normalize\", { enumerable: true, get: function () { return encoding_1.c32normalize; } });\nconst checksum_1 = require(\"./checksum\");\nObject.defineProperty(exports, \"c32checkEncode\", { enumerable: true, get: function () { return checksum_1.c32checkEncode; } });\nObject.defineProperty(exports, \"c32checkDecode\", { enumerable: true, get: function () { return checksum_1.c32checkDecode; } });\nconst address_1 = require(\"./address\");\nObject.defineProperty(exports, \"c32address\", { enumerable: true, get: function () { return address_1.c32address; } });\nObject.defineProperty(exports, \"c32addressDecode\", { enumerable: true, get: function () { return address_1.c32addressDecode; } });\nObject.defineProperty(exports, \"c32ToB58\", { enumerable: true, get: function () { return address_1.c32ToB58; } });\nObject.defineProperty(exports, \"b58ToC32\", { enumerable: true, get: function () { return address_1.b58ToC32; } });\nObject.defineProperty(exports, \"versions\", { enumerable: true, get: function () { return address_1.versions; } });\n","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import { Logger } from './logger';\nexport const BLOCKSTACK_HANDLER = 'blockstack';\nexport function nextYear() {\n    return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\nexport function nextMonth() {\n    return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\nexport function nextHour() {\n    return new Date(new Date().setHours(new Date().getHours() + 1));\n}\nexport function megabytesToBytes(megabytes) {\n    if (!Number.isFinite(megabytes)) {\n        return 0;\n    }\n    return Math.floor(megabytes * 1024 * 1024);\n}\nexport function getAesCbcOutputLength(inputByteLength) {\n    const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n    return cipherTextLength;\n}\nexport function getBase64OutputLength(inputByteLength) {\n    const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n    return encodedLength;\n}\nexport function updateQueryStringParameter(uri, key, value) {\n    const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n    const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n    if (uri.match(re)) {\n        return uri.replace(re, `$1${key}=${value}$2`);\n    }\n    else {\n        return `${uri}${separator}${key}=${value}`;\n    }\n}\nexport function isLaterVersion(v1, v2) {\n    if (v1 === undefined || v1 === '') {\n        v1 = '0.0.0';\n    }\n    if (v2 === undefined || v1 === '') {\n        v2 = '0.0.0';\n    }\n    const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n    const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n    for (let index = 0; index < v2.length; index++) {\n        if (index >= v1.length) {\n            v2tuple.push(0);\n        }\n        if (v1tuple[index] < v2tuple[index]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function makeUUID4() {\n    let d = new Date().getTime();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n        d += performance.now();\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n}\nexport function isSameOriginAbsoluteUrl(uri1, uri2) {\n    try {\n        const parsedUri1 = new URL(uri1);\n        const parsedUri2 = new URL(uri2);\n        const port1 = parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n        const port2 = parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n        const match = {\n            scheme: parsedUri1.protocol === parsedUri2.protocol,\n            hostname: parsedUri1.hostname === parsedUri2.hostname,\n            port: port1 === port2,\n            absolute: (uri1.includes('http://') || uri1.includes('https://')) &&\n                (uri2.includes('http://') || uri2.includes('https://')),\n        };\n        return match.scheme && match.hostname && match.port && match.absolute;\n    }\n    catch (error) {\n        console.log(error);\n        console.log('Parsing error in same URL origin check');\n        return false;\n    }\n}\nexport function getGlobalScope() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available');\n}\nfunction getAPIUsageErrorMessage(scopeObject, apiName, usageDesc) {\n    if (usageDesc) {\n        return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n    else {\n        return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n}\nexport function getGlobalObject(name, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope = undefined;\n    try {\n        globalScope = getGlobalScope();\n        if (globalScope) {\n            const obj = globalScope[name];\n            if (obj) {\n                return obj;\n            }\n        }\n    }\n    catch (error) {\n        Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n    }\n    if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n    }\n    if (returnEmptyObject) {\n        return {};\n    }\n    return undefined;\n}\nexport function getGlobalObjects(names, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope;\n    try {\n        globalScope = getGlobalScope();\n    }\n    catch (error) {\n        Logger.error(`Error getting global scope: ${error}`);\n        if (throwIfUnavailable) {\n            const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n            Logger.error(errMsg);\n            throw errMsg;\n        }\n        else if (returnEmptyObject) {\n            globalScope = {};\n        }\n    }\n    const result = {};\n    for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        try {\n            if (globalScope) {\n                const obj = globalScope[name];\n                if (obj) {\n                    result[name] = obj;\n                }\n                else if (throwIfUnavailable) {\n                    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                    Logger.error(errMsg);\n                    throw new Error(errMsg);\n                }\n                else if (returnEmptyObject) {\n                    result[name] = {};\n                }\n            }\n        }\n        catch (error) {\n            if (throwIfUnavailable) {\n                const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                Logger.error(errMsg);\n                throw new Error(errMsg);\n            }\n        }\n    }\n    return result;\n}\nexport function intToBytes(value, signed, byteLength) {\n    return bigIntToBytes(intToBigInt(value, signed), byteLength);\n}\nexport function intToBigInt(value, signed) {\n    let parsedValue = value;\n    if (typeof parsedValue === 'number') {\n        if (!Number.isInteger(parsedValue)) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n        }\n        if (parsedValue > Number.MAX_SAFE_INTEGER) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be less than or equal to ${Number.MAX_SAFE_INTEGER}. For larger values, try using a BigInt instead.`);\n        }\n        return BigInt(parsedValue);\n    }\n    if (typeof parsedValue === 'string') {\n        if (parsedValue.toLowerCase().startsWith('0x')) {\n            let hex = parsedValue.slice(2);\n            hex = hex.padStart(hex.length + (hex.length % 2), '0');\n            parsedValue = hexToBytes(hex);\n        }\n        else {\n            try {\n                return BigInt(parsedValue);\n            }\n            catch (error) {\n                if (error instanceof SyntaxError) {\n                    throw new RangeError(`Invalid value. String integer '${parsedValue}' is not finite.`);\n                }\n            }\n        }\n    }\n    if (typeof parsedValue === 'bigint') {\n        return parsedValue;\n    }\n    if (parsedValue instanceof Uint8Array) {\n        if (signed) {\n            const bn = fromTwos(BigInt(`0x${bytesToHex(parsedValue)}`), BigInt(parsedValue.byteLength * 8));\n            return BigInt(bn.toString());\n        }\n        else {\n            return BigInt(`0x${bytesToHex(parsedValue)}`);\n        }\n    }\n    if (parsedValue != null &&\n        typeof parsedValue === 'object' &&\n        parsedValue.constructor.name === 'BN') {\n        return BigInt(parsedValue.toString());\n    }\n    throw new TypeError(`Invalid value type. Must be a number, bigint, integer-string, hex-string, or Uint8Array.`);\n}\nexport function with0x(value) {\n    return value.startsWith('0x') ? value : `0x${value}`;\n}\nexport function hexToBigInt(hex) {\n    if (typeof hex !== 'string')\n        throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n    return BigInt(`0x${hex}`);\n}\nexport function intToHex(integer, lengthBytes = 8) {\n    const value = typeof integer === 'bigint' ? integer : intToBigInt(integer, false);\n    return value.toString(16).padStart(lengthBytes * 2, '0');\n}\nexport function hexToInt(hex) {\n    return parseInt(hex, 16);\n}\nexport function bigIntToBytes(value, length = 16) {\n    const hex = intToHex(value, length);\n    return hexToBytes(hex);\n}\nexport function toTwos(value, width) {\n    if (value < -(BigInt(1) << (width - BigInt(1))) ||\n        (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value) {\n        throw `Unable to represent integer in width: ${width}`;\n    }\n    if (value >= BigInt(0)) {\n        return BigInt(value);\n    }\n    return value + (BigInt(1) << width);\n}\nfunction nthBit(value, n) {\n    return value & (BigInt(1) << n);\n}\nexport function fromTwos(value, width) {\n    if (nthBit(value, width - BigInt(1))) {\n        return value - (BigInt(1) << width);\n    }\n    return value;\n}\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (const u of uint8a) {\n        hex += hexes[u];\n    }\n    return hex;\n}\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n    }\n    const paddedHex = hex.length % 2 ? `0${hex}` : hex;\n    const array = new Uint8Array(paddedHex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = paddedHex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexport function utf8ToBytes(str) {\n    return new TextEncoder().encode(str);\n}\nexport function bytesToUtf8(arr) {\n    return new TextDecoder().decode(arr);\n}\nexport function asciiToBytes(str) {\n    const byteArray = [];\n    for (let i = 0; i < str.length; i++) {\n        byteArray.push(str.charCodeAt(i) & 0xff);\n    }\n    return new Uint8Array(byteArray);\n}\nexport function bytesToAscii(arr) {\n    return String.fromCharCode.apply(null, arr);\n}\nfunction isNotOctet(octet) {\n    return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\nexport function octetsToBytes(numbers) {\n    if (numbers.some(isNotOctet))\n        throw new Error('Some values are invalid bytes.');\n    return new Uint8Array(numbers);\n}\nexport function concatBytes(...arrays) {\n    if (!arrays.every(a => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexport function concatArray(elements) {\n    return concatBytes(...elements.map(e => {\n        if (typeof e === 'number')\n            return octetsToBytes([e]);\n        if (e instanceof Array)\n            return octetsToBytes(e);\n        return e;\n    }));\n}\nexport function isInstance(object, type) {\n    return object instanceof type || object?.constructor?.name?.toLowerCase() === type.name;\n}\n//# sourceMappingURL=utils.js.map","export var ChainID;\n(function (ChainID) {\n    ChainID[ChainID[\"Testnet\"] = 2147483648] = \"Testnet\";\n    ChainID[ChainID[\"Mainnet\"] = 1] = \"Mainnet\";\n})(ChainID || (ChainID = {}));\nexport var TransactionVersion;\n(function (TransactionVersion) {\n    TransactionVersion[TransactionVersion[\"Mainnet\"] = 0] = \"Mainnet\";\n    TransactionVersion[TransactionVersion[\"Testnet\"] = 128] = \"Testnet\";\n})(TransactionVersion || (TransactionVersion = {}));\nexport var PeerNetworkID;\n(function (PeerNetworkID) {\n    PeerNetworkID[PeerNetworkID[\"Mainnet\"] = 385875968] = \"Mainnet\";\n    PeerNetworkID[PeerNetworkID[\"Testnet\"] = 4278190080] = \"Testnet\";\n})(PeerNetworkID || (PeerNetworkID = {}));\nexport const PRIVATE_KEY_COMPRESSED_LENGTH = 33;\nexport const PRIVATE_KEY_UNCOMPRESSED_LENGTH = 32;\nexport const BLOCKSTACK_DEFAULT_GAIA_HUB_URL = 'https://hub.blockstack.org';\n//# sourceMappingURL=constants.js.map","import 'cross-fetch/polyfill';\nconst defaultFetchOpts = {\n    referrerPolicy: 'origin',\n    headers: {\n        'x-hiro-product': 'stacksjs',\n    },\n};\nexport const getFetchOptions = () => {\n    return defaultFetchOpts;\n};\nexport const setFetchOptions = (ops) => {\n    return Object.assign(defaultFetchOpts, ops);\n};\nexport async function fetchWrapper(input, init) {\n    const fetchOpts = {};\n    Object.assign(fetchOpts, defaultFetchOpts, init);\n    const fetchResult = await fetch(input, fetchOpts);\n    return fetchResult;\n}\nexport function hostMatches(host, pattern) {\n    if (typeof pattern === 'string')\n        return pattern === host;\n    return pattern.exec(host);\n}\nexport function createApiKeyMiddleware({ apiKey, host = /(.*)api(.*)(\\.stacks\\.co|\\.hiro\\.so)$/i, httpHeader = 'x-api-key', }) {\n    return {\n        pre: context => {\n            const reqUrl = new URL(context.url);\n            if (!hostMatches(reqUrl.host, host))\n                return;\n            const headers = new Headers(context.init.headers);\n            headers.set(httpHeader, apiKey);\n            context.init.headers = headers;\n        },\n    };\n}\nfunction argsForCreateFetchFn(args) {\n    let fetchLib = fetchWrapper;\n    let middlewares = [];\n    if (args.length > 0 && typeof args[0] === 'function') {\n        fetchLib = args.shift();\n    }\n    if (args.length > 0) {\n        middlewares = args;\n    }\n    return { fetchLib, middlewares };\n}\nexport function createFetchFn(...args) {\n    const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n    const fetchFn = async (url, init) => {\n        let fetchParams = { url, init: init ?? {} };\n        for (const middleware of middlewares) {\n            if (typeof middleware.pre === 'function') {\n                const result = await Promise.resolve(middleware.pre({\n                    fetch: fetchLib,\n                    ...fetchParams,\n                }));\n                fetchParams = result ?? fetchParams;\n            }\n        }\n        let response = await fetchLib(fetchParams.url, fetchParams.init);\n        for (const middleware of middlewares) {\n            if (typeof middleware.post === 'function') {\n                const result = await Promise.resolve(middleware.post({\n                    fetch: fetchLib,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: response?.clone() ?? response,\n                }));\n                response = result ?? response;\n            }\n        }\n        return response;\n    };\n    return fetchFn;\n}\n//# sourceMappingURL=fetch.js.map","import { TransactionVersion, ChainID } from '@stacks/common';\nimport { createFetchFn } from './fetch';\nexport const HIRO_MAINNET_DEFAULT = 'https://api.mainnet.hiro.so';\nexport const HIRO_TESTNET_DEFAULT = 'https://api.testnet.hiro.so';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\nexport const StacksNetworks = ['mainnet', 'testnet', 'devnet', 'mocknet'];\nexport class StacksNetwork {\n    constructor(networkConfig) {\n        this.version = TransactionVersion.Mainnet;\n        this.chainId = ChainID.Mainnet;\n        this.bnsLookupUrl = 'https://api.mainnet.hiro.so';\n        this.broadcastEndpoint = '/v2/transactions';\n        this.transferFeeEstimateEndpoint = '/v2/fees/transfer';\n        this.transactionFeeEstimateEndpoint = '/v2/fees/transaction';\n        this.accountEndpoint = '/v2/accounts';\n        this.contractAbiEndpoint = '/v2/contracts/interface';\n        this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n        this.isMainnet = () => this.version === TransactionVersion.Mainnet;\n        this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n        this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n        this.getTransactionFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transactionFeeEstimateEndpoint}`;\n        this.getAccountApiUrl = (address) => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n        this.getAccountExtendedBalancesApiUrl = (address) => `${this.coreApiUrl}/extended/v1/address/${address}/balances`;\n        this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n        this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n        this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n        this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n        this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n        this.getRewardsUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getRewardsTotalUrl = (address) => `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n        this.getRewardHoldersUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n        this.getDataVarUrl = (contractAddress, contractName, dataVarName) => `${this.coreApiUrl}/v2/data_var/${contractAddress}/${contractName}/${dataVarName}?proof=0`;\n        this.getMapEntryUrl = (contractAddress, contractName, mapName) => `${this.coreApiUrl}/v2/map_entry/${contractAddress}/${contractName}/${mapName}?proof=0`;\n        this.coreApiUrl = networkConfig.url;\n        this.fetchFn = networkConfig.fetchFn ?? createFetchFn();\n    }\n    getNameInfo(fullyQualifiedName) {\n        const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n        return this.fetchFn(nameLookupURL)\n            .then(resp => {\n            if (resp.status === 404) {\n                throw new Error('Name not found');\n            }\n            else if (resp.status !== 200) {\n                throw new Error(`Bad response status: ${resp.status}`);\n            }\n            else {\n                return resp.json();\n            }\n        })\n            .then(nameInfo => {\n            if (nameInfo.address) {\n                return Object.assign({}, nameInfo, { address: nameInfo.address });\n            }\n            else {\n                return nameInfo;\n            }\n        });\n    }\n}\nStacksNetwork.fromName = (networkName) => {\n    switch (networkName) {\n        case 'mainnet':\n            return new StacksMainnet();\n        case 'testnet':\n            return new StacksTestnet();\n        case 'devnet':\n            return new StacksDevnet();\n        case 'mocknet':\n            return new StacksMocknet();\n        default:\n            throw new Error(`Invalid network name provided. Must be one of the following: ${StacksNetworks.join(', ')}`);\n    }\n};\nStacksNetwork.fromNameOrNetwork = (network) => {\n    if (typeof network !== 'string' && 'version' in network) {\n        return network;\n    }\n    return StacksNetwork.fromName(network);\n};\nexport class StacksMainnet extends StacksNetwork {\n    constructor(opts) {\n        super({\n            url: opts?.url ?? HIRO_MAINNET_DEFAULT,\n            fetchFn: opts?.fetchFn,\n        });\n        this.version = TransactionVersion.Mainnet;\n        this.chainId = ChainID.Mainnet;\n    }\n}\nexport class StacksTestnet extends StacksNetwork {\n    constructor(opts) {\n        super({\n            url: opts?.url ?? HIRO_TESTNET_DEFAULT,\n            fetchFn: opts?.fetchFn,\n        });\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\nexport class StacksMocknet extends StacksNetwork {\n    constructor(opts) {\n        super({\n            url: opts?.url ?? HIRO_MOCKNET_DEFAULT,\n            fetchFn: opts?.fetchFn,\n        });\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\nexport const StacksDevnet = StacksMocknet;\n//# sourceMappingURL=network.js.map","export var ChainID;\n(function (ChainID) {\n    ChainID[ChainID[\"Testnet\"] = 2147483648] = \"Testnet\";\n    ChainID[ChainID[\"Mainnet\"] = 1] = \"Mainnet\";\n})(ChainID || (ChainID = {}));\nexport const DEFAULT_CHAIN_ID = ChainID.Mainnet;\nexport const MAX_STRING_LENGTH_BYTES = 128;\nexport const CLARITY_INT_SIZE = 128;\nexport const CLARITY_INT_BYTE_SIZE = 16;\nexport const COINBASE_BYTES_LENGTH = 32;\nexport const VRF_PROOF_BYTES_LENGTH = 80;\nexport const RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nexport const COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nexport const UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nexport const MEMO_MAX_LENGTH_BYTES = 34;\nexport const DEFAULT_CORE_NODE_API_URL = 'https://api.mainnet.hiro.so';\nexport var StacksMessageType;\n(function (StacksMessageType) {\n    StacksMessageType[StacksMessageType[\"Address\"] = 0] = \"Address\";\n    StacksMessageType[StacksMessageType[\"Principal\"] = 1] = \"Principal\";\n    StacksMessageType[StacksMessageType[\"LengthPrefixedString\"] = 2] = \"LengthPrefixedString\";\n    StacksMessageType[StacksMessageType[\"MemoString\"] = 3] = \"MemoString\";\n    StacksMessageType[StacksMessageType[\"AssetInfo\"] = 4] = \"AssetInfo\";\n    StacksMessageType[StacksMessageType[\"PostCondition\"] = 5] = \"PostCondition\";\n    StacksMessageType[StacksMessageType[\"PublicKey\"] = 6] = \"PublicKey\";\n    StacksMessageType[StacksMessageType[\"LengthPrefixedList\"] = 7] = \"LengthPrefixedList\";\n    StacksMessageType[StacksMessageType[\"Payload\"] = 8] = \"Payload\";\n    StacksMessageType[StacksMessageType[\"MessageSignature\"] = 9] = \"MessageSignature\";\n    StacksMessageType[StacksMessageType[\"StructuredDataSignature\"] = 10] = \"StructuredDataSignature\";\n    StacksMessageType[StacksMessageType[\"TransactionAuthField\"] = 11] = \"TransactionAuthField\";\n})(StacksMessageType || (StacksMessageType = {}));\nexport function whenMessageType(messageType) {\n    return (messageTypeMap) => messageTypeMap[messageType];\n}\nexport var PayloadType;\n(function (PayloadType) {\n    PayloadType[PayloadType[\"TokenTransfer\"] = 0] = \"TokenTransfer\";\n    PayloadType[PayloadType[\"SmartContract\"] = 1] = \"SmartContract\";\n    PayloadType[PayloadType[\"VersionedSmartContract\"] = 6] = \"VersionedSmartContract\";\n    PayloadType[PayloadType[\"ContractCall\"] = 2] = \"ContractCall\";\n    PayloadType[PayloadType[\"PoisonMicroblock\"] = 3] = \"PoisonMicroblock\";\n    PayloadType[PayloadType[\"Coinbase\"] = 4] = \"Coinbase\";\n    PayloadType[PayloadType[\"CoinbaseToAltRecipient\"] = 5] = \"CoinbaseToAltRecipient\";\n    PayloadType[PayloadType[\"TenureChange\"] = 7] = \"TenureChange\";\n    PayloadType[PayloadType[\"NakamotoCoinbase\"] = 8] = \"NakamotoCoinbase\";\n})(PayloadType || (PayloadType = {}));\nexport var ClarityVersion;\n(function (ClarityVersion) {\n    ClarityVersion[ClarityVersion[\"Clarity1\"] = 1] = \"Clarity1\";\n    ClarityVersion[ClarityVersion[\"Clarity2\"] = 2] = \"Clarity2\";\n})(ClarityVersion || (ClarityVersion = {}));\nexport var AnchorMode;\n(function (AnchorMode) {\n    AnchorMode[AnchorMode[\"OnChainOnly\"] = 1] = \"OnChainOnly\";\n    AnchorMode[AnchorMode[\"OffChainOnly\"] = 2] = \"OffChainOnly\";\n    AnchorMode[AnchorMode[\"Any\"] = 3] = \"Any\";\n})(AnchorMode || (AnchorMode = {}));\nexport const AnchorModeNames = ['onChainOnly', 'offChainOnly', 'any'];\nconst AnchorModeMap = {\n    [AnchorModeNames[0]]: AnchorMode.OnChainOnly,\n    [AnchorModeNames[1]]: AnchorMode.OffChainOnly,\n    [AnchorModeNames[2]]: AnchorMode.Any,\n    [AnchorMode.OnChainOnly]: AnchorMode.OnChainOnly,\n    [AnchorMode.OffChainOnly]: AnchorMode.OffChainOnly,\n    [AnchorMode.Any]: AnchorMode.Any,\n};\nexport function anchorModeFromNameOrValue(mode) {\n    if (mode in AnchorModeMap)\n        return AnchorModeMap[mode];\n    throw new Error(`Invalid anchor mode \"${mode}\", must be one of: ${AnchorModeNames.join(', ')}`);\n}\nexport var TransactionVersion;\n(function (TransactionVersion) {\n    TransactionVersion[TransactionVersion[\"Mainnet\"] = 0] = \"Mainnet\";\n    TransactionVersion[TransactionVersion[\"Testnet\"] = 128] = \"Testnet\";\n})(TransactionVersion || (TransactionVersion = {}));\nexport const DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\nexport var PostConditionMode;\n(function (PostConditionMode) {\n    PostConditionMode[PostConditionMode[\"Allow\"] = 1] = \"Allow\";\n    PostConditionMode[PostConditionMode[\"Deny\"] = 2] = \"Deny\";\n})(PostConditionMode || (PostConditionMode = {}));\nexport var PostConditionType;\n(function (PostConditionType) {\n    PostConditionType[PostConditionType[\"STX\"] = 0] = \"STX\";\n    PostConditionType[PostConditionType[\"Fungible\"] = 1] = \"Fungible\";\n    PostConditionType[PostConditionType[\"NonFungible\"] = 2] = \"NonFungible\";\n})(PostConditionType || (PostConditionType = {}));\nexport var AuthType;\n(function (AuthType) {\n    AuthType[AuthType[\"Standard\"] = 4] = \"Standard\";\n    AuthType[AuthType[\"Sponsored\"] = 5] = \"Sponsored\";\n})(AuthType || (AuthType = {}));\nexport var AddressHashMode;\n(function (AddressHashMode) {\n    AddressHashMode[AddressHashMode[\"SerializeP2PKH\"] = 0] = \"SerializeP2PKH\";\n    AddressHashMode[AddressHashMode[\"SerializeP2SH\"] = 1] = \"SerializeP2SH\";\n    AddressHashMode[AddressHashMode[\"SerializeP2WPKH\"] = 2] = \"SerializeP2WPKH\";\n    AddressHashMode[AddressHashMode[\"SerializeP2WSH\"] = 3] = \"SerializeP2WSH\";\n})(AddressHashMode || (AddressHashMode = {}));\nexport var AddressVersion;\n(function (AddressVersion) {\n    AddressVersion[AddressVersion[\"MainnetSingleSig\"] = 22] = \"MainnetSingleSig\";\n    AddressVersion[AddressVersion[\"MainnetMultiSig\"] = 20] = \"MainnetMultiSig\";\n    AddressVersion[AddressVersion[\"TestnetSingleSig\"] = 26] = \"TestnetSingleSig\";\n    AddressVersion[AddressVersion[\"TestnetMultiSig\"] = 21] = \"TestnetMultiSig\";\n})(AddressVersion || (AddressVersion = {}));\nexport var PubKeyEncoding;\n(function (PubKeyEncoding) {\n    PubKeyEncoding[PubKeyEncoding[\"Compressed\"] = 0] = \"Compressed\";\n    PubKeyEncoding[PubKeyEncoding[\"Uncompressed\"] = 1] = \"Uncompressed\";\n})(PubKeyEncoding || (PubKeyEncoding = {}));\nexport var FungibleConditionCode;\n(function (FungibleConditionCode) {\n    FungibleConditionCode[FungibleConditionCode[\"Equal\"] = 1] = \"Equal\";\n    FungibleConditionCode[FungibleConditionCode[\"Greater\"] = 2] = \"Greater\";\n    FungibleConditionCode[FungibleConditionCode[\"GreaterEqual\"] = 3] = \"GreaterEqual\";\n    FungibleConditionCode[FungibleConditionCode[\"Less\"] = 4] = \"Less\";\n    FungibleConditionCode[FungibleConditionCode[\"LessEqual\"] = 5] = \"LessEqual\";\n})(FungibleConditionCode || (FungibleConditionCode = {}));\nexport var NonFungibleConditionCode;\n(function (NonFungibleConditionCode) {\n    NonFungibleConditionCode[NonFungibleConditionCode[\"Sends\"] = 16] = \"Sends\";\n    NonFungibleConditionCode[NonFungibleConditionCode[\"DoesNotSend\"] = 17] = \"DoesNotSend\";\n})(NonFungibleConditionCode || (NonFungibleConditionCode = {}));\nexport var PostConditionPrincipalID;\n(function (PostConditionPrincipalID) {\n    PostConditionPrincipalID[PostConditionPrincipalID[\"Origin\"] = 1] = \"Origin\";\n    PostConditionPrincipalID[PostConditionPrincipalID[\"Standard\"] = 2] = \"Standard\";\n    PostConditionPrincipalID[PostConditionPrincipalID[\"Contract\"] = 3] = \"Contract\";\n})(PostConditionPrincipalID || (PostConditionPrincipalID = {}));\nexport var AssetType;\n(function (AssetType) {\n    AssetType[AssetType[\"STX\"] = 0] = \"STX\";\n    AssetType[AssetType[\"Fungible\"] = 1] = \"Fungible\";\n    AssetType[AssetType[\"NonFungible\"] = 2] = \"NonFungible\";\n})(AssetType || (AssetType = {}));\nexport var TxRejectedReason;\n(function (TxRejectedReason) {\n    TxRejectedReason[\"Serialization\"] = \"Serialization\";\n    TxRejectedReason[\"Deserialization\"] = \"Deserialization\";\n    TxRejectedReason[\"SignatureValidation\"] = \"SignatureValidation\";\n    TxRejectedReason[\"FeeTooLow\"] = \"FeeTooLow\";\n    TxRejectedReason[\"BadNonce\"] = \"BadNonce\";\n    TxRejectedReason[\"NotEnoughFunds\"] = \"NotEnoughFunds\";\n    TxRejectedReason[\"NoSuchContract\"] = \"NoSuchContract\";\n    TxRejectedReason[\"NoSuchPublicFunction\"] = \"NoSuchPublicFunction\";\n    TxRejectedReason[\"BadFunctionArgument\"] = \"BadFunctionArgument\";\n    TxRejectedReason[\"ContractAlreadyExists\"] = \"ContractAlreadyExists\";\n    TxRejectedReason[\"PoisonMicroblocksDoNotConflict\"] = \"PoisonMicroblocksDoNotConflict\";\n    TxRejectedReason[\"PoisonMicroblockHasUnknownPubKeyHash\"] = \"PoisonMicroblockHasUnknownPubKeyHash\";\n    TxRejectedReason[\"PoisonMicroblockIsInvalid\"] = \"PoisonMicroblockIsInvalid\";\n    TxRejectedReason[\"BadAddressVersionByte\"] = \"BadAddressVersionByte\";\n    TxRejectedReason[\"NoCoinbaseViaMempool\"] = \"NoCoinbaseViaMempool\";\n    TxRejectedReason[\"ServerFailureNoSuchChainTip\"] = \"ServerFailureNoSuchChainTip\";\n    TxRejectedReason[\"TooMuchChaining\"] = \"TooMuchChaining\";\n    TxRejectedReason[\"ConflictingNonceInMempool\"] = \"ConflictingNonceInMempool\";\n    TxRejectedReason[\"BadTransactionVersion\"] = \"BadTransactionVersion\";\n    TxRejectedReason[\"TransferRecipientCannotEqualSender\"] = \"TransferRecipientCannotEqualSender\";\n    TxRejectedReason[\"TransferAmountMustBePositive\"] = \"TransferAmountMustBePositive\";\n    TxRejectedReason[\"ServerFailureDatabase\"] = \"ServerFailureDatabase\";\n    TxRejectedReason[\"EstimatorError\"] = \"EstimatorError\";\n    TxRejectedReason[\"TemporarilyBlacklisted\"] = \"TemporarilyBlacklisted\";\n    TxRejectedReason[\"ServerFailureOther\"] = \"ServerFailureOther\";\n})(TxRejectedReason || (TxRejectedReason = {}));\n//# sourceMappingURL=constants.js.map","export function equals(a, b) {\n    if (a.byteLength !== b.byteLength)\n        return false;\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nexport function alloc(length, value) {\n    const a = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n        a[i] = value;\n    }\n    return a;\n}\nexport function readUInt16BE(source, offset) {\n    return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\nexport function writeUInt16BE(destination, value, offset = 0) {\n    destination[offset + 0] = value >>> 8;\n    destination[offset + 1] = value >>> 0;\n    return destination;\n}\nexport function readUInt8(source, offset) {\n    return source[offset];\n}\nexport function writeUInt8(destination, value, offset = 0) {\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt16LE(source, offset) {\n    return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\nexport function writeUInt16LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    return destination;\n}\nexport function readUInt32BE(source, offset) {\n    return (source[offset] * 2 ** 24 +\n        source[offset + 1] * 2 ** 16 +\n        source[offset + 2] * 2 ** 8 +\n        source[offset + 3]);\n}\nexport function writeUInt32BE(destination, value, offset = 0) {\n    destination[offset + 3] = value;\n    value >>>= 8;\n    destination[offset + 2] = value;\n    value >>>= 8;\n    destination[offset + 1] = value;\n    value >>>= 8;\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt32LE(source, offset) {\n    return (((source[offset + 0] << 0) >>> 0) |\n        ((source[offset + 1] << 8) >>> 0) |\n        ((source[offset + 2] << 16) >>> 0) |\n        ((source[offset + 3] << 24) >>> 0));\n}\nexport function writeUInt32LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    value >>>= 8;\n    destination[offset + 2] = value & 255;\n    value >>>= 8;\n    destination[offset + 3] = value & 255;\n    return destination;\n}\n//# sourceMappingURL=buffer.js.map","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","import { hexToInt } from './utils';\nconst COORDINATE_BYTES = 32;\nexport function parseRecoverableSignatureVrs(signature) {\n    if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n        throw new Error('Invalid signature');\n    }\n    const recoveryIdHex = signature.slice(0, 2);\n    const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n    const s = signature.slice(2 + COORDINATE_BYTES * 2);\n    return {\n        recoveryId: hexToInt(recoveryIdHex),\n        r,\n        s,\n    };\n}\nexport function signatureVrsToRsv(signature) {\n    return signature.slice(2) + signature.slice(0, 2);\n}\nexport function signatureRsvToVrs(signature) {\n    return signature.slice(-2) + signature.slice(0, -2);\n}\n//# sourceMappingURL=signatures.js.map","import { AddressHashMode, AddressVersion, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType, TransactionVersion, } from './constants';\nimport { c32address } from 'c32check';\nimport { hexToBytes } from '@stacks/common';\nexport function createMessageSignature(signature) {\n    const length = hexToBytes(signature).byteLength;\n    if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n        throw Error('Invalid signature');\n    }\n    return {\n        type: StacksMessageType.MessageSignature,\n        data: signature,\n    };\n}\nexport function addressHashModeToVersion(hashMode, txVersion) {\n    switch (hashMode) {\n        case AddressHashMode.SerializeP2PKH:\n            switch (txVersion) {\n                case TransactionVersion.Mainnet:\n                    return AddressVersion.MainnetSingleSig;\n                case TransactionVersion.Testnet:\n                    return AddressVersion.TestnetSingleSig;\n                default:\n                    throw new Error(`Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`);\n            }\n        case AddressHashMode.SerializeP2SH:\n        case AddressHashMode.SerializeP2WPKH:\n        case AddressHashMode.SerializeP2WSH:\n            switch (txVersion) {\n                case TransactionVersion.Mainnet:\n                    return AddressVersion.MainnetMultiSig;\n                case TransactionVersion.Testnet:\n                    return AddressVersion.TestnetMultiSig;\n                default:\n                    throw new Error(`Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`);\n            }\n        default:\n            throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n    }\n}\nexport function addressFromVersionHash(version, hash) {\n    return { type: StacksMessageType.Address, version, hash160: hash };\n}\nexport function addressToString(address) {\n    return c32address(address.version, address.hash160);\n}\n//# sourceMappingURL=common.js.map","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { getPublicKey as nobleGetPublicKey, Point, Signature, signSync, utils, } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, hexToBigInt, hexToBytes, intToHex, parseRecoverableSignatureVrs, privateKeyToBytes, PRIVATE_KEY_COMPRESSED_LENGTH, signatureRsvToVrs, signatureVrsToRsv, } from '@stacks/common';\nimport { c32address } from 'c32check';\nimport { addressFromVersionHash, addressHashModeToVersion, addressToString, createMessageSignature, } from './common';\nimport { AddressHashMode, COMPRESSED_PUBKEY_LENGTH_BYTES, PubKeyEncoding, StacksMessageType, TransactionVersion, UNCOMPRESSED_PUBKEY_LENGTH_BYTES, } from './constants';\nimport { hash160, hashP2PKH } from './utils';\nutils.hmacSha256Sync = (key, ...msgs) => {\n    const h = hmac.create(sha256, key);\n    msgs.forEach(msg => h.update(msg));\n    return h.digest();\n};\nexport function getAddressFromPrivateKey(privateKey, transactionVersion = TransactionVersion.Mainnet) {\n    const pubKey = pubKeyfromPrivKey(privateKey);\n    return getAddressFromPublicKey(pubKey.data, transactionVersion);\n}\nexport function getAddressFromPublicKey(publicKey, transactionVersion = TransactionVersion.Mainnet) {\n    publicKey = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n    const addrVer = addressHashModeToVersion(AddressHashMode.SerializeP2PKH, transactionVersion);\n    const addr = addressFromVersionHash(addrVer, hashP2PKH(hexToBytes(publicKey)));\n    const addrString = addressToString(addr);\n    return addrString;\n}\nexport function createStacksPublicKey(key) {\n    return {\n        type: StacksMessageType.PublicKey,\n        data: hexToBytes(key),\n    };\n}\nexport function publicKeyFromSignatureVrs(messageHash, messageSignature, pubKeyEncoding = PubKeyEncoding.Compressed) {\n    const parsedSignature = parseRecoverableSignatureVrs(messageSignature.data);\n    const signature = new Signature(hexToBigInt(parsedSignature.r), hexToBigInt(parsedSignature.s));\n    const point = Point.fromSignature(messageHash, signature, parsedSignature.recoveryId);\n    const compressed = pubKeyEncoding === PubKeyEncoding.Compressed;\n    return point.toHex(compressed);\n}\nexport function publicKeyFromSignatureRsv(messageHash, messageSignature, pubKeyEncoding = PubKeyEncoding.Compressed) {\n    return publicKeyFromSignatureVrs(messageHash, { ...messageSignature, data: signatureRsvToVrs(messageSignature.data) }, pubKeyEncoding);\n}\nexport function publicKeyFromBytes(data) {\n    return { type: StacksMessageType.PublicKey, data };\n}\nexport function isCompressed(key) {\n    return !bytesToHex(key.data).startsWith('04');\n}\nexport function publicKeyToString(key) {\n    return bytesToHex(key.data);\n}\nexport function serializePublicKey(key) {\n    return key.data.slice();\n}\nexport function pubKeyfromPrivKey(privateKey) {\n    const privKey = createStacksPrivateKey(privateKey);\n    const publicKey = nobleGetPublicKey(privKey.data.slice(0, 32), privKey.compressed);\n    return createStacksPublicKey(bytesToHex(publicKey));\n}\nexport function compressPublicKey(publicKey) {\n    const hex = typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n    const compressed = Point.fromHex(hex).toHex(true);\n    return createStacksPublicKey(compressed);\n}\nexport function deserializePublicKey(bytesReader) {\n    const fieldId = bytesReader.readUInt8();\n    const keyLength = fieldId === 4 ? UNCOMPRESSED_PUBKEY_LENGTH_BYTES : COMPRESSED_PUBKEY_LENGTH_BYTES;\n    return publicKeyFromBytes(concatArray([fieldId, bytesReader.readBytes(keyLength)]));\n}\nexport function createStacksPrivateKey(key) {\n    const data = privateKeyToBytes(key);\n    const compressed = data.length == PRIVATE_KEY_COMPRESSED_LENGTH;\n    return { data, compressed };\n}\nexport function makeRandomPrivKey() {\n    return createStacksPrivateKey(utils.randomPrivateKey());\n}\nexport function signWithKey(privateKey, messageHash) {\n    const [rawSignature, recoveryId] = signSync(messageHash, privateKey.data.slice(0, 32), {\n        canonical: true,\n        recovered: true,\n    });\n    if (recoveryId == null) {\n        throw new Error('No signature recoveryId received');\n    }\n    const recoveryIdHex = intToHex(recoveryId, 1);\n    const recoverableSignatureString = recoveryIdHex + Signature.fromHex(rawSignature).toCompactHex();\n    return createMessageSignature(recoverableSignatureString);\n}\nexport function signMessageHashRsv({ messageHash, privateKey, }) {\n    const messageSignature = signWithKey(privateKey, messageHash);\n    return { ...messageSignature, data: signatureVrsToRsv(messageSignature.data) };\n}\nexport function getPublicKey(privateKey) {\n    return pubKeyfromPrivKey(privateKey.data);\n}\nexport function privateKeyToString(privateKey) {\n    return bytesToHex(privateKey.data);\n}\nexport function publicKeyToAddress(version, publicKey) {\n    return c32address(version, bytesToHex(hash160(publicKey.data)));\n}\n//# sourceMappingURL=keys.js.map","import { hexToBytes } from './utils';\nexport function privateKeyToBytes(privateKey) {\n    const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n    if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n        throw new Error(`Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`);\n    }\n    if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n        throw new Error('Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01');\n    }\n    return privateKeyBuffer;\n}\n//# sourceMappingURL=keys.js.map","import { MAX_STRING_LENGTH_BYTES, PostConditionPrincipalID, StacksMessageType, } from './constants';\nimport { c32addressDecode } from 'c32check';\nimport { exceedsMaxLengthBytes } from './utils';\nexport function parseAssetInfoString(id) {\n    const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n    const assetInfo = createAssetInfo(assetAddress, assetContractName, assetTokenName);\n    return assetInfo;\n}\nexport function createLPString(content, lengthPrefixBytes, maxLengthBytes) {\n    const prefixLength = lengthPrefixBytes || 1;\n    const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n    if (exceedsMaxLengthBytes(content, maxLength)) {\n        throw new Error(`String length exceeds maximum bytes ${maxLength}`);\n    }\n    return {\n        type: StacksMessageType.LengthPrefixedString,\n        content,\n        lengthPrefixBytes: prefixLength,\n        maxLengthBytes: maxLength,\n    };\n}\nexport function createAssetInfo(addressString, contractName, assetName) {\n    return {\n        type: StacksMessageType.AssetInfo,\n        address: createAddress(addressString),\n        contractName: createLPString(contractName),\n        assetName: createLPString(assetName),\n    };\n}\nexport function createAddress(c32AddressString) {\n    const addressData = c32addressDecode(c32AddressString);\n    return {\n        type: StacksMessageType.Address,\n        version: addressData[0],\n        hash160: addressData[1],\n    };\n}\nexport function parsePrincipalString(principalString) {\n    if (principalString.includes('.')) {\n        const [address, contractName] = principalString.split('.');\n        return createContractPrincipal(address, contractName);\n    }\n    else {\n        return createStandardPrincipal(principalString);\n    }\n}\nexport function createContractPrincipal(addressString, contractName) {\n    const addr = createAddress(addressString);\n    const name = createLPString(contractName);\n    return {\n        type: StacksMessageType.Principal,\n        prefix: PostConditionPrincipalID.Contract,\n        address: addr,\n        contractName: name,\n    };\n}\nexport function createStandardPrincipal(addressString) {\n    const addr = createAddress(addressString);\n    return {\n        type: StacksMessageType.Principal,\n        prefix: PostConditionPrincipalID.Standard,\n        address: addr,\n    };\n}\n//# sourceMappingURL=postcondition-types.js.map","export var ClarityType;\n(function (ClarityType) {\n    ClarityType[ClarityType[\"Int\"] = 0] = \"Int\";\n    ClarityType[ClarityType[\"UInt\"] = 1] = \"UInt\";\n    ClarityType[ClarityType[\"Buffer\"] = 2] = \"Buffer\";\n    ClarityType[ClarityType[\"BoolTrue\"] = 3] = \"BoolTrue\";\n    ClarityType[ClarityType[\"BoolFalse\"] = 4] = \"BoolFalse\";\n    ClarityType[ClarityType[\"PrincipalStandard\"] = 5] = \"PrincipalStandard\";\n    ClarityType[ClarityType[\"PrincipalContract\"] = 6] = \"PrincipalContract\";\n    ClarityType[ClarityType[\"ResponseOk\"] = 7] = \"ResponseOk\";\n    ClarityType[ClarityType[\"ResponseErr\"] = 8] = \"ResponseErr\";\n    ClarityType[ClarityType[\"OptionalNone\"] = 9] = \"OptionalNone\";\n    ClarityType[ClarityType[\"OptionalSome\"] = 10] = \"OptionalSome\";\n    ClarityType[ClarityType[\"List\"] = 11] = \"List\";\n    ClarityType[ClarityType[\"Tuple\"] = 12] = \"Tuple\";\n    ClarityType[ClarityType[\"StringASCII\"] = 13] = \"StringASCII\";\n    ClarityType[ClarityType[\"StringUTF8\"] = 14] = \"StringUTF8\";\n})(ClarityType || (ClarityType = {}));\n//# sourceMappingURL=constants.js.map","import { bytesToHex, concatArray, hexToBytes, intToBigInt, intToBytes, writeUInt32BE, writeUInt8, } from '@stacks/common';\nimport { ClarityType, deserializeCV, noneCV, serializeCV, someCV, } from './clarity/';\nimport { principalCV } from './clarity/types/principalCV';\nimport { ClarityVersion, COINBASE_BYTES_LENGTH, PayloadType, StacksMessageType, VRF_PROOF_BYTES_LENGTH, } from './constants';\nimport { createAddress, createLPString } from './postcondition-types';\nimport { codeBodyString, createMemoString, deserializeAddress, deserializeLPString, deserializeMemoString, serializeStacksMessage, } from './types';\nexport function isTokenTransferPayload(p) {\n    return p.payloadType === PayloadType.TokenTransfer;\n}\nexport function isContractCallPayload(p) {\n    return p.payloadType === PayloadType.ContractCall;\n}\nexport function isSmartContractPayload(p) {\n    return p.payloadType === PayloadType.SmartContract;\n}\nexport function isPoisonPayload(p) {\n    return p.payloadType === PayloadType.PoisonMicroblock;\n}\nexport function isCoinbasePayload(p) {\n    return p.payloadType === PayloadType.Coinbase;\n}\nexport function createTokenTransferPayload(recipient, amount, memo) {\n    if (typeof recipient === 'string') {\n        recipient = principalCV(recipient);\n    }\n    if (typeof memo === 'string') {\n        memo = createMemoString(memo);\n    }\n    return {\n        type: StacksMessageType.Payload,\n        payloadType: PayloadType.TokenTransfer,\n        recipient,\n        amount: intToBigInt(amount, false),\n        memo: memo ?? createMemoString(''),\n    };\n}\nexport function createContractCallPayload(contractAddress, contractName, functionName, functionArgs) {\n    if (typeof contractAddress === 'string') {\n        contractAddress = createAddress(contractAddress);\n    }\n    if (typeof contractName === 'string') {\n        contractName = createLPString(contractName);\n    }\n    if (typeof functionName === 'string') {\n        functionName = createLPString(functionName);\n    }\n    return {\n        type: StacksMessageType.Payload,\n        payloadType: PayloadType.ContractCall,\n        contractAddress,\n        contractName,\n        functionName,\n        functionArgs,\n    };\n}\nexport function createSmartContractPayload(contractName, codeBody, clarityVersion) {\n    if (typeof contractName === 'string') {\n        contractName = createLPString(contractName);\n    }\n    if (typeof codeBody === 'string') {\n        codeBody = codeBodyString(codeBody);\n    }\n    if (typeof clarityVersion === 'number') {\n        return {\n            type: StacksMessageType.Payload,\n            payloadType: PayloadType.VersionedSmartContract,\n            clarityVersion,\n            contractName,\n            codeBody,\n        };\n    }\n    return {\n        type: StacksMessageType.Payload,\n        payloadType: PayloadType.SmartContract,\n        contractName,\n        codeBody,\n    };\n}\nexport function createPoisonPayload() {\n    return { type: StacksMessageType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\nexport function createCoinbasePayload(coinbaseBytes, altRecipient) {\n    if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n        throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n    }\n    if (altRecipient != undefined) {\n        return {\n            type: StacksMessageType.Payload,\n            payloadType: PayloadType.CoinbaseToAltRecipient,\n            coinbaseBytes,\n            recipient: altRecipient,\n        };\n    }\n    return {\n        type: StacksMessageType.Payload,\n        payloadType: PayloadType.Coinbase,\n        coinbaseBytes,\n    };\n}\nexport function createNakamotoCoinbasePayload(coinbaseBytes, recipient, vrfProof) {\n    if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n        throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n    }\n    if (vrfProof.byteLength != VRF_PROOF_BYTES_LENGTH) {\n        throw Error(`VRF proof buffer size must be ${VRF_PROOF_BYTES_LENGTH} bytes`);\n    }\n    return {\n        type: StacksMessageType.Payload,\n        payloadType: PayloadType.NakamotoCoinbase,\n        coinbaseBytes,\n        recipient: recipient.type === ClarityType.OptionalSome ? recipient.value : undefined,\n        vrfProof,\n    };\n}\nexport var TenureChangeCause;\n(function (TenureChangeCause) {\n    TenureChangeCause[TenureChangeCause[\"BlockFound\"] = 0] = \"BlockFound\";\n    TenureChangeCause[TenureChangeCause[\"Extended\"] = 1] = \"Extended\";\n})(TenureChangeCause || (TenureChangeCause = {}));\nexport function createTenureChangePayload(tenureHash, previousTenureHash, burnViewHash, previousTenureEnd, previousTenureBlocks, cause, publicKeyHash) {\n    return {\n        type: StacksMessageType.Payload,\n        payloadType: PayloadType.TenureChange,\n        tenureHash,\n        previousTenureHash,\n        burnViewHash,\n        previousTenureEnd,\n        previousTenureBlocks,\n        cause,\n        publicKeyHash,\n    };\n}\nexport function serializePayload(payload) {\n    const bytesArray = [];\n    bytesArray.push(payload.payloadType);\n    switch (payload.payloadType) {\n        case PayloadType.TokenTransfer:\n            bytesArray.push(serializeCV(payload.recipient));\n            bytesArray.push(intToBytes(payload.amount, false, 8));\n            bytesArray.push(serializeStacksMessage(payload.memo));\n            break;\n        case PayloadType.ContractCall:\n            bytesArray.push(serializeStacksMessage(payload.contractAddress));\n            bytesArray.push(serializeStacksMessage(payload.contractName));\n            bytesArray.push(serializeStacksMessage(payload.functionName));\n            const numArgs = new Uint8Array(4);\n            writeUInt32BE(numArgs, payload.functionArgs.length, 0);\n            bytesArray.push(numArgs);\n            payload.functionArgs.forEach(arg => {\n                bytesArray.push(serializeCV(arg));\n            });\n            break;\n        case PayloadType.SmartContract:\n            bytesArray.push(serializeStacksMessage(payload.contractName));\n            bytesArray.push(serializeStacksMessage(payload.codeBody));\n            break;\n        case PayloadType.VersionedSmartContract:\n            bytesArray.push(payload.clarityVersion);\n            bytesArray.push(serializeStacksMessage(payload.contractName));\n            bytesArray.push(serializeStacksMessage(payload.codeBody));\n            break;\n        case PayloadType.PoisonMicroblock:\n            break;\n        case PayloadType.Coinbase:\n            bytesArray.push(payload.coinbaseBytes);\n            break;\n        case PayloadType.CoinbaseToAltRecipient:\n            bytesArray.push(payload.coinbaseBytes);\n            bytesArray.push(serializeCV(payload.recipient));\n            break;\n        case PayloadType.NakamotoCoinbase:\n            bytesArray.push(payload.coinbaseBytes);\n            bytesArray.push(serializeCV(payload.recipient ? someCV(payload.recipient) : noneCV()));\n            bytesArray.push(payload.vrfProof);\n            break;\n        case PayloadType.TenureChange:\n            bytesArray.push(hexToBytes(payload.tenureHash));\n            bytesArray.push(hexToBytes(payload.previousTenureHash));\n            bytesArray.push(hexToBytes(payload.burnViewHash));\n            bytesArray.push(hexToBytes(payload.previousTenureEnd));\n            bytesArray.push(writeUInt32BE(new Uint8Array(4), payload.previousTenureBlocks));\n            bytesArray.push(writeUInt8(new Uint8Array(1), payload.cause));\n            bytesArray.push(hexToBytes(payload.publicKeyHash));\n            break;\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializePayload(bytesReader) {\n    const payloadType = bytesReader.readUInt8Enum(PayloadType, n => {\n        throw new Error(`Cannot recognize PayloadType: ${n}`);\n    });\n    switch (payloadType) {\n        case PayloadType.TokenTransfer:\n            const recipient = deserializeCV(bytesReader);\n            const amount = intToBigInt(bytesReader.readBytes(8), false);\n            const memo = deserializeMemoString(bytesReader);\n            return createTokenTransferPayload(recipient, amount, memo);\n        case PayloadType.ContractCall:\n            const contractAddress = deserializeAddress(bytesReader);\n            const contractCallName = deserializeLPString(bytesReader);\n            const functionName = deserializeLPString(bytesReader);\n            const functionArgs = [];\n            const numberOfArgs = bytesReader.readUInt32BE();\n            for (let i = 0; i < numberOfArgs; i++) {\n                const clarityValue = deserializeCV(bytesReader);\n                functionArgs.push(clarityValue);\n            }\n            return createContractCallPayload(contractAddress, contractCallName, functionName, functionArgs);\n        case PayloadType.SmartContract:\n            const smartContractName = deserializeLPString(bytesReader);\n            const codeBody = deserializeLPString(bytesReader, 4, 100000);\n            return createSmartContractPayload(smartContractName, codeBody);\n        case PayloadType.VersionedSmartContract: {\n            const clarityVersion = bytesReader.readUInt8Enum(ClarityVersion, n => {\n                throw new Error(`Cannot recognize ClarityVersion: ${n}`);\n            });\n            const smartContractName = deserializeLPString(bytesReader);\n            const codeBody = deserializeLPString(bytesReader, 4, 100000);\n            return createSmartContractPayload(smartContractName, codeBody, clarityVersion);\n        }\n        case PayloadType.PoisonMicroblock:\n            return createPoisonPayload();\n        case PayloadType.Coinbase: {\n            const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n            return createCoinbasePayload(coinbaseBytes);\n        }\n        case PayloadType.CoinbaseToAltRecipient: {\n            const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n            const altRecipient = deserializeCV(bytesReader);\n            return createCoinbasePayload(coinbaseBytes, altRecipient);\n        }\n        case PayloadType.NakamotoCoinbase: {\n            const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n            const recipient = deserializeCV(bytesReader);\n            const vrfProof = bytesReader.readBytes(VRF_PROOF_BYTES_LENGTH);\n            return createNakamotoCoinbasePayload(coinbaseBytes, recipient, vrfProof);\n        }\n        case PayloadType.TenureChange:\n            const tenureHash = bytesToHex(bytesReader.readBytes(20));\n            const previousTenureHash = bytesToHex(bytesReader.readBytes(20));\n            const burnViewHash = bytesToHex(bytesReader.readBytes(20));\n            const previousTenureEnd = bytesToHex(bytesReader.readBytes(32));\n            const previousTenureBlocks = bytesReader.readUInt32BE();\n            const cause = bytesReader.readUInt8Enum(TenureChangeCause, n => {\n                throw new Error(`Cannot recognize TenureChangeCause: ${n}`);\n            });\n            const publicKeyHash = bytesToHex(bytesReader.readBytes(20));\n            return createTenureChangePayload(tenureHash, previousTenureHash, burnViewHash, previousTenureEnd, previousTenureBlocks, cause, publicKeyHash);\n    }\n}\n//# sourceMappingURL=payload.js.map","import { DeserializationError } from './errors';\nimport { PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType } from './constants';\nimport { compressPublicKey, deserializePublicKey, serializePublicKey, } from './keys';\nimport { createMessageSignature } from './common';\nimport { bytesToHex, concatArray, hexToBytes } from '@stacks/common';\nexport var AuthFieldType;\n(function (AuthFieldType) {\n    AuthFieldType[AuthFieldType[\"PublicKeyCompressed\"] = 0] = \"PublicKeyCompressed\";\n    AuthFieldType[AuthFieldType[\"PublicKeyUncompressed\"] = 1] = \"PublicKeyUncompressed\";\n    AuthFieldType[AuthFieldType[\"SignatureCompressed\"] = 2] = \"SignatureCompressed\";\n    AuthFieldType[AuthFieldType[\"SignatureUncompressed\"] = 3] = \"SignatureUncompressed\";\n})(AuthFieldType || (AuthFieldType = {}));\nexport function deserializeMessageSignature(bytesReader) {\n    return createMessageSignature(bytesToHex(bytesReader.readBytes(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)));\n}\nexport function createTransactionAuthField(pubKeyEncoding, contents) {\n    return {\n        pubKeyEncoding,\n        type: StacksMessageType.TransactionAuthField,\n        contents,\n    };\n}\nexport function deserializeTransactionAuthField(bytesReader) {\n    const authFieldType = bytesReader.readUInt8Enum(AuthFieldType, n => {\n        throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n    });\n    switch (authFieldType) {\n        case AuthFieldType.PublicKeyCompressed:\n            return createTransactionAuthField(PubKeyEncoding.Compressed, deserializePublicKey(bytesReader));\n        case AuthFieldType.PublicKeyUncompressed:\n            return createTransactionAuthField(PubKeyEncoding.Uncompressed, deserializePublicKey(bytesReader));\n        case AuthFieldType.SignatureCompressed:\n            return createTransactionAuthField(PubKeyEncoding.Compressed, deserializeMessageSignature(bytesReader));\n        case AuthFieldType.SignatureUncompressed:\n            return createTransactionAuthField(PubKeyEncoding.Uncompressed, deserializeMessageSignature(bytesReader));\n        default:\n            throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n    }\n}\nexport function serializeMessageSignature(messageSignature) {\n    return hexToBytes(messageSignature.data);\n}\nexport function serializeTransactionAuthField(field) {\n    const bytesArray = [];\n    switch (field.contents.type) {\n        case StacksMessageType.PublicKey:\n            if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n                bytesArray.push(AuthFieldType.PublicKeyCompressed);\n                bytesArray.push(serializePublicKey(field.contents));\n            }\n            else {\n                bytesArray.push(AuthFieldType.PublicKeyUncompressed);\n                bytesArray.push(serializePublicKey(compressPublicKey(field.contents.data)));\n            }\n            break;\n        case StacksMessageType.MessageSignature:\n            if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n                bytesArray.push(AuthFieldType.SignatureCompressed);\n            }\n            else {\n                bytesArray.push(AuthFieldType.SignatureUncompressed);\n            }\n            bytesArray.push(serializeMessageSignature(field.contents));\n            break;\n    }\n    return concatArray(bytesArray);\n}\n//# sourceMappingURL=signature.js.map","import { ClarityType } from '../constants';\nfunction noneCV() {\n    return { type: ClarityType.OptionalNone };\n}\nfunction someCV(value) {\n    return { type: ClarityType.OptionalSome, value };\n}\nfunction optionalCVOf(value) {\n    if (value) {\n        return someCV(value);\n    }\n    else {\n        return noneCV();\n    }\n}\nexport { noneCV, someCV, optionalCVOf };\n//# sourceMappingURL=optionalCV.js.map","class TransactionError extends Error {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        this.name = this.constructor.name;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nexport class SerializationError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class DeserializationError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class NoEstimateAvailableError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class NotImplementedError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class SigningError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class VerificationError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\n//# sourceMappingURL=errors.js.map","import { bytesToHex, bytesToUtf8, concatArray, hexToBytes, hexToInt, intToBytes, intToHex, utf8ToBytes, } from '@stacks/common';\nimport { MEMO_MAX_LENGTH_BYTES, AddressHashMode, AddressVersion, StacksMessageType, PostConditionPrincipalID, PostConditionType, FungibleConditionCode, NonFungibleConditionCode, } from './constants';\nimport { serializePublicKey, deserializePublicKey, isCompressed } from './keys';\nimport { exceedsMaxLengthBytes, hashP2PKH, rightPadHexToLength, hashP2SH, hashP2WSH, hashP2WPKH, } from './utils';\nimport { createLPString, } from './postcondition-types';\nimport { deserializePayload, serializePayload } from './payload';\nimport { DeserializationError, SerializationError } from './errors';\nimport { deserializeTransactionAuthField, deserializeMessageSignature, serializeMessageSignature, serializeTransactionAuthField, } from './signature';\nimport { addressHashModeToVersion, addressFromVersionHash, } from './common';\nimport { deserializeCV, serializeCV } from './clarity';\nexport function serializeStacksMessage(message) {\n    switch (message.type) {\n        case StacksMessageType.Address:\n            return serializeAddress(message);\n        case StacksMessageType.Principal:\n            return serializePrincipal(message);\n        case StacksMessageType.LengthPrefixedString:\n            return serializeLPString(message);\n        case StacksMessageType.MemoString:\n            return serializeMemoString(message);\n        case StacksMessageType.AssetInfo:\n            return serializeAssetInfo(message);\n        case StacksMessageType.PostCondition:\n            return serializePostCondition(message);\n        case StacksMessageType.PublicKey:\n            return serializePublicKey(message);\n        case StacksMessageType.LengthPrefixedList:\n            return serializeLPList(message);\n        case StacksMessageType.Payload:\n            return serializePayload(message);\n        case StacksMessageType.TransactionAuthField:\n            return serializeTransactionAuthField(message);\n        case StacksMessageType.MessageSignature:\n            return serializeMessageSignature(message);\n    }\n}\nexport function deserializeStacksMessage(bytesReader, type, listType) {\n    switch (type) {\n        case StacksMessageType.Address:\n            return deserializeAddress(bytesReader);\n        case StacksMessageType.Principal:\n            return deserializePrincipal(bytesReader);\n        case StacksMessageType.LengthPrefixedString:\n            return deserializeLPString(bytesReader);\n        case StacksMessageType.MemoString:\n            return deserializeMemoString(bytesReader);\n        case StacksMessageType.AssetInfo:\n            return deserializeAssetInfo(bytesReader);\n        case StacksMessageType.PostCondition:\n            return deserializePostCondition(bytesReader);\n        case StacksMessageType.PublicKey:\n            return deserializePublicKey(bytesReader);\n        case StacksMessageType.Payload:\n            return deserializePayload(bytesReader);\n        case StacksMessageType.LengthPrefixedList:\n            if (!listType) {\n                throw new DeserializationError('No List Type specified');\n            }\n            return deserializeLPList(bytesReader, listType);\n        case StacksMessageType.MessageSignature:\n            return deserializeMessageSignature(bytesReader);\n        default:\n            throw new Error('Could not recognize StacksMessageType');\n    }\n}\nexport function createEmptyAddress() {\n    return {\n        type: StacksMessageType.Address,\n        version: AddressVersion.MainnetSingleSig,\n        hash160: '0'.repeat(40),\n    };\n}\nexport function addressFromHashMode(hashMode, txVersion, data) {\n    const version = addressHashModeToVersion(hashMode, txVersion);\n    return addressFromVersionHash(version, data);\n}\nexport function addressFromPublicKeys(version, hashMode, numSigs, publicKeys) {\n    if (publicKeys.length === 0) {\n        throw Error('Invalid number of public keys');\n    }\n    if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n        if (publicKeys.length !== 1 || numSigs !== 1) {\n            throw Error('Invalid number of public keys or signatures');\n        }\n    }\n    if (hashMode === AddressHashMode.SerializeP2WPKH || hashMode === AddressHashMode.SerializeP2WSH) {\n        for (let i = 0; i < publicKeys.length; i++) {\n            if (!isCompressed(publicKeys[i])) {\n                throw Error('Public keys must be compressed for segwit');\n            }\n        }\n    }\n    switch (hashMode) {\n        case AddressHashMode.SerializeP2PKH:\n            return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n        case AddressHashMode.SerializeP2WPKH:\n            return addressFromVersionHash(version, hashP2WPKH(publicKeys[0].data));\n        case AddressHashMode.SerializeP2SH:\n            return addressFromVersionHash(version, hashP2SH(numSigs, publicKeys.map(serializePublicKey)));\n        case AddressHashMode.SerializeP2WSH:\n            return addressFromVersionHash(version, hashP2WSH(numSigs, publicKeys.map(serializePublicKey)));\n    }\n}\nexport function serializeAddress(address) {\n    const bytesArray = [];\n    bytesArray.push(hexToBytes(intToHex(address.version, 1)));\n    bytesArray.push(hexToBytes(address.hash160));\n    return concatArray(bytesArray);\n}\nexport function deserializeAddress(bytesReader) {\n    const version = hexToInt(bytesToHex(bytesReader.readBytes(1)));\n    const data = bytesToHex(bytesReader.readBytes(20));\n    return { type: StacksMessageType.Address, version, hash160: data };\n}\nexport function serializePrincipal(principal) {\n    const bytesArray = [];\n    bytesArray.push(principal.prefix);\n    bytesArray.push(serializeAddress(principal.address));\n    if (principal.prefix === PostConditionPrincipalID.Contract) {\n        bytesArray.push(serializeLPString(principal.contractName));\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializePrincipal(bytesReader) {\n    const prefix = bytesReader.readUInt8Enum(PostConditionPrincipalID, n => {\n        throw new DeserializationError(`Unexpected Principal payload type: ${n}`);\n    });\n    const address = deserializeAddress(bytesReader);\n    if (prefix === PostConditionPrincipalID.Standard) {\n        return { type: StacksMessageType.Principal, prefix, address };\n    }\n    const contractName = deserializeLPString(bytesReader);\n    return {\n        type: StacksMessageType.Principal,\n        prefix,\n        address,\n        contractName,\n    };\n}\nexport function serializeLPString(lps) {\n    const bytesArray = [];\n    const contentBytes = utf8ToBytes(lps.content);\n    const length = contentBytes.byteLength;\n    bytesArray.push(hexToBytes(intToHex(length, lps.lengthPrefixBytes)));\n    bytesArray.push(contentBytes);\n    return concatArray(bytesArray);\n}\nexport function deserializeLPString(bytesReader, prefixBytes, maxLength) {\n    prefixBytes = prefixBytes ? prefixBytes : 1;\n    const length = hexToInt(bytesToHex(bytesReader.readBytes(prefixBytes)));\n    const content = bytesToUtf8(bytesReader.readBytes(length));\n    return createLPString(content, prefixBytes, maxLength ?? 128);\n}\nexport function codeBodyString(content) {\n    return createLPString(content, 4, 100000);\n}\nexport function createMemoString(content) {\n    if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n        throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES} bytes`);\n    }\n    return { type: StacksMessageType.MemoString, content };\n}\nexport function serializeMemoString(memoString) {\n    const bytesArray = [];\n    const contentBytes = utf8ToBytes(memoString.content);\n    const paddedContent = rightPadHexToLength(bytesToHex(contentBytes), MEMO_MAX_LENGTH_BYTES * 2);\n    bytesArray.push(hexToBytes(paddedContent));\n    return concatArray(bytesArray);\n}\nexport function deserializeMemoString(bytesReader) {\n    let content = bytesToUtf8(bytesReader.readBytes(MEMO_MAX_LENGTH_BYTES));\n    content = content.replace(/\\u0000*$/, '');\n    return { type: StacksMessageType.MemoString, content };\n}\nexport function serializeAssetInfo(info) {\n    const bytesArray = [];\n    bytesArray.push(serializeAddress(info.address));\n    bytesArray.push(serializeLPString(info.contractName));\n    bytesArray.push(serializeLPString(info.assetName));\n    return concatArray(bytesArray);\n}\nexport function deserializeAssetInfo(bytesReader) {\n    return {\n        type: StacksMessageType.AssetInfo,\n        address: deserializeAddress(bytesReader),\n        contractName: deserializeLPString(bytesReader),\n        assetName: deserializeLPString(bytesReader),\n    };\n}\nexport function createLPList(values, lengthPrefixBytes) {\n    return {\n        type: StacksMessageType.LengthPrefixedList,\n        lengthPrefixBytes: lengthPrefixBytes || 4,\n        values,\n    };\n}\nexport function serializeLPList(lpList) {\n    const list = lpList.values;\n    const bytesArray = [];\n    bytesArray.push(hexToBytes(intToHex(list.length, lpList.lengthPrefixBytes)));\n    for (const l of list) {\n        bytesArray.push(serializeStacksMessage(l));\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializeLPList(bytesReader, type, lengthPrefixBytes) {\n    const length = hexToInt(bytesToHex(bytesReader.readBytes(lengthPrefixBytes || 4)));\n    const l = [];\n    for (let index = 0; index < length; index++) {\n        switch (type) {\n            case StacksMessageType.Address:\n                l.push(deserializeAddress(bytesReader));\n                break;\n            case StacksMessageType.LengthPrefixedString:\n                l.push(deserializeLPString(bytesReader));\n                break;\n            case StacksMessageType.MemoString:\n                l.push(deserializeMemoString(bytesReader));\n                break;\n            case StacksMessageType.AssetInfo:\n                l.push(deserializeAssetInfo(bytesReader));\n                break;\n            case StacksMessageType.PostCondition:\n                l.push(deserializePostCondition(bytesReader));\n                break;\n            case StacksMessageType.PublicKey:\n                l.push(deserializePublicKey(bytesReader));\n                break;\n            case StacksMessageType.TransactionAuthField:\n                l.push(deserializeTransactionAuthField(bytesReader));\n                break;\n        }\n    }\n    return createLPList(l, lengthPrefixBytes);\n}\nexport function serializePostCondition(postCondition) {\n    const bytesArray = [];\n    bytesArray.push(postCondition.conditionType);\n    bytesArray.push(serializePrincipal(postCondition.principal));\n    if (postCondition.conditionType === PostConditionType.Fungible ||\n        postCondition.conditionType === PostConditionType.NonFungible) {\n        bytesArray.push(serializeAssetInfo(postCondition.assetInfo));\n    }\n    if (postCondition.conditionType === PostConditionType.NonFungible) {\n        bytesArray.push(serializeCV(postCondition.assetName));\n    }\n    bytesArray.push(postCondition.conditionCode);\n    if (postCondition.conditionType === PostConditionType.STX ||\n        postCondition.conditionType === PostConditionType.Fungible) {\n        if (postCondition.amount > BigInt('0xffffffffffffffff'))\n            throw new SerializationError('The post-condition amount may not be larger than 8 bytes');\n        bytesArray.push(intToBytes(postCondition.amount, false, 8));\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializePostCondition(bytesReader) {\n    const postConditionType = bytesReader.readUInt8Enum(PostConditionType, n => {\n        throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n    });\n    const principal = deserializePrincipal(bytesReader);\n    let conditionCode;\n    let assetInfo;\n    let amount;\n    switch (postConditionType) {\n        case PostConditionType.STX:\n            conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n            return {\n                type: StacksMessageType.PostCondition,\n                conditionType: PostConditionType.STX,\n                principal,\n                conditionCode,\n                amount,\n            };\n        case PostConditionType.Fungible:\n            assetInfo = deserializeAssetInfo(bytesReader);\n            conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n            return {\n                type: StacksMessageType.PostCondition,\n                conditionType: PostConditionType.Fungible,\n                principal,\n                conditionCode,\n                amount,\n                assetInfo,\n            };\n        case PostConditionType.NonFungible:\n            assetInfo = deserializeAssetInfo(bytesReader);\n            const assetName = deserializeCV(bytesReader);\n            conditionCode = bytesReader.readUInt8Enum(NonFungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            return {\n                type: StacksMessageType.PostCondition,\n                conditionType: PostConditionType.NonFungible,\n                principal,\n                conditionCode,\n                assetInfo,\n                assetName,\n            };\n    }\n}\n//# sourceMappingURL=types.js.map","import { concatArray, concatBytes, bigIntToBytes, toTwos, writeUInt32BE, utf8ToBytes, asciiToBytes, } from '@stacks/common';\nimport { serializeAddress, serializeLPString } from '../types';\nimport { createLPString } from '../postcondition-types';\nimport { ClarityType } from './constants';\nimport { SerializationError } from '../errors';\nimport { CLARITY_INT_BYTE_SIZE, CLARITY_INT_SIZE } from '../constants';\nfunction bytesWithTypeID(typeId, bytes) {\n    return concatArray([typeId, bytes]);\n}\nfunction serializeBoolCV(value) {\n    return new Uint8Array([value.type]);\n}\nfunction serializeOptionalCV(cv) {\n    if (cv.type === ClarityType.OptionalNone) {\n        return new Uint8Array([cv.type]);\n    }\n    else {\n        return bytesWithTypeID(cv.type, serializeCV(cv.value));\n    }\n}\nfunction serializeBufferCV(cv) {\n    const length = new Uint8Array(4);\n    writeUInt32BE(length, cv.buffer.length, 0);\n    return bytesWithTypeID(cv.type, concatBytes(length, cv.buffer));\n}\nfunction serializeIntCV(cv) {\n    const bytes = bigIntToBytes(toTwos(cv.value, BigInt(CLARITY_INT_SIZE)), CLARITY_INT_BYTE_SIZE);\n    return bytesWithTypeID(cv.type, bytes);\n}\nfunction serializeUIntCV(cv) {\n    const bytes = bigIntToBytes(cv.value, CLARITY_INT_BYTE_SIZE);\n    return bytesWithTypeID(cv.type, bytes);\n}\nfunction serializeStandardPrincipalCV(cv) {\n    return bytesWithTypeID(cv.type, serializeAddress(cv.address));\n}\nfunction serializeContractPrincipalCV(cv) {\n    return bytesWithTypeID(cv.type, concatBytes(serializeAddress(cv.address), serializeLPString(cv.contractName)));\n}\nfunction serializeResponseCV(cv) {\n    return bytesWithTypeID(cv.type, serializeCV(cv.value));\n}\nfunction serializeListCV(cv) {\n    const bytesArray = [];\n    const length = new Uint8Array(4);\n    writeUInt32BE(length, cv.list.length, 0);\n    bytesArray.push(length);\n    for (const value of cv.list) {\n        const serializedValue = serializeCV(value);\n        bytesArray.push(serializedValue);\n    }\n    return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\nfunction serializeTupleCV(cv) {\n    const bytesArray = [];\n    const length = new Uint8Array(4);\n    writeUInt32BE(length, Object.keys(cv.data).length, 0);\n    bytesArray.push(length);\n    const lexicographicOrder = Object.keys(cv.data).sort((a, b) => a.localeCompare(b));\n    for (const key of lexicographicOrder) {\n        const nameWithLength = createLPString(key);\n        bytesArray.push(serializeLPString(nameWithLength));\n        const serializedValue = serializeCV(cv.data[key]);\n        bytesArray.push(serializedValue);\n    }\n    return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\nfunction serializeStringCV(cv, encoding) {\n    const bytesArray = [];\n    const str = encoding == 'ascii' ? asciiToBytes(cv.data) : utf8ToBytes(cv.data);\n    const len = new Uint8Array(4);\n    writeUInt32BE(len, str.length, 0);\n    bytesArray.push(len);\n    bytesArray.push(str);\n    return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\nfunction serializeStringAsciiCV(cv) {\n    return serializeStringCV(cv, 'ascii');\n}\nfunction serializeStringUtf8CV(cv) {\n    return serializeStringCV(cv, 'utf8');\n}\nexport function serializeCV(value) {\n    switch (value.type) {\n        case ClarityType.BoolTrue:\n        case ClarityType.BoolFalse:\n            return serializeBoolCV(value);\n        case ClarityType.OptionalNone:\n        case ClarityType.OptionalSome:\n            return serializeOptionalCV(value);\n        case ClarityType.Buffer:\n            return serializeBufferCV(value);\n        case ClarityType.UInt:\n            return serializeUIntCV(value);\n        case ClarityType.Int:\n            return serializeIntCV(value);\n        case ClarityType.PrincipalStandard:\n            return serializeStandardPrincipalCV(value);\n        case ClarityType.PrincipalContract:\n            return serializeContractPrincipalCV(value);\n        case ClarityType.ResponseOk:\n        case ClarityType.ResponseErr:\n            return serializeResponseCV(value);\n        case ClarityType.List:\n            return serializeListCV(value);\n        case ClarityType.Tuple:\n            return serializeTupleCV(value);\n        case ClarityType.StringASCII:\n            return serializeStringAsciiCV(value);\n        case ClarityType.StringUTF8:\n            return serializeStringUtf8CV(value);\n        default:\n            throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n    }\n}\n//# sourceMappingURL=serialize.js.map","import { intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../constants';\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff');\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff');\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728');\nconst intCV = (value) => {\n    const bigInt = intToBigInt(value, true);\n    if (bigInt > MAX_I128) {\n        throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n    }\n    else if (bigInt < MIN_I128) {\n        throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n    }\n    return { type: ClarityType.Int, value: bigInt };\n};\nconst uintCV = (value) => {\n    const bigInt = intToBigInt(value, false);\n    if (bigInt < MIN_U128) {\n        throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n    }\n    else if (bigInt > MAX_U128) {\n        throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n    }\n    return { type: ClarityType.UInt, value: bigInt };\n};\nexport { intCV, uintCV };\n//# sourceMappingURL=intCV.js.map","import { utf8ToBytes } from '@stacks/common';\nimport { ClarityType } from '../constants';\nconst bufferCV = (buffer) => {\n    if (buffer.byteLength > 1048576) {\n        throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n    }\n    return { type: ClarityType.Buffer, buffer };\n};\nconst bufferCVFromString = (str) => bufferCV(utf8ToBytes(str));\nexport { bufferCV, bufferCVFromString };\n//# sourceMappingURL=bufferCV.js.map","import { utf8ToBytes } from '@stacks/common';\nimport { addressToString } from '../../common';\nimport { createAddress, createLPString } from '../../postcondition-types';\nimport { ClarityType } from '../constants';\nfunction principalToString(principal) {\n    if (principal.type === ClarityType.PrincipalStandard) {\n        return addressToString(principal.address);\n    }\n    else if (principal.type === ClarityType.PrincipalContract) {\n        const address = addressToString(principal.address);\n        return `${address}.${principal.contractName.content}`;\n    }\n    else {\n        throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n    }\n}\nfunction principalCV(principal) {\n    if (principal.includes('.')) {\n        const [address, contractName] = principal.split('.');\n        return contractPrincipalCV(address, contractName);\n    }\n    else {\n        return standardPrincipalCV(principal);\n    }\n}\nfunction standardPrincipalCV(addressString) {\n    const addr = createAddress(addressString);\n    return { type: ClarityType.PrincipalStandard, address: addr };\n}\nfunction standardPrincipalCVFromAddress(address) {\n    return { type: ClarityType.PrincipalStandard, address };\n}\nfunction contractPrincipalCV(addressString, contractName) {\n    const addr = createAddress(addressString);\n    const lengthPrefixedContractName = createLPString(contractName);\n    return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\nfunction contractPrincipalCVFromAddress(address, contractName) {\n    if (utf8ToBytes(contractName.content).byteLength >= 128) {\n        throw new Error('Contract name must be less than 128 bytes');\n    }\n    return { type: ClarityType.PrincipalContract, address, contractName };\n}\nfunction contractPrincipalCVFromStandard(sp, contractName) {\n    const lengthPrefixedContractName = createLPString(contractName);\n    return {\n        type: ClarityType.PrincipalContract,\n        address: sp.address,\n        contractName: lengthPrefixedContractName,\n    };\n}\nexport { principalCV, principalToString, standardPrincipalCV, standardPrincipalCVFromAddress, contractPrincipalCV, contractPrincipalCVFromAddress, contractPrincipalCVFromStandard, };\n//# sourceMappingURL=principalCV.js.map","import { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\nfunction tupleCV(data) {\n    for (const key in data) {\n        if (!isClarityName(key)) {\n            throw new Error(`\"${key}\" is not a valid Clarity name`);\n        }\n    }\n    return { type: ClarityType.Tuple, data };\n}\nexport { tupleCV };\n//# sourceMappingURL=tupleCV.js.map","import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512_256 } from '@noble/hashes/sha512';\nimport { utils } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, concatBytes, utf8ToBytes, with0x } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash.clonedeep';\nimport { deserializeCV, serializeCV } from './clarity';\nexport { verify as verifySignature } from '@noble/secp256k1';\nexport const randomBytes = (bytesLength) => utils.randomBytes(bytesLength);\nexport const leftPadHex = (hexString) => hexString.length % 2 == 0 ? hexString : `0${hexString}`;\nexport const leftPadHexToLength = (hexString, length) => hexString.padStart(length, '0');\nexport const rightPadHexToLength = (hexString, length) => hexString.padEnd(length, '0');\nexport const exceedsMaxLengthBytes = (string, maxLengthBytes) => string ? utf8ToBytes(string).length > maxLengthBytes : false;\nexport function cloneDeep(obj) {\n    return lodashCloneDeep(obj);\n}\nexport function omit(obj, prop) {\n    const clone = cloneDeep(obj);\n    delete clone[prop];\n    return clone;\n}\nexport const hash160 = (input) => {\n    return ripemd160(sha256(input));\n};\nexport const txidFromData = (data) => {\n    return bytesToHex(sha512_256(data));\n};\nexport const txidFromBytes = txidFromData;\nexport const hashP2PKH = (input) => {\n    return bytesToHex(hash160(input));\n};\nexport const hashP2WPKH = (input) => {\n    const keyHash = hash160(input);\n    const redeemScript = concatBytes(new Uint8Array([0]), new Uint8Array([keyHash.length]), keyHash);\n    const redeemScriptHash = hash160(redeemScript);\n    return bytesToHex(redeemScriptHash);\n};\nexport const hashP2SH = (numSigs, pubKeys) => {\n    if (numSigs > 15 || pubKeys.length > 15) {\n        throw Error('P2SH multisig address can only contain up to 15 public keys');\n    }\n    const bytesArray = [];\n    bytesArray.push(80 + numSigs);\n    pubKeys.forEach(pubKey => {\n        bytesArray.push(pubKey.length);\n        bytesArray.push(pubKey);\n    });\n    bytesArray.push(80 + pubKeys.length);\n    bytesArray.push(174);\n    const redeemScript = concatArray(bytesArray);\n    const redeemScriptHash = hash160(redeemScript);\n    return bytesToHex(redeemScriptHash);\n};\nexport const hashP2WSH = (numSigs, pubKeys) => {\n    if (numSigs > 15 || pubKeys.length > 15) {\n        throw Error('P2WSH multisig address can only contain up to 15 public keys');\n    }\n    const scriptArray = [];\n    scriptArray.push(80 + numSigs);\n    pubKeys.forEach(pubKey => {\n        scriptArray.push(pubKey.length);\n        scriptArray.push(pubKey);\n    });\n    scriptArray.push(80 + pubKeys.length);\n    scriptArray.push(174);\n    const script = concatArray(scriptArray);\n    const digest = sha256(script);\n    const bytesArray = [];\n    bytesArray.push(0);\n    bytesArray.push(digest.length);\n    bytesArray.push(digest);\n    const redeemScript = concatArray(bytesArray);\n    const redeemScriptHash = hash160(redeemScript);\n    return bytesToHex(redeemScriptHash);\n};\nexport function isClarityName(name) {\n    const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n    return regex.test(name) && name.length < 128;\n}\nexport function cvToHex(cv) {\n    const serialized = serializeCV(cv);\n    return `0x${bytesToHex(serialized)}`;\n}\nexport function hexToCV(hex) {\n    return deserializeCV(hex);\n}\nexport const parseReadOnlyResponse = (response) => {\n    if (response.okay)\n        return hexToCV(response.result);\n    throw new Error(response.cause);\n};\nexport const validateStacksAddress = (stacksAddress) => {\n    try {\n        c32addressDecode(stacksAddress);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexport const validateTxId = (txid) => {\n    if (txid === 'success')\n        return true;\n    const value = with0x(txid).toLowerCase();\n    if (value.length !== 66)\n        return false;\n    return with0x(BigInt(value).toString(16).padStart(64, '0')) === value;\n};\n//# sourceMappingURL=utils.js.map","import { bytesToHex, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\nfunction createEnumChecker(enumVariable) {\n    const enumValues = Object.values(enumVariable).filter(v => typeof v === 'number');\n    const enumValueSet = new Set(enumValues);\n    return (value) => enumValueSet.has(value);\n}\nconst enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n    const checker = enumCheckFunctions.get(enumVariable);\n    if (checker !== undefined) {\n        return checker(value);\n    }\n    const newChecker = createEnumChecker(enumVariable);\n    enumCheckFunctions.set(enumVariable, newChecker);\n    return isEnum(enumVariable, value);\n}\nexport class BytesReader {\n    constructor(arr) {\n        this.consumed = 0;\n        this.source = arr;\n    }\n    readBytes(length) {\n        const view = this.source.subarray(this.consumed, this.consumed + length);\n        this.consumed += length;\n        return view;\n    }\n    readUInt32BE() {\n        return readUInt32BE(this.readBytes(4), 0);\n    }\n    readUInt8() {\n        return readUInt8(this.readBytes(1), 0);\n    }\n    readUInt16BE() {\n        return readUInt16BE(this.readBytes(2), 0);\n    }\n    readBigUIntLE(length) {\n        const bytes = this.readBytes(length).slice().reverse();\n        const hex = bytesToHex(bytes);\n        return BigInt(`0x${hex}`);\n    }\n    readBigUIntBE(length) {\n        const bytes = this.readBytes(length);\n        const hex = bytesToHex(bytes);\n        return BigInt(`0x${hex}`);\n    }\n    get readOffset() {\n        return this.consumed;\n    }\n    set readOffset(val) {\n        this.consumed = val;\n    }\n    get internalBytes() {\n        return this.source;\n    }\n    readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n        const num = this.readUInt8();\n        if (isEnum(enumVariable, num)) {\n            return num;\n        }\n        throw invalidEnumErrorFormatter(num);\n    }\n}\n//# sourceMappingURL=bytesReader.js.map","import { ClarityType } from '../constants';\nconst stringAsciiCV = (data) => {\n    return { type: ClarityType.StringASCII, data };\n};\nconst stringUtf8CV = (data) => {\n    return { type: ClarityType.StringUTF8, data };\n};\nconst stringCV = (data, encoding) => {\n    switch (encoding) {\n        case 'ascii':\n            return stringAsciiCV(data);\n        case 'utf8':\n            return stringUtf8CV(data);\n    }\n};\nexport { stringAsciiCV, stringUtf8CV, stringCV };\n//# sourceMappingURL=stringCV.js.map","import { ClarityType, intCV, uintCV, bufferCV, trueCV, falseCV, standardPrincipalCVFromAddress, contractPrincipalCVFromAddress, responseOkCV, responseErrorCV, noneCV, someCV, listCV, tupleCV, } from '.';\nimport { BytesReader as BytesReader } from '../bytesReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\nimport { bytesToAscii, bytesToUtf8, hexToBytes } from '@stacks/common';\nexport default function deserializeCV(serializedClarityValue) {\n    let bytesReader;\n    if (typeof serializedClarityValue === 'string') {\n        const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n        bytesReader = new BytesReader(hexToBytes(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue));\n    }\n    else if (serializedClarityValue instanceof Uint8Array) {\n        bytesReader = new BytesReader(serializedClarityValue);\n    }\n    else {\n        bytesReader = serializedClarityValue;\n    }\n    const type = bytesReader.readUInt8Enum(ClarityType, n => {\n        throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n    });\n    switch (type) {\n        case ClarityType.Int:\n            return intCV(bytesReader.readBytes(16));\n        case ClarityType.UInt:\n            return uintCV(bytesReader.readBytes(16));\n        case ClarityType.Buffer:\n            const bufferLength = bytesReader.readUInt32BE();\n            return bufferCV(bytesReader.readBytes(bufferLength));\n        case ClarityType.BoolTrue:\n            return trueCV();\n        case ClarityType.BoolFalse:\n            return falseCV();\n        case ClarityType.PrincipalStandard:\n            const sAddress = deserializeAddress(bytesReader);\n            return standardPrincipalCVFromAddress(sAddress);\n        case ClarityType.PrincipalContract:\n            const cAddress = deserializeAddress(bytesReader);\n            const contractName = deserializeLPString(bytesReader);\n            return contractPrincipalCVFromAddress(cAddress, contractName);\n        case ClarityType.ResponseOk:\n            return responseOkCV(deserializeCV(bytesReader));\n        case ClarityType.ResponseErr:\n            return responseErrorCV(deserializeCV(bytesReader));\n        case ClarityType.OptionalNone:\n            return noneCV();\n        case ClarityType.OptionalSome:\n            return someCV(deserializeCV(bytesReader));\n        case ClarityType.List:\n            const listLength = bytesReader.readUInt32BE();\n            const listContents = [];\n            for (let i = 0; i < listLength; i++) {\n                listContents.push(deserializeCV(bytesReader));\n            }\n            return listCV(listContents);\n        case ClarityType.Tuple:\n            const tupleLength = bytesReader.readUInt32BE();\n            const tupleContents = {};\n            for (let i = 0; i < tupleLength; i++) {\n                const clarityName = deserializeLPString(bytesReader).content;\n                if (clarityName === undefined) {\n                    throw new DeserializationError('\"content\" is undefined');\n                }\n                tupleContents[clarityName] = deserializeCV(bytesReader);\n            }\n            return tupleCV(tupleContents);\n        case ClarityType.StringASCII:\n            const asciiStrLen = bytesReader.readUInt32BE();\n            const asciiStr = bytesToAscii(bytesReader.readBytes(asciiStrLen));\n            return stringAsciiCV(asciiStr);\n        case ClarityType.StringUTF8:\n            const utf8StrLen = bytesReader.readUInt32BE();\n            const utf8Str = bytesToUtf8(bytesReader.readBytes(utf8StrLen));\n            return stringUtf8CV(utf8Str);\n        default:\n            throw new DeserializationError('Unable to deserialize Clarity Value from Uint8Array. Could not find valid Clarity Type.');\n    }\n}\n//# sourceMappingURL=deserialize.js.map","import { ClarityType } from '../constants';\nconst trueCV = () => ({ type: ClarityType.BoolTrue });\nconst falseCV = () => ({ type: ClarityType.BoolFalse });\nconst boolCV = (bool) => (bool ? trueCV() : falseCV());\nexport { boolCV, trueCV, falseCV };\n//# sourceMappingURL=booleanCV.js.map","import { ClarityType } from '../constants';\nfunction responseErrorCV(value) {\n    return { type: ClarityType.ResponseErr, value };\n}\nfunction responseOkCV(value) {\n    return { type: ClarityType.ResponseOk, value };\n}\nexport { responseErrorCV, responseOkCV };\n//# sourceMappingURL=responseCV.js.map","import { ClarityType } from '../constants';\nfunction listCV(values) {\n    return { type: ClarityType.List, list: values };\n}\nexport { listCV };\n//# sourceMappingURL=listCV.js.map","import { bytesToHex, concatArray, hexToBytes, intToBigInt, intToBytes, writeUInt16BE, } from '@stacks/common';\nimport { AddressHashMode, AuthType, PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType, } from './constants';\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport { serializeMessageSignature, deserializeMessageSignature, } from './signature';\nimport { addressFromPublicKeys, createEmptyAddress, createLPList, deserializeLPList, serializeLPList, } from './types';\nimport { createStacksPublicKey, getPublicKey, isCompressed, publicKeyFromSignatureVrs, signWithKey, } from './keys';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nexport function emptyMessageSignature() {\n    return {\n        type: StacksMessageType.MessageSignature,\n        data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n    };\n}\nexport function createSingleSigSpendingCondition(hashMode, pubKey, nonce, fee) {\n    const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n    const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n        ? PubKeyEncoding.Compressed\n        : PubKeyEncoding.Uncompressed;\n    return {\n        hashMode,\n        signer,\n        nonce: intToBigInt(nonce, false),\n        fee: intToBigInt(fee, false),\n        keyEncoding,\n        signature: emptyMessageSignature(),\n    };\n}\nexport function createMultiSigSpendingCondition(hashMode, numSigs, pubKeys, nonce, fee) {\n    const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n    const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n    return {\n        hashMode,\n        signer,\n        nonce: intToBigInt(nonce, false),\n        fee: intToBigInt(fee, false),\n        fields: [],\n        signaturesRequired: numSigs,\n    };\n}\nexport function isSingleSig(condition) {\n    return 'signature' in condition;\n}\nfunction clearCondition(condition) {\n    const cloned = cloneDeep(condition);\n    cloned.nonce = 0;\n    cloned.fee = 0;\n    if (isSingleSig(cloned)) {\n        cloned.signature = emptyMessageSignature();\n    }\n    else {\n        cloned.fields = [];\n    }\n    return {\n        ...cloned,\n        nonce: BigInt(0),\n        fee: BigInt(0),\n    };\n}\nexport function serializeSingleSigSpendingCondition(condition) {\n    const bytesArray = [\n        condition.hashMode,\n        hexToBytes(condition.signer),\n        intToBytes(condition.nonce, false, 8),\n        intToBytes(condition.fee, false, 8),\n        condition.keyEncoding,\n        serializeMessageSignature(condition.signature),\n    ];\n    return concatArray(bytesArray);\n}\nexport function serializeMultiSigSpendingCondition(condition) {\n    const bytesArray = [\n        condition.hashMode,\n        hexToBytes(condition.signer),\n        intToBytes(condition.nonce, false, 8),\n        intToBytes(condition.fee, false, 8),\n    ];\n    const fields = createLPList(condition.fields);\n    bytesArray.push(serializeLPList(fields));\n    const numSigs = new Uint8Array(2);\n    writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n    bytesArray.push(numSigs);\n    return concatArray(bytesArray);\n}\nexport function deserializeSingleSigSpendingCondition(hashMode, bytesReader) {\n    const signer = bytesToHex(bytesReader.readBytes(20));\n    const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n    const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n    const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n        throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n    });\n    if (hashMode === AddressHashMode.SerializeP2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n        throw new DeserializationError('Failed to parse singlesig spending condition: incomaptible hash mode and key encoding');\n    }\n    const signature = deserializeMessageSignature(bytesReader);\n    return {\n        hashMode,\n        signer,\n        nonce,\n        fee,\n        keyEncoding,\n        signature,\n    };\n}\nexport function deserializeMultiSigSpendingCondition(hashMode, bytesReader) {\n    const signer = bytesToHex(bytesReader.readBytes(20));\n    const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n    const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n    const fields = deserializeLPList(bytesReader, StacksMessageType.TransactionAuthField)\n        .values;\n    let haveUncompressed = false;\n    let numSigs = 0;\n    for (const field of fields) {\n        switch (field.contents.type) {\n            case StacksMessageType.PublicKey:\n                if (!isCompressed(field.contents))\n                    haveUncompressed = true;\n                break;\n            case StacksMessageType.MessageSignature:\n                if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed)\n                    haveUncompressed = true;\n                numSigs += 1;\n                if (numSigs === 65536)\n                    throw new VerificationError('Failed to parse multisig spending condition: too many signatures');\n                break;\n        }\n    }\n    const signaturesRequired = bytesReader.readUInt16BE();\n    if (haveUncompressed && hashMode === AddressHashMode.SerializeP2SH)\n        throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n    return {\n        hashMode,\n        signer,\n        nonce,\n        fee,\n        fields,\n        signaturesRequired,\n    };\n}\nexport function serializeSpendingCondition(condition) {\n    if (isSingleSig(condition)) {\n        return serializeSingleSigSpendingCondition(condition);\n    }\n    return serializeMultiSigSpendingCondition(condition);\n}\nexport function deserializeSpendingCondition(bytesReader) {\n    const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n        throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n    });\n    if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n        return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n    }\n    else {\n        return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n    }\n}\nexport function makeSigHashPreSign(curSigHash, authType, fee, nonce) {\n    const hashLength = 32 + 1 + 8 + 8;\n    const sigHash = curSigHash +\n        bytesToHex(new Uint8Array([authType])) +\n        bytesToHex(intToBytes(fee, false, 8)) +\n        bytesToHex(intToBytes(nonce, false, 8));\n    if (hexToBytes(sigHash).byteLength !== hashLength) {\n        throw Error('Invalid signature hash length');\n    }\n    return txidFromData(hexToBytes(sigHash));\n}\nfunction makeSigHashPostSign(curSigHash, pubKey, signature) {\n    const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n    const pubKeyEncoding = isCompressed(pubKey)\n        ? PubKeyEncoding.Compressed\n        : PubKeyEncoding.Uncompressed;\n    const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n    const sigHashBytes = hexToBytes(sigHash);\n    if (sigHashBytes.byteLength > hashLength) {\n        throw Error('Invalid signature hash length');\n    }\n    return txidFromData(sigHashBytes);\n}\nexport function nextSignature(curSigHash, authType, fee, nonce, privateKey) {\n    const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n    const signature = signWithKey(privateKey, sigHashPreSign);\n    const publicKey = getPublicKey(privateKey);\n    const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n    return {\n        nextSig: signature,\n        nextSigHash,\n    };\n}\nexport function nextVerification(initialSigHash, authType, fee, nonce, pubKeyEncoding, signature) {\n    const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n    const publicKey = createStacksPublicKey(publicKeyFromSignatureVrs(sigHashPreSign, signature, pubKeyEncoding));\n    const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n    return {\n        pubKey: publicKey,\n        nextSigHash,\n    };\n}\nfunction newInitialSigHash() {\n    const spendingCondition = createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '', 0, 0);\n    spendingCondition.signer = createEmptyAddress().hash160;\n    spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n    spendingCondition.signature = emptyMessageSignature();\n    return spendingCondition;\n}\nfunction verify(condition, initialSigHash, authType) {\n    if (isSingleSig(condition)) {\n        return verifySingleSig(condition, initialSigHash, authType);\n    }\n    else {\n        return verifyMultiSig(condition, initialSigHash, authType);\n    }\n}\nfunction verifySingleSig(condition, initialSigHash, authType) {\n    const { pubKey, nextSigHash } = nextVerification(initialSigHash, authType, condition.fee, condition.nonce, condition.keyEncoding, condition.signature);\n    const addrBytes = addressFromPublicKeys(0, condition.hashMode, 1, [pubKey]).hash160;\n    if (addrBytes !== condition.signer)\n        throw new VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);\n    return nextSigHash;\n}\nfunction verifyMultiSig(condition, initialSigHash, authType) {\n    const publicKeys = [];\n    let curSigHash = initialSigHash;\n    let haveUncompressed = false;\n    let numSigs = 0;\n    for (const field of condition.fields) {\n        let foundPubKey;\n        switch (field.contents.type) {\n            case StacksMessageType.PublicKey:\n                if (!isCompressed(field.contents))\n                    haveUncompressed = true;\n                foundPubKey = field.contents;\n                break;\n            case StacksMessageType.MessageSignature:\n                if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed)\n                    haveUncompressed = true;\n                const { pubKey, nextSigHash } = nextVerification(curSigHash, authType, condition.fee, condition.nonce, field.pubKeyEncoding, field.contents);\n                curSigHash = nextSigHash;\n                foundPubKey = pubKey;\n                numSigs += 1;\n                if (numSigs === 65536)\n                    throw new VerificationError('Too many signatures');\n                break;\n        }\n        publicKeys.push(foundPubKey);\n    }\n    if (numSigs !== condition.signaturesRequired)\n        throw new VerificationError('Incorrect number of signatures');\n    if (haveUncompressed && condition.hashMode === AddressHashMode.SerializeP2SH)\n        throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n    const addrBytes = addressFromPublicKeys(0, condition.hashMode, condition.signaturesRequired, publicKeys).hash160;\n    if (addrBytes !== condition.signer)\n        throw new VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);\n    return curSigHash;\n}\nexport function createStandardAuth(spendingCondition) {\n    return {\n        authType: AuthType.Standard,\n        spendingCondition,\n    };\n}\nexport function createSponsoredAuth(spendingCondition, sponsorSpendingCondition) {\n    return {\n        authType: AuthType.Sponsored,\n        spendingCondition,\n        sponsorSpendingCondition: sponsorSpendingCondition\n            ? sponsorSpendingCondition\n            : createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '0'.repeat(66), 0, 0),\n    };\n}\nexport function intoInitialSighashAuth(auth) {\n    if (auth.spendingCondition) {\n        switch (auth.authType) {\n            case AuthType.Standard:\n                return createStandardAuth(clearCondition(auth.spendingCondition));\n            case AuthType.Sponsored:\n                return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n            default:\n                throw new SigningError('Unexpected authorization type for signing');\n        }\n    }\n    throw new Error('Authorization missing SpendingCondition');\n}\nexport function verifyOrigin(auth, initialSigHash) {\n    switch (auth.authType) {\n        case AuthType.Standard:\n            return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n        case AuthType.Sponsored:\n            return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n        default:\n            throw new SigningError('Invalid origin auth type');\n    }\n}\nexport function setFee(auth, amount) {\n    switch (auth.authType) {\n        case AuthType.Standard:\n            const spendingCondition = {\n                ...auth.spendingCondition,\n                fee: intToBigInt(amount, false),\n            };\n            return { ...auth, spendingCondition };\n        case AuthType.Sponsored:\n            const sponsorSpendingCondition = {\n                ...auth.sponsorSpendingCondition,\n                fee: intToBigInt(amount, false),\n            };\n            return { ...auth, sponsorSpendingCondition };\n    }\n}\nexport function getFee(auth) {\n    switch (auth.authType) {\n        case AuthType.Standard:\n            return auth.spendingCondition.fee;\n        case AuthType.Sponsored:\n            return auth.sponsorSpendingCondition.fee;\n    }\n}\nexport function setNonce(auth, nonce) {\n    const spendingCondition = {\n        ...auth.spendingCondition,\n        nonce: intToBigInt(nonce, false),\n    };\n    return {\n        ...auth,\n        spendingCondition,\n    };\n}\nexport function setSponsorNonce(auth, nonce) {\n    const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        nonce: intToBigInt(nonce, false),\n    };\n    return {\n        ...auth,\n        sponsorSpendingCondition,\n    };\n}\nexport function setSponsor(auth, sponsorSpendingCondition) {\n    const sc = {\n        ...sponsorSpendingCondition,\n        nonce: intToBigInt(sponsorSpendingCondition.nonce, false),\n        fee: intToBigInt(sponsorSpendingCondition.fee, false),\n    };\n    return {\n        ...auth,\n        sponsorSpendingCondition: sc,\n    };\n}\nexport function serializeAuthorization(auth) {\n    const bytesArray = [];\n    bytesArray.push(auth.authType);\n    switch (auth.authType) {\n        case AuthType.Standard:\n            bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n            break;\n        case AuthType.Sponsored:\n            bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n            bytesArray.push(serializeSpendingCondition(auth.sponsorSpendingCondition));\n            break;\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializeAuthorization(bytesReader) {\n    const authType = bytesReader.readUInt8Enum(AuthType, n => {\n        throw new DeserializationError(`Could not parse ${n} as AuthType`);\n    });\n    let spendingCondition;\n    switch (authType) {\n        case AuthType.Standard:\n            spendingCondition = deserializeSpendingCondition(bytesReader);\n            return createStandardAuth(spendingCondition);\n        case AuthType.Sponsored:\n            spendingCondition = deserializeSpendingCondition(bytesReader);\n            const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n            return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n    }\n}\n//# sourceMappingURL=authorization.js.map","import { principalToString } from './types/principalCV';\nimport { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, bytesToHex, utf8ToBytes } from '@stacks/common';\nexport function cvToString(val, encoding = 'hex') {\n    switch (val.type) {\n        case ClarityType.BoolTrue:\n            return 'true';\n        case ClarityType.BoolFalse:\n            return 'false';\n        case ClarityType.Int:\n            return val.value.toString();\n        case ClarityType.UInt:\n            return `u${val.value.toString()}`;\n        case ClarityType.Buffer:\n            if (encoding === 'tryAscii') {\n                const str = bytesToAscii(val.buffer);\n                if (/[ -~]/.test(str)) {\n                    return JSON.stringify(str);\n                }\n            }\n            return `0x${bytesToHex(val.buffer)}`;\n        case ClarityType.OptionalNone:\n            return 'none';\n        case ClarityType.OptionalSome:\n            return `(some ${cvToString(val.value, encoding)})`;\n        case ClarityType.ResponseErr:\n            return `(err ${cvToString(val.value, encoding)})`;\n        case ClarityType.ResponseOk:\n            return `(ok ${cvToString(val.value, encoding)})`;\n        case ClarityType.PrincipalStandard:\n        case ClarityType.PrincipalContract:\n            return principalToString(val);\n        case ClarityType.List:\n            return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;\n        case ClarityType.Tuple:\n            return `(tuple ${Object.keys(val.data)\n                .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)\n                .join(' ')})`;\n        case ClarityType.StringASCII:\n            return `\"${val.data}\"`;\n        case ClarityType.StringUTF8:\n            return `u\"${val.data}\"`;\n    }\n}\nexport function cvToValue(val, strictJsonCompat = false) {\n    switch (val.type) {\n        case ClarityType.BoolTrue:\n            return true;\n        case ClarityType.BoolFalse:\n            return false;\n        case ClarityType.Int:\n        case ClarityType.UInt:\n            if (strictJsonCompat) {\n                return val.value.toString();\n            }\n            return val.value;\n        case ClarityType.Buffer:\n            return `0x${bytesToHex(val.buffer)}`;\n        case ClarityType.OptionalNone:\n            return null;\n        case ClarityType.OptionalSome:\n            return cvToJSON(val.value);\n        case ClarityType.ResponseErr:\n            return cvToJSON(val.value);\n        case ClarityType.ResponseOk:\n            return cvToJSON(val.value);\n        case ClarityType.PrincipalStandard:\n        case ClarityType.PrincipalContract:\n            return principalToString(val);\n        case ClarityType.List:\n            return val.list.map(v => cvToJSON(v));\n        case ClarityType.Tuple:\n            const result = {};\n            Object.keys(val.data).forEach(key => {\n                result[key] = cvToJSON(val.data[key]);\n            });\n            return result;\n        case ClarityType.StringASCII:\n            return val.data;\n        case ClarityType.StringUTF8:\n            return val.data;\n    }\n}\nexport function cvToJSON(val) {\n    switch (val.type) {\n        case ClarityType.ResponseErr:\n            return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };\n        case ClarityType.ResponseOk:\n            return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };\n        default:\n            return { type: getCVTypeString(val), value: cvToValue(val, true) };\n    }\n}\nexport function getCVTypeString(val) {\n    switch (val.type) {\n        case ClarityType.BoolTrue:\n        case ClarityType.BoolFalse:\n            return 'bool';\n        case ClarityType.Int:\n            return 'int';\n        case ClarityType.UInt:\n            return 'uint';\n        case ClarityType.Buffer:\n            return `(buff ${val.buffer.length})`;\n        case ClarityType.OptionalNone:\n            return '(optional none)';\n        case ClarityType.OptionalSome:\n            return `(optional ${getCVTypeString(val.value)})`;\n        case ClarityType.ResponseErr:\n            return `(response UnknownType ${getCVTypeString(val.value)})`;\n        case ClarityType.ResponseOk:\n            return `(response ${getCVTypeString(val.value)} UnknownType)`;\n        case ClarityType.PrincipalStandard:\n        case ClarityType.PrincipalContract:\n            return 'principal';\n        case ClarityType.List:\n            return `(list ${val.list.length} ${val.list.length ? getCVTypeString(val.list[0]) : 'UnknownType'})`;\n        case ClarityType.Tuple:\n            return `(tuple ${Object.keys(val.data)\n                .map(key => `(${key} ${getCVTypeString(val.data[key])})`)\n                .join(' ')})`;\n        case ClarityType.StringASCII:\n            return `(string-ascii ${asciiToBytes(val.data).length})`;\n        case ClarityType.StringUTF8:\n            return `(string-utf8 ${utf8ToBytes(val.data).length})`;\n    }\n}\nexport function isClarityType(input, withType) {\n    return input.type === withType;\n}\n//# sourceMappingURL=clarityValue.js.map","import { cloneDeep } from './utils';\nimport { uintCV, intCV, contractPrincipalCV, standardPrincipalCV, noneCV, bufferCV, falseCV, trueCV, ClarityType, getCVTypeString, bufferCVFromString, } from './clarity';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\nimport { utf8ToBytes } from '@stacks/common';\nexport var ClarityAbiTypeId;\n(function (ClarityAbiTypeId) {\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeUInt128\"] = 1] = \"ClarityAbiTypeUInt128\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeInt128\"] = 2] = \"ClarityAbiTypeInt128\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeBool\"] = 3] = \"ClarityAbiTypeBool\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypePrincipal\"] = 4] = \"ClarityAbiTypePrincipal\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeNone\"] = 5] = \"ClarityAbiTypeNone\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeBuffer\"] = 6] = \"ClarityAbiTypeBuffer\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeResponse\"] = 7] = \"ClarityAbiTypeResponse\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeOptional\"] = 8] = \"ClarityAbiTypeOptional\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeTuple\"] = 9] = \"ClarityAbiTypeTuple\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeList\"] = 10] = \"ClarityAbiTypeList\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeStringAscii\"] = 11] = \"ClarityAbiTypeStringAscii\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeStringUtf8\"] = 12] = \"ClarityAbiTypeStringUtf8\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeTraitReference\"] = 13] = \"ClarityAbiTypeTraitReference\";\n})(ClarityAbiTypeId || (ClarityAbiTypeId = {}));\nexport const isClarityAbiPrimitive = (val) => typeof val === 'string';\nexport const isClarityAbiBuffer = (val) => val.buffer !== undefined;\nexport const isClarityAbiStringAscii = (val) => val['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val) => val['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val) => val.response !== undefined;\nexport const isClarityAbiOptional = (val) => val.optional !== undefined;\nexport const isClarityAbiTuple = (val) => val.tuple !== undefined;\nexport const isClarityAbiList = (val) => val.list !== undefined;\nexport function getTypeUnion(val) {\n    if (isClarityAbiPrimitive(val)) {\n        if (val === 'uint128') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n        }\n        else if (val === 'int128') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n        }\n        else if (val === 'bool') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n        }\n        else if (val === 'principal') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n        }\n        else if (val === 'trait_reference') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n        }\n        else if (val === 'none') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n        }\n        else {\n            throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n        }\n    }\n    else if (isClarityAbiBuffer(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n    }\n    else if (isClarityAbiResponse(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n    }\n    else if (isClarityAbiOptional(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n    }\n    else if (isClarityAbiTuple(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n    }\n    else if (isClarityAbiList(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n    }\n    else if (isClarityAbiStringAscii(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n    }\n    else if (isClarityAbiStringUtf8(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n    }\n    else {\n        throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n    }\n}\nfunction encodeClarityValue(input, val) {\n    let union;\n    if (input.id !== undefined) {\n        union = input;\n    }\n    else {\n        union = getTypeUnion(input);\n    }\n    switch (union.id) {\n        case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n            return uintCV(val);\n        case ClarityAbiTypeId.ClarityAbiTypeInt128:\n            return intCV(val);\n        case ClarityAbiTypeId.ClarityAbiTypeBool:\n            if (val === 'false' || val === '0')\n                return falseCV();\n            else if (val === 'true' || val === '1')\n                return trueCV();\n            else\n                throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(val)}`);\n        case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n            if (val.includes('.')) {\n                const [addr, name] = val.split('.');\n                return contractPrincipalCV(addr, name);\n            }\n            else {\n                return standardPrincipalCV(val);\n            }\n        case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n            const [addr, name] = val.split('.');\n            return contractPrincipalCV(addr, name);\n        case ClarityAbiTypeId.ClarityAbiTypeNone:\n            return noneCV();\n        case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n            return bufferCV(utf8ToBytes(val));\n        case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n            return stringAsciiCV(val);\n        case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n            return stringUtf8CV(val);\n        case ClarityAbiTypeId.ClarityAbiTypeResponse:\n            throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n        case ClarityAbiTypeId.ClarityAbiTypeOptional:\n            throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n        case ClarityAbiTypeId.ClarityAbiTypeTuple:\n            throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n        case ClarityAbiTypeId.ClarityAbiTypeList:\n            throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n        default:\n            throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n    }\n}\nexport { encodeClarityValue };\nexport function getTypeString(val) {\n    if (isClarityAbiPrimitive(val)) {\n        if (val === 'int128') {\n            return 'int';\n        }\n        else if (val === 'uint128') {\n            return 'uint';\n        }\n        return val;\n    }\n    else if (isClarityAbiBuffer(val)) {\n        return `(buff ${val.buffer.length})`;\n    }\n    else if (isClarityAbiStringAscii(val)) {\n        return `(string-ascii ${val['string-ascii'].length})`;\n    }\n    else if (isClarityAbiStringUtf8(val)) {\n        return `(string-utf8 ${val['string-utf8'].length})`;\n    }\n    else if (isClarityAbiResponse(val)) {\n        return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n    }\n    else if (isClarityAbiOptional(val)) {\n        return `(optional ${getTypeString(val.optional)})`;\n    }\n    else if (isClarityAbiTuple(val)) {\n        return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n    }\n    else if (isClarityAbiList(val)) {\n        return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n    }\n    else {\n        throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n    }\n}\nexport function abiFunctionToString(func) {\n    const access = func.access === 'read_only' ? 'read-only' : func.access;\n    return `(define-${access} (${func.name} ${func.args\n        .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n        .join(' ')}))`;\n}\nfunction matchType(cv, abiType) {\n    const union = getTypeUnion(abiType);\n    switch (cv.type) {\n        case ClarityType.BoolTrue:\n        case ClarityType.BoolFalse:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n        case ClarityType.Int:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n        case ClarityType.UInt:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n        case ClarityType.Buffer:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n                union.type.buffer.length >= cv.buffer.length);\n        case ClarityType.StringASCII:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n                union.type['string-ascii'].length >= cv.data.length);\n        case ClarityType.StringUTF8:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n                union.type['string-utf8'].length >= cv.data.length);\n        case ClarityType.OptionalNone:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n                union.id === ClarityAbiTypeId.ClarityAbiTypeOptional);\n        case ClarityType.OptionalSome:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n                matchType(cv.value, union.type.optional));\n        case ClarityType.ResponseErr:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n                matchType(cv.value, union.type.response.error));\n        case ClarityType.ResponseOk:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n                matchType(cv.value, union.type.response.ok));\n        case ClarityType.PrincipalContract:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n                union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference);\n        case ClarityType.PrincipalStandard:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n        case ClarityType.List:\n            return (union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n                union.type.list.length >= cv.list.length &&\n                cv.list.every(val => matchType(val, union.type.list.type)));\n        case ClarityType.Tuple:\n            if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n                const tuple = cloneDeep(cv.data);\n                for (let i = 0; i < union.type.tuple.length; i++) {\n                    const abiTupleEntry = union.type.tuple[i];\n                    const key = abiTupleEntry.name;\n                    const val = tuple[key];\n                    if (val) {\n                        if (!matchType(val, abiTupleEntry.type)) {\n                            return false;\n                        }\n                        delete tuple[key];\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                return false;\n            }\n        default:\n            return false;\n    }\n}\nexport function validateContractCall(payload, abi) {\n    const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n    if (filtered.length === 1) {\n        const abiFunc = filtered[0];\n        const abiArgs = abiFunc.args;\n        if (payload.functionArgs.length !== abiArgs.length) {\n            throw new Error(`Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`);\n        }\n        for (let i = 0; i < payload.functionArgs.length; i++) {\n            const payloadArg = payload.functionArgs[i];\n            const abiArg = abiArgs[i];\n            if (!matchType(payloadArg, abiArg.type)) {\n                const argNum = i + 1;\n                throw new Error(`Clarity function \\`${payload.functionName.content}\\` expects argument ${argNum} to be of type ${getTypeString(abiArg.type)}, not ${getCVTypeString(payloadArg)}`);\n            }\n        }\n        return true;\n    }\n    else if (filtered.length === 0) {\n        throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n    }\n    else {\n        throw new Error(`Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`);\n    }\n}\nexport function parseToCV(input, type) {\n    const typeString = getTypeString(type);\n    if (isClarityAbiPrimitive(type)) {\n        if (type === 'uint128') {\n            return uintCV(input);\n        }\n        else if (type === 'int128') {\n            return intCV(input);\n        }\n        else if (type === 'bool') {\n            if (input.toLowerCase() === 'true') {\n                return trueCV();\n            }\n            else if (input.toLowerCase() === 'false') {\n                return falseCV();\n            }\n            else {\n                throw new Error(`Invalid bool value: ${input}`);\n            }\n        }\n        else if (type === 'principal') {\n            if (input.includes('.')) {\n                const [address, contractName] = input.split('.');\n                return contractPrincipalCV(address, contractName);\n            }\n            else {\n                return standardPrincipalCV(input);\n            }\n        }\n        else {\n            throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n        }\n    }\n    else if (isClarityAbiBuffer(type)) {\n        const inputLength = utf8ToBytes(input).byteLength;\n        if (inputLength > type.buffer.length) {\n            throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n        }\n        return bufferCVFromString(input);\n    }\n    else if (isClarityAbiResponse(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else if (isClarityAbiOptional(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else if (isClarityAbiTuple(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else if (isClarityAbiList(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n}\n//# sourceMappingURL=contract-abi.js.map","import { isSingleSig, nextVerification } from './authorization';\nimport { cloneDeep } from './utils';\nimport { AuthType, PubKeyEncoding, StacksMessageType } from './constants';\nimport { SigningError } from './errors';\nexport class TransactionSigner {\n    constructor(transaction) {\n        this.transaction = transaction;\n        this.sigHash = transaction.signBegin();\n        this.originDone = false;\n        this.checkOversign = true;\n        this.checkOverlap = true;\n        const spendingCondition = transaction.auth.spendingCondition;\n        if (spendingCondition && !isSingleSig(spendingCondition)) {\n            if (spendingCondition.fields.filter(field => field.contents.type === StacksMessageType.MessageSignature).length >= spendingCondition.signaturesRequired) {\n                throw new Error('SpendingCondition has more signatures than are expected');\n            }\n            spendingCondition.fields.forEach(field => {\n                if (field.contents.type === StacksMessageType.MessageSignature) {\n                    const signature = field.contents;\n                    const nextVerify = nextVerification(this.sigHash, transaction.auth.authType, spendingCondition.fee, spendingCondition.nonce, PubKeyEncoding.Compressed, signature);\n                    this.sigHash = nextVerify.nextSigHash;\n                }\n            });\n        }\n    }\n    static createSponsorSigner(transaction, spendingCondition) {\n        if (transaction.auth.authType != AuthType.Sponsored) {\n            throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n        }\n        const tx = cloneDeep(transaction);\n        tx.setSponsor(spendingCondition);\n        const originSigHash = tx.verifyOrigin();\n        const signer = new this(tx);\n        signer.originDone = true;\n        signer.sigHash = originSigHash;\n        signer.checkOversign = true;\n        signer.checkOverlap = true;\n        return signer;\n    }\n    signOrigin(privateKey) {\n        if (this.checkOverlap && this.originDone) {\n            throw new SigningError('Cannot sign origin after sponsor key');\n        }\n        if (this.transaction.auth === undefined) {\n            throw new SigningError('\"transaction.auth\" is undefined');\n        }\n        if (this.transaction.auth.spendingCondition === undefined) {\n            throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n        }\n        if (!isSingleSig(this.transaction.auth.spendingCondition)) {\n            const spendingCondition = this.transaction.auth.spendingCondition;\n            if (this.checkOversign &&\n                spendingCondition.fields.filter(field => field.contents.type === StacksMessageType.MessageSignature).length >= spendingCondition.signaturesRequired) {\n                throw new Error('Origin would have too many signatures');\n            }\n        }\n        const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n        this.sigHash = nextSighash;\n    }\n    appendOrigin(publicKey) {\n        if (this.checkOverlap && this.originDone) {\n            throw Error('Cannot append public key to origin after sponsor key');\n        }\n        if (this.transaction.auth === undefined) {\n            throw new Error('\"transaction.auth\" is undefined');\n        }\n        if (this.transaction.auth.spendingCondition === undefined) {\n            throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n        }\n        this.transaction.appendPubkey(publicKey);\n    }\n    signSponsor(privateKey) {\n        if (this.transaction.auth === undefined) {\n            throw new SigningError('\"transaction.auth\" is undefined');\n        }\n        if (this.transaction.auth.authType !== AuthType.Sponsored) {\n            throw new SigningError('\"transaction.auth.authType\" is not AuthType.Sponsored');\n        }\n        const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n        this.sigHash = nextSighash;\n        this.originDone = true;\n    }\n    getTxInComplete() {\n        return cloneDeep(this.transaction);\n    }\n    resume(transaction) {\n        this.transaction = cloneDeep(transaction);\n        this.sigHash = transaction.signBegin();\n    }\n}\n//# sourceMappingURL=signer.js.map","import { bytesToHex, concatArray, hexToBytes, intToBigInt, writeUInt32BE, } from '@stacks/common';\nimport { deserializeAuthorization, intoInitialSighashAuth, isSingleSig, nextSignature, serializeAuthorization, setFee, setNonce, setSponsor, setSponsorNonce, verifyOrigin, } from './authorization';\nimport { BytesReader } from './bytesReader';\nimport { AnchorMode, anchorModeFromNameOrValue, AuthType, DEFAULT_CHAIN_ID, PayloadType, PostConditionMode, PubKeyEncoding, StacksMessageType, TransactionVersion, } from './constants';\nimport { SerializationError, SigningError } from './errors';\nimport { isCompressed } from './keys';\nimport { deserializePayload, serializePayload } from './payload';\nimport { createTransactionAuthField } from './signature';\nimport { createLPList, deserializeLPList, serializeLPList } from './types';\nimport { cloneDeep, txidFromData } from './utils';\nexport class StacksTransaction {\n    constructor(version, auth, payload, postConditions, postConditionMode, anchorMode, chainId) {\n        this.version = version;\n        this.auth = auth;\n        if ('amount' in payload) {\n            this.payload = {\n                ...payload,\n                amount: intToBigInt(payload.amount, false),\n            };\n        }\n        else {\n            this.payload = payload;\n        }\n        this.chainId = chainId ?? DEFAULT_CHAIN_ID;\n        this.postConditionMode = postConditionMode ?? PostConditionMode.Deny;\n        this.postConditions = postConditions ?? createLPList([]);\n        if (anchorMode) {\n            this.anchorMode = anchorModeFromNameOrValue(anchorMode);\n        }\n        else {\n            switch (payload.payloadType) {\n                case PayloadType.Coinbase:\n                case PayloadType.CoinbaseToAltRecipient:\n                case PayloadType.NakamotoCoinbase:\n                case PayloadType.PoisonMicroblock:\n                case PayloadType.TenureChange:\n                    this.anchorMode = AnchorMode.OnChainOnly;\n                    break;\n                case PayloadType.ContractCall:\n                case PayloadType.SmartContract:\n                case PayloadType.VersionedSmartContract:\n                case PayloadType.TokenTransfer:\n                    this.anchorMode = AnchorMode.Any;\n                    break;\n            }\n        }\n    }\n    signBegin() {\n        const tx = cloneDeep(this);\n        tx.auth = intoInitialSighashAuth(tx.auth);\n        return tx.txid();\n    }\n    verifyBegin() {\n        const tx = cloneDeep(this);\n        tx.auth = intoInitialSighashAuth(tx.auth);\n        return tx.txid();\n    }\n    verifyOrigin() {\n        return verifyOrigin(this.auth, this.verifyBegin());\n    }\n    signNextOrigin(sigHash, privateKey) {\n        if (this.auth.spendingCondition === undefined) {\n            throw new Error('\"auth.spendingCondition\" is undefined');\n        }\n        if (this.auth.authType === undefined) {\n            throw new Error('\"auth.authType\" is undefined');\n        }\n        return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n    }\n    signNextSponsor(sigHash, privateKey) {\n        if (this.auth.authType === AuthType.Sponsored) {\n            return this.signAndAppend(this.auth.sponsorSpendingCondition, sigHash, AuthType.Sponsored, privateKey);\n        }\n        else {\n            throw new Error('\"auth.sponsorSpendingCondition\" is undefined');\n        }\n    }\n    appendPubkey(publicKey) {\n        const cond = this.auth.spendingCondition;\n        if (cond && !isSingleSig(cond)) {\n            const compressed = isCompressed(publicKey);\n            cond.fields.push(createTransactionAuthField(compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed, publicKey));\n        }\n        else {\n            throw new Error(`Can't append public key to a singlesig condition`);\n        }\n    }\n    signAndAppend(condition, curSigHash, authType, privateKey) {\n        const { nextSig, nextSigHash } = nextSignature(curSigHash, authType, condition.fee, condition.nonce, privateKey);\n        if (isSingleSig(condition)) {\n            condition.signature = nextSig;\n        }\n        else {\n            const compressed = bytesToHex(privateKey.data).endsWith('01');\n            condition.fields.push(createTransactionAuthField(compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed, nextSig));\n        }\n        return nextSigHash;\n    }\n    txid() {\n        const serialized = this.serialize();\n        return txidFromData(serialized);\n    }\n    setSponsor(sponsorSpendingCondition) {\n        if (this.auth.authType != AuthType.Sponsored) {\n            throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n        }\n        this.auth = setSponsor(this.auth, sponsorSpendingCondition);\n    }\n    setFee(amount) {\n        this.auth = setFee(this.auth, amount);\n    }\n    setNonce(nonce) {\n        this.auth = setNonce(this.auth, nonce);\n    }\n    setSponsorNonce(nonce) {\n        if (this.auth.authType != AuthType.Sponsored) {\n            throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n        }\n        this.auth = setSponsorNonce(this.auth, nonce);\n    }\n    serialize() {\n        if (this.version === undefined) {\n            throw new SerializationError('\"version\" is undefined');\n        }\n        if (this.chainId === undefined) {\n            throw new SerializationError('\"chainId\" is undefined');\n        }\n        if (this.auth === undefined) {\n            throw new SerializationError('\"auth\" is undefined');\n        }\n        if (this.anchorMode === undefined) {\n            throw new SerializationError('\"anchorMode\" is undefined');\n        }\n        if (this.payload === undefined) {\n            throw new SerializationError('\"payload\" is undefined');\n        }\n        const bytesArray = [];\n        bytesArray.push(this.version);\n        const chainIdBytes = new Uint8Array(4);\n        writeUInt32BE(chainIdBytes, this.chainId, 0);\n        bytesArray.push(chainIdBytes);\n        bytesArray.push(serializeAuthorization(this.auth));\n        bytesArray.push(this.anchorMode);\n        bytesArray.push(this.postConditionMode);\n        bytesArray.push(serializeLPList(this.postConditions));\n        bytesArray.push(serializePayload(this.payload));\n        return concatArray(bytesArray);\n    }\n}\nexport function deserializeTransaction(tx) {\n    let bytesReader;\n    if (typeof tx === 'string') {\n        if (tx.slice(0, 2).toLowerCase() === '0x') {\n            bytesReader = new BytesReader(hexToBytes(tx.slice(2)));\n        }\n        else {\n            bytesReader = new BytesReader(hexToBytes(tx));\n        }\n    }\n    else if (tx instanceof Uint8Array) {\n        bytesReader = new BytesReader(tx);\n    }\n    else {\n        bytesReader = tx;\n    }\n    const version = bytesReader.readUInt8Enum(TransactionVersion, n => {\n        throw new Error(`Could not parse ${n} as TransactionVersion`);\n    });\n    const chainId = bytesReader.readUInt32BE();\n    const auth = deserializeAuthorization(bytesReader);\n    const anchorMode = bytesReader.readUInt8Enum(AnchorMode, n => {\n        throw new Error(`Could not parse ${n} as AnchorMode`);\n    });\n    const postConditionMode = bytesReader.readUInt8Enum(PostConditionMode, n => {\n        throw new Error(`Could not parse ${n} as PostConditionMode`);\n    });\n    const postConditions = deserializeLPList(bytesReader, StacksMessageType.PostCondition);\n    const payload = deserializePayload(bytesReader);\n    return new StacksTransaction(version, auth, payload, postConditions, postConditionMode, anchorMode, chainId);\n}\n//# sourceMappingURL=transaction.js.map","import { bytesToHex, hexToBytes, intToBigInt } from '@stacks/common';\nimport { StacksNetwork, StacksMainnet, StacksTestnet, createFetchFn, } from '@stacks/network';\nimport { c32address } from 'c32check';\nimport { createMultiSigSpendingCondition, createSingleSigSpendingCondition, createSponsoredAuth, createStandardAuth, } from './authorization';\nimport { deserializeCV, serializeCV } from './clarity';\nimport { AddressHashMode, AddressVersion, PayloadType, PostConditionMode, TransactionVersion, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType, ClarityVersion, } from './constants';\nimport { validateContractCall } from './contract-abi';\nimport { NoEstimateAvailableError } from './errors';\nimport { createStacksPrivateKey, getPublicKey, pubKeyfromPrivKey, publicKeyFromBytes, publicKeyToAddress, publicKeyToString, } from './keys';\nimport { createContractCallPayload, createSmartContractPayload, createTokenTransferPayload, serializePayload, } from './payload';\nimport { createFungiblePostCondition, createNonFungiblePostCondition, createSTXPostCondition, } from './postcondition';\nimport { createContractPrincipal, createStandardPrincipal, } from './postcondition-types';\nimport { TransactionSigner } from './signer';\nimport { StacksTransaction } from './transaction';\nimport { createLPList } from './types';\nimport { cvToHex, omit, parseReadOnlyResponse, validateTxId } from './utils';\nexport async function getNonce(address, network) {\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n    const url = derivedNetwork.getAccountApiUrl(address);\n    const response = await derivedNetwork.fetchFn(url);\n    if (!response.ok) {\n        let msg = '';\n        try {\n            msg = await response.text();\n        }\n        catch (error) { }\n        throw new Error(`Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const responseText = await response.text();\n    const result = JSON.parse(responseText);\n    return BigInt(result.nonce);\n}\nexport async function estimateTransfer(transaction, network) {\n    if (transaction.payload.payloadType !== PayloadType.TokenTransfer) {\n        throw new Error(`Transaction fee estimation only possible with ${PayloadType[PayloadType.TokenTransfer]} transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`);\n    }\n    return estimateTransferUnsafe(transaction, network);\n}\nexport async function estimateTransferUnsafe(transaction, network) {\n    const requestHeaders = {\n        Accept: 'application/text',\n    };\n    const fetchOptions = {\n        method: 'GET',\n        headers: requestHeaders,\n    };\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n    const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n    const response = await derivedNetwork.fetchFn(url, fetchOptions);\n    if (!response.ok) {\n        let msg = '';\n        try {\n            msg = await response.text();\n        }\n        catch (error) { }\n        throw new Error(`Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const feeRateResult = await response.text();\n    const txBytes = BigInt(transaction.serialize().byteLength);\n    const feeRate = BigInt(feeRateResult);\n    return feeRate * txBytes;\n}\nexport async function estimateTransaction(transactionPayload, estimatedLen, network) {\n    const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            transaction_payload: bytesToHex(serializePayload(transactionPayload)),\n            ...(estimatedLen ? { estimated_len: estimatedLen } : {}),\n        }),\n    };\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? new StacksMainnet());\n    const url = derivedNetwork.getTransactionFeeEstimateApiUrl();\n    const response = await derivedNetwork.fetchFn(url, options);\n    if (!response.ok) {\n        const body = await response.text().then(str => {\n            try {\n                return JSON.parse(str);\n            }\n            catch (error) {\n                return str;\n            }\n        });\n        if (body?.reason === 'NoEstimateAvailable' ||\n            (typeof body === 'string' && body.includes('NoEstimateAvailable'))) {\n            throw new NoEstimateAvailableError(body?.reason_data?.message ?? '');\n        }\n        throw new Error(`Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${body}\"`);\n    }\n    const data = await response.json();\n    return data.estimations;\n}\nexport async function broadcastTransaction(transaction, network, attachment) {\n    const rawTx = transaction.serialize();\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n    const url = derivedNetwork.getBroadcastApiUrl();\n    return broadcastRawTransaction(rawTx, url, attachment, derivedNetwork.fetchFn);\n}\nexport async function broadcastRawTransaction(rawTx, url, attachment, fetchFn = createFetchFn()) {\n    const options = {\n        method: 'POST',\n        headers: { 'Content-Type': attachment ? 'application/json' : 'application/octet-stream' },\n        body: attachment\n            ? JSON.stringify({\n                tx: bytesToHex(rawTx),\n                attachment: bytesToHex(attachment),\n            })\n            : rawTx,\n    };\n    const response = await fetchFn(url, options);\n    if (!response.ok) {\n        try {\n            return (await response.json());\n        }\n        catch (e) {\n            throw Error(`Failed to broadcast transaction: ${e.message}`);\n        }\n    }\n    const text = await response.text();\n    const txid = text.replace(/[\"]+/g, '');\n    if (!validateTxId(txid))\n        throw new Error(text);\n    return { txid };\n}\nexport async function getAbi(address, contractName, network) {\n    const options = {\n        method: 'GET',\n    };\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network);\n    const url = derivedNetwork.getAbiApiUrl(address, contractName);\n    const response = await derivedNetwork.fetchFn(url, options);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error fetching contract ABI for contract \"${contractName}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    return JSON.parse(await response.text());\n}\nfunction deriveNetwork(transaction) {\n    switch (transaction.version) {\n        case TransactionVersion.Mainnet:\n            return new StacksMainnet();\n        case TransactionVersion.Testnet:\n            return new StacksTestnet();\n    }\n}\nexport async function makeUnsignedSTXTokenTransfer(txOptions) {\n    const defaultOptions = {\n        fee: BigInt(0),\n        nonce: BigInt(0),\n        network: new StacksMainnet(),\n        memo: '',\n        sponsored: false,\n    };\n    const options = Object.assign(defaultOptions, txOptions);\n    const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n    let authorization = null;\n    let spendingCondition = null;\n    if ('publicKey' in options) {\n        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, options.publicKey, options.nonce, options.fee);\n    }\n    else {\n        spendingCondition = createMultiSigSpendingCondition(AddressHashMode.SerializeP2SH, options.numSignatures, options.publicKeys, options.nonce, options.fee);\n    }\n    if (options.sponsored) {\n        authorization = createSponsoredAuth(spendingCondition);\n    }\n    else {\n        authorization = createStandardAuth(spendingCondition);\n    }\n    const network = StacksNetwork.fromNameOrNetwork(options.network);\n    const transaction = new StacksTransaction(network.version, authorization, payload, undefined, undefined, options.anchorMode, network.chainId);\n    if (txOptions.fee === undefined || txOptions.fee === null) {\n        const fee = await estimateTransactionFeeWithFallback(transaction, network);\n        transaction.setFee(fee);\n    }\n    if (txOptions.nonce === undefined || txOptions.nonce === null) {\n        const addressVersion = options.network.version === TransactionVersion.Mainnet\n            ? AddressVersion.MainnetSingleSig\n            : AddressVersion.TestnetSingleSig;\n        const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition.signer);\n        const txNonce = await getNonce(senderAddress, options.network);\n        transaction.setNonce(txNonce);\n    }\n    return transaction;\n}\nexport async function makeSTXTokenTransfer(txOptions) {\n    if ('senderKey' in txOptions) {\n        const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n        const options = omit(txOptions, 'senderKey');\n        const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n        const privKey = createStacksPrivateKey(txOptions.senderKey);\n        const signer = new TransactionSigner(transaction);\n        signer.signOrigin(privKey);\n        return transaction;\n    }\n    else {\n        const options = omit(txOptions, 'signerKeys');\n        const transaction = await makeUnsignedSTXTokenTransfer(options);\n        const signer = new TransactionSigner(transaction);\n        let pubKeys = txOptions.publicKeys;\n        for (const key of txOptions.signerKeys) {\n            const pubKey = pubKeyfromPrivKey(key);\n            pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n            signer.signOrigin(createStacksPrivateKey(key));\n        }\n        for (const key of pubKeys) {\n            signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n        }\n        return transaction;\n    }\n}\nexport async function estimateContractDeploy(transaction, network) {\n    if (transaction.payload.payloadType !== PayloadType.SmartContract &&\n        transaction.payload.payloadType !== PayloadType.VersionedSmartContract) {\n        throw new Error(`Contract deploy fee estimation only possible with ${PayloadType[PayloadType.SmartContract]} transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`);\n    }\n    const requestHeaders = {\n        Accept: 'application/text',\n    };\n    const fetchOptions = {\n        method: 'GET',\n        headers: requestHeaders,\n    };\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n    const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n    const response = await derivedNetwork.fetchFn(url, fetchOptions);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error estimating contract deploy fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const feeRateResult = await response.text();\n    const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n    const feeRate = intToBigInt(feeRateResult, false);\n    return feeRate * txBytes;\n}\nexport async function makeContractDeploy(txOptions) {\n    if ('senderKey' in txOptions) {\n        const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n        const options = omit(txOptions, 'senderKey');\n        const transaction = await makeUnsignedContractDeploy({ publicKey, ...options });\n        const privKey = createStacksPrivateKey(txOptions.senderKey);\n        const signer = new TransactionSigner(transaction);\n        signer.signOrigin(privKey);\n        return transaction;\n    }\n    else {\n        const options = omit(txOptions, 'signerKeys');\n        const transaction = await makeUnsignedContractDeploy(options);\n        const signer = new TransactionSigner(transaction);\n        let pubKeys = txOptions.publicKeys;\n        for (const key of txOptions.signerKeys) {\n            const pubKey = pubKeyfromPrivKey(key);\n            pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n            signer.signOrigin(createStacksPrivateKey(key));\n        }\n        for (const key of pubKeys) {\n            signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n        }\n        return transaction;\n    }\n}\nexport async function makeUnsignedContractDeploy(txOptions) {\n    const defaultOptions = {\n        fee: BigInt(0),\n        nonce: BigInt(0),\n        network: new StacksMainnet(),\n        postConditionMode: PostConditionMode.Deny,\n        sponsored: false,\n        clarityVersion: ClarityVersion.Clarity2,\n    };\n    const options = Object.assign(defaultOptions, txOptions);\n    const payload = createSmartContractPayload(options.contractName, options.codeBody, options.clarityVersion);\n    let authorization = null;\n    let spendingCondition = null;\n    if ('publicKey' in options) {\n        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, options.publicKey, options.nonce, options.fee);\n    }\n    else {\n        spendingCondition = createMultiSigSpendingCondition(AddressHashMode.SerializeP2SH, options.numSignatures, options.publicKeys, options.nonce, options.fee);\n    }\n    if (options.sponsored) {\n        authorization = createSponsoredAuth(spendingCondition);\n    }\n    else {\n        authorization = createStandardAuth(spendingCondition);\n    }\n    const network = StacksNetwork.fromNameOrNetwork(options.network);\n    const postConditions = [];\n    if (options.postConditions && options.postConditions.length > 0) {\n        options.postConditions.forEach(postCondition => {\n            postConditions.push(postCondition);\n        });\n    }\n    const lpPostConditions = createLPList(postConditions);\n    const transaction = new StacksTransaction(network.version, authorization, payload, lpPostConditions, options.postConditionMode, options.anchorMode, network.chainId);\n    if (txOptions.fee === undefined || txOptions.fee === null) {\n        const fee = await estimateTransactionFeeWithFallback(transaction, network);\n        transaction.setFee(fee);\n    }\n    if (txOptions.nonce === undefined || txOptions.nonce === null) {\n        const addressVersion = options.network.version === TransactionVersion.Mainnet\n            ? AddressVersion.MainnetSingleSig\n            : AddressVersion.TestnetSingleSig;\n        const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition.signer);\n        const txNonce = await getNonce(senderAddress, options.network);\n        transaction.setNonce(txNonce);\n    }\n    return transaction;\n}\nexport async function estimateContractFunctionCall(transaction, network) {\n    if (transaction.payload.payloadType !== PayloadType.ContractCall) {\n        throw new Error(`Contract call fee estimation only possible with ${PayloadType[PayloadType.ContractCall]} transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`);\n    }\n    const requestHeaders = {\n        Accept: 'application/text',\n    };\n    const fetchOptions = {\n        method: 'GET',\n        headers: requestHeaders,\n    };\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network ?? deriveNetwork(transaction));\n    const url = derivedNetwork.getTransferFeeEstimateApiUrl();\n    const response = await derivedNetwork.fetchFn(url, fetchOptions);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error estimating contract call fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const feeRateResult = await response.text();\n    const txBytes = intToBigInt(transaction.serialize().byteLength, false);\n    const feeRate = intToBigInt(feeRateResult, false);\n    return feeRate * txBytes;\n}\nexport async function makeUnsignedContractCall(txOptions) {\n    const defaultOptions = {\n        fee: BigInt(0),\n        nonce: BigInt(0),\n        network: new StacksMainnet(),\n        postConditionMode: PostConditionMode.Deny,\n        sponsored: false,\n    };\n    const options = Object.assign(defaultOptions, txOptions);\n    const payload = createContractCallPayload(options.contractAddress, options.contractName, options.functionName, options.functionArgs);\n    if (options?.validateWithAbi) {\n        let abi;\n        if (typeof options.validateWithAbi === 'boolean') {\n            if (options?.network) {\n                abi = await getAbi(options.contractAddress, options.contractName, options.network);\n            }\n            else {\n                throw new Error('Network option must be provided in order to validate with ABI');\n            }\n        }\n        else {\n            abi = options.validateWithAbi;\n        }\n        validateContractCall(payload, abi);\n    }\n    let spendingCondition = null;\n    let authorization = null;\n    if ('publicKey' in options) {\n        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, options.publicKey, options.nonce, options.fee);\n    }\n    else {\n        spendingCondition = createMultiSigSpendingCondition(AddressHashMode.SerializeP2SH, options.numSignatures, options.publicKeys, options.nonce, options.fee);\n    }\n    if (options.sponsored) {\n        authorization = createSponsoredAuth(spendingCondition);\n    }\n    else {\n        authorization = createStandardAuth(spendingCondition);\n    }\n    const network = StacksNetwork.fromNameOrNetwork(options.network);\n    const postConditions = [];\n    if (options.postConditions && options.postConditions.length > 0) {\n        options.postConditions.forEach(postCondition => {\n            postConditions.push(postCondition);\n        });\n    }\n    const lpPostConditions = createLPList(postConditions);\n    const transaction = new StacksTransaction(network.version, authorization, payload, lpPostConditions, options.postConditionMode, options.anchorMode, network.chainId);\n    if (txOptions.fee === undefined || txOptions.fee === null) {\n        const fee = await estimateTransactionFeeWithFallback(transaction, network);\n        transaction.setFee(fee);\n    }\n    if (txOptions.nonce === undefined || txOptions.nonce === null) {\n        const addressVersion = network.version === TransactionVersion.Mainnet\n            ? AddressVersion.MainnetSingleSig\n            : AddressVersion.TestnetSingleSig;\n        const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition.signer);\n        const txNonce = await getNonce(senderAddress, network);\n        transaction.setNonce(txNonce);\n    }\n    return transaction;\n}\nexport async function makeContractCall(txOptions) {\n    if ('senderKey' in txOptions) {\n        const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n        const options = omit(txOptions, 'senderKey');\n        const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n        const privKey = createStacksPrivateKey(txOptions.senderKey);\n        const signer = new TransactionSigner(transaction);\n        signer.signOrigin(privKey);\n        return transaction;\n    }\n    else {\n        const options = omit(txOptions, 'signerKeys');\n        const transaction = await makeUnsignedContractCall(options);\n        const signer = new TransactionSigner(transaction);\n        let pubKeys = txOptions.publicKeys;\n        for (const key of txOptions.signerKeys) {\n            const pubKey = pubKeyfromPrivKey(key);\n            pubKeys = pubKeys.filter(pk => pk !== bytesToHex(pubKey.data));\n            signer.signOrigin(createStacksPrivateKey(key));\n        }\n        for (const key of pubKeys) {\n            signer.appendOrigin(publicKeyFromBytes(hexToBytes(key)));\n        }\n        return transaction;\n    }\n}\nexport function makeStandardSTXPostCondition(address, conditionCode, amount) {\n    return createSTXPostCondition(createStandardPrincipal(address), conditionCode, amount);\n}\nexport function makeContractSTXPostCondition(address, contractName, conditionCode, amount) {\n    return createSTXPostCondition(createContractPrincipal(address, contractName), conditionCode, amount);\n}\nexport function makeStandardFungiblePostCondition(address, conditionCode, amount, assetInfo) {\n    return createFungiblePostCondition(createStandardPrincipal(address), conditionCode, amount, assetInfo);\n}\nexport function makeContractFungiblePostCondition(address, contractName, conditionCode, amount, assetInfo) {\n    return createFungiblePostCondition(createContractPrincipal(address, contractName), conditionCode, amount, assetInfo);\n}\nexport function makeStandardNonFungiblePostCondition(address, conditionCode, assetInfo, assetId) {\n    return createNonFungiblePostCondition(createStandardPrincipal(address), conditionCode, assetInfo, assetId);\n}\nexport function makeContractNonFungiblePostCondition(address, contractName, conditionCode, assetInfo, assetId) {\n    return createNonFungiblePostCondition(createContractPrincipal(address, contractName), conditionCode, assetInfo, assetId);\n}\nexport async function callReadOnlyFunction(readOnlyFunctionOptions) {\n    const defaultOptions = {\n        network: new StacksMainnet(),\n    };\n    const options = Object.assign(defaultOptions, readOnlyFunctionOptions);\n    const { contractName, contractAddress, functionName, functionArgs, senderAddress } = options;\n    const network = StacksNetwork.fromNameOrNetwork(options.network);\n    const url = network.getReadOnlyFunctionCallApiUrl(contractAddress, contractName, functionName);\n    const args = functionArgs.map(arg => cvToHex(arg));\n    const body = JSON.stringify({\n        sender: senderAddress,\n        arguments: args,\n    });\n    const response = await network.fetchFn(url, {\n        method: 'POST',\n        body,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    return response.json().then(responseJson => parseReadOnlyResponse(responseJson));\n}\nexport async function getContractMapEntry(getContractMapEntryOptions) {\n    const defaultOptions = {\n        network: new StacksMainnet(),\n    };\n    const { contractAddress, contractName, mapName, mapKey, network } = Object.assign(defaultOptions, getContractMapEntryOptions);\n    const derivedNetwork = StacksNetwork.fromNameOrNetwork(network);\n    const url = derivedNetwork.getMapEntryUrl(contractAddress, contractName, mapName);\n    const serializedKeyBytes = serializeCV(mapKey);\n    const serializedKeyHex = '0x' + bytesToHex(serializedKeyBytes);\n    const fetchOptions = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n        },\n        body: JSON.stringify(serializedKeyHex),\n    };\n    const response = await derivedNetwork.fetchFn(url, fetchOptions);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${serializedKeyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const responseBody = await response.text();\n    const responseJson = JSON.parse(responseBody);\n    if (!responseJson.data) {\n        throw new Error(`Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${serializedKeyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the response: \"${responseBody}\"`);\n    }\n    let deserializedCv;\n    try {\n        deserializedCv = deserializeCV(responseJson.data);\n    }\n    catch (error) {\n        throw new Error(`Error deserializing Clarity value \"${responseJson.data}\": ${error}`);\n    }\n    return deserializedCv;\n}\nexport async function sponsorTransaction(sponsorOptions) {\n    const defaultOptions = {\n        fee: 0,\n        sponsorNonce: 0,\n        sponsorAddressHashmode: AddressHashMode.SerializeP2PKH,\n        network: sponsorOptions.transaction.version === TransactionVersion.Mainnet\n            ? new StacksMainnet()\n            : new StacksTestnet(),\n    };\n    const options = Object.assign(defaultOptions, sponsorOptions);\n    const network = StacksNetwork.fromNameOrNetwork(options.network);\n    const sponsorPubKey = pubKeyfromPrivKey(options.sponsorPrivateKey);\n    if (sponsorOptions.fee === undefined || sponsorOptions.fee === null) {\n        let txFee = 0;\n        switch (options.transaction.payload.payloadType) {\n            case PayloadType.TokenTransfer:\n            case PayloadType.SmartContract:\n            case PayloadType.VersionedSmartContract:\n            case PayloadType.ContractCall:\n                const estimatedLen = estimateTransactionByteLength(options.transaction);\n                try {\n                    txFee = (await estimateTransaction(options.transaction.payload, estimatedLen, network))[1]\n                        .fee;\n                }\n                catch (e) {\n                    throw e;\n                }\n                break;\n            default:\n                throw new Error(`Sponsored transactions not supported for transaction type ${PayloadType[options.transaction.payload.payloadType]}`);\n        }\n        options.transaction.setFee(txFee);\n        options.fee = txFee;\n    }\n    if (sponsorOptions.sponsorNonce === undefined || sponsorOptions.sponsorNonce === null) {\n        const addressVersion = network.version === TransactionVersion.Mainnet\n            ? AddressVersion.MainnetSingleSig\n            : AddressVersion.TestnetSingleSig;\n        const senderAddress = publicKeyToAddress(addressVersion, sponsorPubKey);\n        const sponsorNonce = await getNonce(senderAddress, network);\n        options.sponsorNonce = sponsorNonce;\n    }\n    const sponsorSpendingCondition = createSingleSigSpendingCondition(options.sponsorAddressHashmode, publicKeyToString(sponsorPubKey), options.sponsorNonce, options.fee);\n    options.transaction.setSponsor(sponsorSpendingCondition);\n    const privKey = createStacksPrivateKey(options.sponsorPrivateKey);\n    const signer = TransactionSigner.createSponsorSigner(options.transaction, sponsorSpendingCondition);\n    signer.signSponsor(privKey);\n    return signer.transaction;\n}\nexport function estimateTransactionByteLength(transaction) {\n    const hashMode = transaction.auth.spendingCondition.hashMode;\n    const multiSigHashModes = [AddressHashMode.SerializeP2SH, AddressHashMode.SerializeP2WSH];\n    if (multiSigHashModes.includes(hashMode)) {\n        const multiSigSpendingCondition = transaction.auth\n            .spendingCondition;\n        const existingSignatures = multiSigSpendingCondition.fields.filter(field => field.contents.type === StacksMessageType.MessageSignature).length;\n        const totalSignatureLength = (multiSigSpendingCondition.signaturesRequired - existingSignatures) *\n            (RECOVERABLE_ECDSA_SIG_LENGTH_BYTES + 1);\n        return transaction.serialize().byteLength + totalSignatureLength;\n    }\n    else {\n        return transaction.serialize().byteLength;\n    }\n}\nexport async function estimateTransactionFeeWithFallback(transaction, network) {\n    try {\n        const estimatedLen = estimateTransactionByteLength(transaction);\n        return (await estimateTransaction(transaction.payload, estimatedLen, network))[1].fee;\n    }\n    catch (error) {\n        if (error instanceof NoEstimateAvailableError) {\n            return await estimateTransferUnsafe(transaction, network);\n        }\n        throw error;\n    }\n}\n//# sourceMappingURL=builders.js.map","/** Address versions corresponding to pox.clar, pox-2.clar */\nexport enum PoXAddressVersion {\n  /** (b58/legacy) p2pkh address, and `hashbytes` is the 20-byte hash160 of a single public key */\n  P2PKH = 0x00,\n  /** (b58/legacy) p2sh address, and `hashbytes` is the 20-byte hash160 of a redeemScript script */\n  P2SH = 0x01,\n  /** (b58/legacy) p2wpkh-p2sh address, and `hashbytes` is the 20-byte hash160 of a p2wpkh witness script */\n  P2SHP2WPKH = 0x02, // likely unused, as indistinguishable from P2SH\n  /** (b58/legacy) p2wsh-p2sh address, and `hashbytes` is the 20-byte hash160 of a p2wsh witness script */\n  P2SHP2WSH = 0x03, // likely unused, as indistinguishable from P2SH\n  /** (bech32/segwit) p2wpkh address, and `hashbytes` is the 20-byte hash160 of the witness script */\n  P2WPKH = 0x04,\n  /** (bech32/segwit) p2wsh address, and `hashbytes` is the 32-byte sha256 of the witness script */\n  P2WSH = 0x05,\n  /** (bech32/segwit) p2tr address, and `hashbytes` is the 32-byte sha256 of the witness script */\n  P2TR = 0x06,\n}\n\n/** @ignore */\nexport const BitcoinNetworkVersion = {\n  mainnet: {\n    P2PKH: 0x00, // 0\n    P2SH: 0x05, // 5\n  },\n  testnet: {\n    P2PKH: 0x6f, // 111\n    P2SH: 0xc4, // 196\n  },\n  devnet: {\n    // equivalent to testnet for our purposes\n    P2PKH: 0x6f, // 111\n    P2SH: 0xc4, // 196\n  },\n  mocknet: {\n    // equivalent to testnet for our purposes\n    P2PKH: 0x6f, // 111\n    P2SH: 0xc4, // 196\n  },\n} as const;\n\n/**\n * Valid prefix chars for mainnet and testnet P2PKH and P2SH addresses\n *  mainnet P2PKH: 1\n *  testnet P2PKH: m or n\n *  mainnet P2SH: 3\n *  testnet P2SH: 2\n * @ignore\n */\nexport const B58_ADDR_PREFIXES = /^(1|3|m|n|2)/;\n\n/**\n * Valid prefixes for supported segwit address, structure is:\n * HRP PREFIX + SEPARATOR (always '1') + C32_ENCODED SEGWIT_VERSION_BYTE ('q' for 0, 'p' for 1) + HASHDATA\n * @ignore\n */\nexport const SEGWIT_V0_ADDR_PREFIX = /^(bc1q|tb1q|bcrt1q)/i;\nexport const SEGWIT_V1_ADDR_PREFIX = /^(bc1p|tb1p|bcrt1p)/i;\n\n/**\n * Segwit Human-Readable Parts\n * Valid prefixs for mainnet and testnet bech32/segwit addresses\n * @ignore\n */\nexport const SegwitPrefix = {\n  mainnet: 'bc',\n  testnet: 'tb',\n  devnet: 'bcrt',\n  mocknet: 'bcrt',\n} as const;\n/** @ignore */\nexport const SEGWIT_ADDR_PREFIXES = /^(bc|tb)/i;\n\n/** @ignore */\nexport const SEGWIT_V0 = 0;\n/** @ignore */\nexport const SEGWIT_V1 = 1;\n\n// Segwit/taproot address examples:\n//   mainnet P2WPKH: bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\n//   testnet P2WPKH: tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx\n//   mainnet P2WSH: bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3\n//   testnet P2WSH: tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\n//   mainnet P2TR: bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg3297\n//   testnet P2TR: tb1p6h5fuzmnvpdthf5shf0qqjzwy7wsqc5rhmgq2ks9xrak4ry6mtrscsqvzp\n\n/**\n * Transitional periods from the 2.1 launch\n * @see SIP-015\n */\nexport enum PoxOperationPeriod {\n  /** Period 1: This is before the 2.1 fork. */\n  Period1 = 'Period1',\n  /** Period 2a: This is after the 2.1 fork, but before v1_unlock_height. */\n  Period2a = 'Period2a', //\n  /** Period 2b: This is after the 2.1 fork, after v1_unlock_height, but before the first PoX-2 reward cycle. */\n  Period2b = 'Period2b',\n  /** Period 3: This is after the first PoX-2 reward cycle has begun. The original PoX contract state will no longer have any impact on reward sets. */\n  Period3 = 'Period3',\n}\n\nexport enum StackingErrors {\n  // taken from https://github.com/stacks-network/stacks-blockchain/blob/088ff00761b27a12bfaf19dab5743e77e8ca4d0c/src/chainstate/stacks/boot/pox-3.clar\n  ERR_STACKING_UNREACHABLE = 255,\n  ERR_STACKING_CORRUPTED_STATE = 254,\n  ERR_STACKING_INSUFFICIENT_FUNDS = 1,\n  ERR_STACKING_INVALID_LOCK_PERIOD = 2,\n  ERR_STACKING_ALREADY_STACKED = 3,\n  ERR_STACKING_NO_SUCH_PRINCIPAL = 4,\n  ERR_STACKING_EXPIRED = 5,\n  ERR_STACKING_STX_LOCKED = 6,\n  ERR_STACKING_PERMISSION_DENIED = 9,\n  ERR_STACKING_THRESHOLD_NOT_MET = 11,\n  ERR_STACKING_POX_ADDRESS_IN_USE = 12,\n  ERR_STACKING_INVALID_POX_ADDRESS = 13,\n  ERR_STACKING_ALREADY_REJECTED = 17,\n  ERR_STACKING_INVALID_AMOUNT = 18,\n  ERR_NOT_ALLOWED = 19,\n  ERR_STACKING_ALREADY_DELEGATED = 20,\n  ERR_DELEGATION_EXPIRES_DURING_LOCK = 21,\n  ERR_DELEGATION_TOO_MUCH_LOCKED = 22,\n  ERR_DELEGATION_POX_ADDR_REQUIRED = 23,\n  ERR_INVALID_START_BURN_HEIGHT = 24,\n  ERR_NOT_CURRENT_STACKER = 25,\n  ERR_STACK_EXTEND_NOT_LOCKED = 26,\n  ERR_STACK_INCREASE_NOT_LOCKED = 27,\n  ERR_DELEGATION_NO_REWARD_SLOT = 28,\n  ERR_DELEGATION_WRONG_REWARD_SLOT = 29,\n  ERR_STACKING_IS_DELEGATED = 30,\n  ERR_STACKING_NOT_DELEGATED = 31,\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { getPublicKey as nobleGetPublicKey, signSync, utils } from '@noble/secp256k1';\nimport { bytesToHex, concatBytes, hexToBytes, privateKeyToBytes, PRIVATE_KEY_COMPRESSED_LENGTH, readUInt8, } from '@stacks/common';\nimport base58 from 'bs58';\nimport { hashRipemd160 } from './hashRipemd160';\nimport { hashSha256Sync } from './sha2Hash';\nconst BITCOIN_PUBKEYHASH = 0x00;\nutils.hmacSha256Sync = (key, ...msgs) => {\n    const h = hmac.create(sha256, key);\n    msgs.forEach(msg => h.update(msg));\n    return h.digest();\n};\nexport function makeECPrivateKey() {\n    return bytesToHex(utils.randomPrivateKey());\n}\nexport function base58CheckDecode(btcAddress) {\n    const bytes = base58.decode(btcAddress);\n    const payload = bytes.slice(0, -4);\n    const checksum = bytes.slice(-4);\n    const newChecksum = sha256(sha256(payload));\n    if ((checksum[0] ^ newChecksum[0]) |\n        (checksum[1] ^ newChecksum[1]) |\n        (checksum[2] ^ newChecksum[2]) |\n        (checksum[3] ^ newChecksum[3])) {\n        throw new Error('Invalid checksum');\n    }\n    if (payload.length !== 21)\n        throw new TypeError('Invalid address length');\n    const version = readUInt8(payload, 0);\n    const hash = payload.slice(1);\n    return { version, hash };\n}\nexport function base58Encode(hash) {\n    const checksum = sha256(sha256(hash));\n    return base58.encode(concatBytes(hash, checksum).slice(0, hash.length + 4));\n}\nexport function base58CheckEncode(version, hash) {\n    return base58Encode(concatBytes(new Uint8Array([version]), hash.slice(0, 20)));\n}\nexport function publicKeyToBtcAddress(publicKey, version = BITCOIN_PUBKEYHASH) {\n    const publicKeyBytes = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n    const publicKeyHash160 = hashRipemd160(hashSha256Sync(publicKeyBytes));\n    return base58CheckEncode(version, publicKeyHash160);\n}\nexport function getPublicKeyFromPrivate(privateKey) {\n    const privateKeyBytes = privateKeyToBytes(privateKey);\n    return bytesToHex(nobleGetPublicKey(privateKeyBytes.slice(0, 32), true));\n}\nexport function ecSign(messageHash, hexPrivateKey) {\n    return signSync(messageHash, privateKeyToBytes(hexPrivateKey).slice(0, 32), {\n        der: false,\n    });\n}\nexport function isValidPrivateKey(privateKey) {\n    return utils.isValidPrivateKey(privateKeyToBytes(privateKey));\n}\nexport function compressPrivateKey(privateKey) {\n    const privateKeyBytes = privateKeyToBytes(privateKey);\n    return privateKeyBytes.length == PRIVATE_KEY_COMPRESSED_LENGTH\n        ? privateKeyBytes\n        : concatBytes(privateKeyBytes, new Uint8Array([1]));\n}\n//# sourceMappingURL=keys.js.map","import { readUInt16LE, readUInt32LE, readUInt8, writeUInt16LE, writeUInt32LE, writeUInt8, } from '@stacks/common';\nconst MAX_SAFE_INTEGER = 9007199254740991;\nfunction ensureUInt53(n) {\n    if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)\n        throw new RangeError('value out of range');\n}\nexport function encode(number, bytes, offset = 0) {\n    ensureUInt53(number);\n    if (!bytes)\n        bytes = new Uint8Array(encodingLength(number));\n    if (number < 0xfd) {\n        writeUInt8(bytes, number, offset);\n    }\n    else if (number <= 65535) {\n        writeUInt8(bytes, 0xfd, offset);\n        writeUInt16LE(bytes, number, offset + 1);\n    }\n    else if (number <= 4294967295) {\n        writeUInt8(bytes, 0xfe, offset);\n        writeUInt32LE(bytes, number, offset + 1);\n    }\n    else {\n        writeUInt8(bytes, 0xff, offset);\n        writeUInt32LE(bytes, number >>> 0, offset + 1);\n        writeUInt32LE(bytes, (number / 4294967296) | 0, offset + 5);\n    }\n    return bytes;\n}\nexport function decode(bytes, offset = 0) {\n    const first = readUInt8(bytes, offset);\n    if (first < 0xfd) {\n        return first;\n    }\n    else if (first === 0xfd) {\n        return readUInt16LE(bytes, offset + 1);\n    }\n    else if (first === 0xfe) {\n        return readUInt32LE(bytes, offset + 1);\n    }\n    else {\n        const lo = readUInt32LE(bytes, offset + 1);\n        const hi = readUInt32LE(bytes, offset + 5);\n        const number = hi * 4294967296 + lo;\n        ensureUInt53(number);\n        return number;\n    }\n}\nexport function encodingLength(number) {\n    ensureUInt53(number);\n    return number < 0xfd ? 1 : number <= 65535 ? 3 : number <= 4294967295 ? 5 : 9;\n}\n//# sourceMappingURL=varuint.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { concatBytes, utf8ToBytes } from '@stacks/common';\nimport { decode, encode, encodingLength } from './varuint';\nconst chainPrefix = '\\x17Stacks Signed Message:\\n';\nexport function hashMessage(message, prefix = chainPrefix) {\n    return sha256(encodeMessage(message, prefix));\n}\nexport function encodeMessage(message, prefix = chainPrefix) {\n    const messageBytes = typeof message == 'string' ? utf8ToBytes(message) : message;\n    const encodedLength = encode(messageBytes.length);\n    return concatBytes(utf8ToBytes(prefix), encodedLength, messageBytes);\n}\nexport function decodeMessage(encodedMessage, prefix = chainPrefix) {\n    const prefixByteLength = utf8ToBytes(prefix).byteLength;\n    const messageWithoutChainPrefix = encodedMessage.subarray(prefixByteLength);\n    const decoded = decode(messageWithoutChainPrefix);\n    const varIntLength = encodingLength(decoded);\n    return messageWithoutChainPrefix.slice(varIntLength);\n}\n//# sourceMappingURL=messageSignature.js.map","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { getPublicKey, getSharedSecret, Point, Signature, signSync, utils, verify, } from '@noble/secp256k1';\nimport { bigIntToBytes, bytesToHex, bytesToUtf8, concatBytes, FailedDecryptionError, hexToBigInt, hexToBytes, parseRecoverableSignatureVrs, signatureRsvToVrs, utf8ToBytes, } from '@stacks/common';\nimport { fromByteArray, toByteArray } from 'base64-js';\nimport { createCipher } from './aesCipher';\nimport { getPublicKeyFromPrivate } from './keys';\nimport { encodeMessage, hashMessage } from './messageSignature';\nimport { hashSha256Sync, hashSha512Sync } from './sha2Hash';\nimport { getAesCbcOutputLength, getBase64OutputLength } from './utils';\nutils.hmacSha256Sync = (key, ...msgs) => {\n    const h = hmac.create(sha256, key);\n    msgs.forEach(msg => h.update(msg));\n    return h.digest();\n};\nexport var InvalidPublicKeyReason;\n(function (InvalidPublicKeyReason) {\n    InvalidPublicKeyReason[\"InvalidFormat\"] = \"InvalidFormat\";\n    InvalidPublicKeyReason[\"IsNotPoint\"] = \"IsNotPoint\";\n})(InvalidPublicKeyReason || (InvalidPublicKeyReason = {}));\nexport async function aes256CbcEncrypt(iv, key, plaintext) {\n    const cipher = await createCipher();\n    return await cipher.encrypt('aes-256-cbc', key, iv, plaintext);\n}\nasync function aes256CbcDecrypt(iv, key, ciphertext) {\n    const cipher = await createCipher();\n    return await cipher.decrypt('aes-256-cbc', key, iv, ciphertext);\n}\nexport function hmacSha256(key, content) {\n    return hmac(sha256, key, content);\n}\nfunction equalsConstTime(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    let res = 0;\n    for (let i = 0; i < a.length; i++) {\n        res |= a[i] ^ b[i];\n    }\n    return res === 0;\n}\nfunction sharedSecretToKeys(sharedSecret) {\n    const hashedSecret = hashSha512Sync(sharedSecret);\n    return {\n        encryptionKey: hashedSecret.slice(0, 32),\n        hmacKey: hashedSecret.slice(32),\n    };\n}\nfunction allHexChars(maybe) {\n    return maybe.match(/^[0-9a-f]+$/i) !== null;\n}\nfunction isValidPublicKey(pub) {\n    const invalidFormat = {\n        result: false,\n        reason_data: 'Invalid public key format',\n        reason: InvalidPublicKeyReason.InvalidFormat,\n    };\n    const invalidPoint = {\n        result: false,\n        reason_data: 'Public key is not a point',\n        reason: InvalidPublicKeyReason.IsNotPoint,\n    };\n    if (pub.length !== 66 && pub.length !== 130)\n        return invalidFormat;\n    const firstByte = pub.slice(0, 2);\n    if (pub.length === 130 && firstByte !== '04')\n        return invalidFormat;\n    if (pub.length === 66 && firstByte !== '02' && firstByte !== '03')\n        return invalidFormat;\n    if (!allHexChars(pub))\n        return invalidFormat;\n    try {\n        const point = Point.fromHex(pub);\n        point.assertValidity();\n        return {\n            result: true,\n            reason_data: null,\n            reason: null,\n        };\n    }\n    catch (e) {\n        return invalidPoint;\n    }\n}\nexport function getHexFromBN(bnInput) {\n    const hexOut = bnInput.toString(16);\n    if (hexOut.length === 64) {\n        return hexOut;\n    }\n    else if (hexOut.length < 64) {\n        const padding = '0'.repeat(64 - hexOut.length);\n        return `${padding}${hexOut}`;\n    }\n    else {\n        throw new Error('Generated a > 32-byte BN for encryption. Failing.');\n    }\n}\nexport function getBytesFromBN(bnInput) {\n    const result = bigIntToBytes(bnInput, 32);\n    if (result.byteLength !== 32) {\n        throw new Error('Failed to generate a 32-byte Uint8Array');\n    }\n    return result;\n}\nexport function getCipherObjectWrapper(opts) {\n    const shell = {\n        iv: '',\n        ephemeralPK: '',\n        mac: '',\n        cipherText: '',\n        wasString: !!opts.wasString,\n    };\n    if (opts.cipherTextEncoding === 'base64') {\n        shell.cipherTextEncoding = 'base64';\n    }\n    const ivLength = 32;\n    const ephemeralPKLength = 66;\n    const macLength = 64;\n    return {\n        payloadValuesLength: ivLength + ephemeralPKLength + macLength,\n        payloadShell: JSON.stringify(shell),\n    };\n}\nexport function getSignedCipherObjectWrapper(payloadShell) {\n    const shell = {\n        signature: '',\n        publicKey: '',\n        cipherText: payloadShell,\n    };\n    const signatureLength = 144;\n    const publicKeyLength = 66;\n    return {\n        signedPayloadValuesLength: signatureLength + publicKeyLength,\n        signedPayloadShell: JSON.stringify(shell),\n    };\n}\nexport function eciesGetJsonStringLength(opts) {\n    const { payloadShell, payloadValuesLength } = getCipherObjectWrapper(opts);\n    const cipherTextLength = getAesCbcOutputLength(opts.contentLength);\n    let encodedCipherTextLength;\n    if (!opts.cipherTextEncoding || opts.cipherTextEncoding === 'hex') {\n        encodedCipherTextLength = cipherTextLength * 2;\n    }\n    else if (opts.cipherTextEncoding === 'base64') {\n        encodedCipherTextLength = getBase64OutputLength(cipherTextLength);\n    }\n    else {\n        throw new Error(`Unexpected cipherTextEncoding \"${opts.cipherTextEncoding}\"`);\n    }\n    if (!opts.sign) {\n        return payloadShell.length + payloadValuesLength + encodedCipherTextLength;\n    }\n    else {\n        const { signedPayloadShell, signedPayloadValuesLength } = getSignedCipherObjectWrapper(payloadShell);\n        return (signedPayloadShell.length +\n            signedPayloadValuesLength +\n            payloadValuesLength +\n            encodedCipherTextLength);\n    }\n}\nexport async function encryptECIES(publicKey, content, wasString, cipherTextEncoding) {\n    const validity = isValidPublicKey(publicKey);\n    if (!validity.result) {\n        throw validity;\n    }\n    const ephemeralPrivateKey = utils.randomPrivateKey();\n    const ephemeralPublicKey = getPublicKey(ephemeralPrivateKey, true);\n    let sharedSecret = getSharedSecret(ephemeralPrivateKey, publicKey, true);\n    sharedSecret = sharedSecret.slice(1);\n    const sharedKeys = sharedSecretToKeys(sharedSecret);\n    const initializationVector = utils.randomBytes(16);\n    const cipherText = await aes256CbcEncrypt(initializationVector, sharedKeys.encryptionKey, content);\n    const macData = concatBytes(initializationVector, ephemeralPublicKey, cipherText);\n    const mac = hmacSha256(sharedKeys.hmacKey, macData);\n    let cipherTextString;\n    if (!cipherTextEncoding || cipherTextEncoding === 'hex') {\n        cipherTextString = bytesToHex(cipherText);\n    }\n    else if (cipherTextEncoding === 'base64') {\n        cipherTextString = fromByteArray(cipherText);\n    }\n    else {\n        throw new Error(`Unexpected cipherTextEncoding \"${cipherTextEncoding}\"`);\n    }\n    const result = {\n        iv: bytesToHex(initializationVector),\n        ephemeralPK: bytesToHex(ephemeralPublicKey),\n        cipherText: cipherTextString,\n        mac: bytesToHex(mac),\n        wasString,\n    };\n    if (cipherTextEncoding && cipherTextEncoding !== 'hex') {\n        result.cipherTextEncoding = cipherTextEncoding;\n    }\n    return result;\n}\nexport async function decryptECIES(privateKey, cipherObject) {\n    if (!cipherObject.ephemeralPK) {\n        throw new FailedDecryptionError('Unable to get public key from cipher object. ' +\n            'You might be trying to decrypt an unencrypted object.');\n    }\n    const ephemeralPK = cipherObject.ephemeralPK;\n    let sharedSecret = getSharedSecret(privateKey, ephemeralPK, true);\n    sharedSecret = sharedSecret.slice(1);\n    const sharedKeys = sharedSecretToKeys(sharedSecret);\n    const ivBytes = hexToBytes(cipherObject.iv);\n    let cipherTextBytes;\n    if (!cipherObject.cipherTextEncoding || cipherObject.cipherTextEncoding === 'hex') {\n        cipherTextBytes = hexToBytes(cipherObject.cipherText);\n    }\n    else if (cipherObject.cipherTextEncoding === 'base64') {\n        cipherTextBytes = toByteArray(cipherObject.cipherText);\n    }\n    else {\n        throw new Error(`Unexpected cipherTextEncoding \"${cipherObject.cipherText}\"`);\n    }\n    const macData = concatBytes(ivBytes, hexToBytes(ephemeralPK), cipherTextBytes);\n    const actualMac = hmacSha256(sharedKeys.hmacKey, macData);\n    const expectedMac = hexToBytes(cipherObject.mac);\n    if (!equalsConstTime(expectedMac, actualMac)) {\n        throw new FailedDecryptionError('Decryption failed: failure in MAC check');\n    }\n    const plainText = await aes256CbcDecrypt(ivBytes, sharedKeys.encryptionKey, cipherTextBytes);\n    if (cipherObject.wasString) {\n        return bytesToUtf8(plainText);\n    }\n    return plainText;\n}\nexport function signECDSA(privateKey, content) {\n    const contentBytes = typeof content === 'string' ? utf8ToBytes(content) : content;\n    const publicKey = getPublicKeyFromPrivate(privateKey);\n    const contentHash = hashSha256Sync(contentBytes);\n    const signature = signSync(contentHash, privateKey);\n    return {\n        signature: bytesToHex(signature),\n        publicKey,\n    };\n}\nexport function verifyECDSA(content, publicKey, signature) {\n    const contentBytes = typeof content === 'string' ? utf8ToBytes(content) : content;\n    const contentHash = hashSha256Sync(contentBytes);\n    return verify(signature, contentHash, publicKey, { strict: false });\n}\nexport function verifyMessageSignature({ signature, message, publicKey, }) {\n    const { r, s } = parseRecoverableSignatureVrs(signature);\n    const sig = new Signature(hexToBigInt(r), hexToBigInt(s));\n    const hashedMsg = typeof message === 'string' ? hashMessage(message) : message;\n    const verificationResult = verify(sig, hashedMsg, publicKey, { strict: false });\n    if (verificationResult || typeof message !== 'string')\n        return verificationResult;\n    const LEGACY_PREFIX = '\\x18Stacks Message Signing:\\n';\n    const legacyHash = sha256(encodeMessage(message, LEGACY_PREFIX));\n    return verify(sig, legacyHash, publicKey, { strict: false });\n}\nexport function verifyMessageSignatureRsv({ signature, message, publicKey, }) {\n    return verifyMessageSignature({\n        signature: signatureRsvToVrs(signature),\n        message,\n        publicKey,\n    });\n}\n//# sourceMappingURL=ec.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex, concatBytes, utf8ToBytes } from '@stacks/common';\nimport { ClarityType, serializeCV } from './clarity';\nimport { StacksMessageType } from './constants';\nimport { signMessageHashRsv } from './keys';\nexport const STRUCTURED_DATA_PREFIX = new Uint8Array([0x53, 0x49, 0x50, 0x30, 0x31, 0x38]);\nexport function hashStructuredData(structuredData) {\n    return sha256(serializeCV(structuredData));\n}\nconst hash256BytesLength = 32;\nfunction isDomain(value) {\n    if (value.type !== ClarityType.Tuple)\n        return false;\n    if (!['name', 'version', 'chain-id'].every(key => key in value.data))\n        return false;\n    if (!['name', 'version'].every(key => value.data[key].type === ClarityType.StringASCII))\n        return false;\n    if (value.data['chain-id'].type !== ClarityType.UInt)\n        return false;\n    return true;\n}\nexport function encodeStructuredData({ message, domain, }) {\n    const structuredDataHash = hashStructuredData(message);\n    if (!isDomain(domain)) {\n        throw new Error(\"domain parameter must be a valid domain of type TupleCV with keys 'name', 'version', 'chain-id' with respective types StringASCII, StringASCII, UInt\");\n    }\n    const domainHash = hashStructuredData(domain);\n    return concatBytes(STRUCTURED_DATA_PREFIX, domainHash, structuredDataHash);\n}\nexport function decodeStructuredDataSignature(signature) {\n    const encodedMessageBytes = typeof signature === 'string' ? utf8ToBytes(signature) : signature;\n    const domainHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length, STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n    const messageHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n    return {\n        domainHash,\n        messageHash,\n    };\n}\nexport function signStructuredData({ message, domain, privateKey, }) {\n    const structuredDataHash = bytesToHex(sha256(encodeStructuredData({ message, domain })));\n    const { data } = signMessageHashRsv({\n        messageHash: structuredDataHash,\n        privateKey,\n    });\n    return {\n        data,\n        type: StacksMessageType.StructuredDataSignature,\n    };\n}\n//# sourceMappingURL=structuredDataSignature.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { bech32, bech32m } from '@scure/base';\nimport { IntegerType, bigIntToBytes } from '@stacks/common';\nimport {\n  base58CheckDecode,\n  base58CheckEncode,\n  verifyMessageSignatureRsv,\n} from '@stacks/encryption';\nimport { StacksNetwork, StacksNetworkName, StacksNetworks } from '@stacks/network';\nimport {\n  BufferCV,\n  ClarityType,\n  ClarityValue,\n  OptionalCV,\n  StacksPrivateKey,\n  TupleCV,\n  bufferCV,\n  encodeStructuredData,\n  signStructuredData,\n  stringAsciiCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport { PoxOperationInfo } from '.';\nimport {\n  B58_ADDR_PREFIXES,\n  BitcoinNetworkVersion,\n  PoXAddressVersion,\n  PoxOperationPeriod,\n  SEGWIT_ADDR_PREFIXES,\n  SEGWIT_V0,\n  SEGWIT_V0_ADDR_PREFIX,\n  SEGWIT_V1,\n  SEGWIT_V1_ADDR_PREFIX,\n  SegwitPrefix,\n  StackingErrors,\n} from './constants';\n\nexport class InvalidAddressError extends Error {\n  innerError?: Error;\n  constructor(address: string, innerError?: Error) {\n    const msg = `'${address}' is not a valid P2PKH/P2SH/P2WPKH/P2WSH/P2TR address`;\n    super(msg);\n    this.message = msg;\n    this.name = this.constructor.name;\n    this.innerError = innerError;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\n/** @ignore */\nexport function btcAddressVersionToLegacyHashMode(btcAddressVersion: number): PoXAddressVersion {\n  switch (btcAddressVersion) {\n    case BitcoinNetworkVersion.mainnet.P2PKH:\n      return PoXAddressVersion.P2PKH;\n    case BitcoinNetworkVersion.testnet.P2PKH:\n      return PoXAddressVersion.P2PKH;\n    case BitcoinNetworkVersion.mainnet.P2SH:\n      return PoXAddressVersion.P2SH;\n    case BitcoinNetworkVersion.testnet.P2SH:\n      return PoXAddressVersion.P2SH;\n    default:\n      throw new Error('Invalid pox address version');\n  }\n}\n\n/** @ignore */\nfunction nativeAddressToSegwitVersion(\n  witnessVersion: number,\n  dataLength: number\n): PoXAddressVersion {\n  if (witnessVersion === SEGWIT_V0 && dataLength === 20) return PoXAddressVersion.P2WPKH;\n  if (witnessVersion === SEGWIT_V0 && dataLength === 32) return PoXAddressVersion.P2WSH;\n  if (witnessVersion === SEGWIT_V1 && dataLength === 32) return PoXAddressVersion.P2TR;\n\n  throw new Error(\n    'Invalid native segwit witness version and byte length. Currently, only P2WPKH, P2WSH, and P2TR are supported.'\n  );\n}\n\nfunction bech32Decode(btcAddress: string) {\n  const { words: bech32Words } = bech32.decode(btcAddress);\n  const witnessVersion = bech32Words[0];\n\n  if (witnessVersion > 0)\n    throw new Error('Addresses with a witness version >= 1 should be encoded in bech32m');\n\n  return {\n    witnessVersion,\n    data: bech32.fromWords(bech32Words.slice(1)),\n  };\n}\n\nfunction bech32MDecode(btcAddress: string) {\n  const { words: bech32MWords } = bech32m.decode(btcAddress);\n  const witnessVersion = bech32MWords[0];\n\n  if (witnessVersion == 0)\n    throw new Error('Addresses with witness version 1 should be encoded in bech32');\n\n  return {\n    witnessVersion,\n    data: bech32m.fromWords(bech32MWords.slice(1)),\n  };\n}\n\nfunction decodeNativeSegwitBtcAddress(btcAddress: string): {\n  witnessVersion: number;\n  data: Uint8Array;\n} {\n  if (SEGWIT_V0_ADDR_PREFIX.test(btcAddress)) return bech32Decode(btcAddress);\n  if (SEGWIT_V1_ADDR_PREFIX.test(btcAddress)) return bech32MDecode(btcAddress);\n  throw new Error(\n    `Native segwit address ${btcAddress} does not match valid prefix ${SEGWIT_V0_ADDR_PREFIX} or ${SEGWIT_V1_ADDR_PREFIX}`\n  );\n}\n\nexport function decodeBtcAddress(btcAddress: string): {\n  version: PoXAddressVersion;\n  data: Uint8Array;\n} {\n  try {\n    if (B58_ADDR_PREFIXES.test(btcAddress)) {\n      const b58 = base58CheckDecode(btcAddress);\n      const addressVersion = btcAddressVersionToLegacyHashMode(b58.version);\n      return {\n        version: addressVersion,\n        data: b58.hash,\n      };\n    } else if (SEGWIT_ADDR_PREFIXES.test(btcAddress)) {\n      const b32 = decodeNativeSegwitBtcAddress(btcAddress);\n      const addressVersion = nativeAddressToSegwitVersion(b32.witnessVersion, b32.data.length);\n      return {\n        version: addressVersion,\n        data: b32.data,\n      };\n    }\n    throw new Error('Unknown BTC address prefix.');\n  } catch (error) {\n    throw new InvalidAddressError(btcAddress, error as Error);\n  }\n}\n\nexport function extractPoxAddressFromClarityValue(poxAddrClarityValue: ClarityValue) {\n  const clarityValue = poxAddrClarityValue as TupleCV;\n  if (clarityValue.type !== ClarityType.Tuple || !clarityValue.data) {\n    throw new Error('Invalid argument, expected ClarityValue to be a TupleCV');\n  }\n  if (!('version' in clarityValue.data) || !('hashbytes' in clarityValue.data)) {\n    throw new Error(\n      'Invalid argument, expected Clarity tuple value to contain `version` and `hashbytes` keys'\n    );\n  }\n  const versionCV = clarityValue.data['version'] as BufferCV;\n  const hashBytesCV = clarityValue.data['hashbytes'] as BufferCV;\n  if (versionCV.type !== ClarityType.Buffer || hashBytesCV.type !== ClarityType.Buffer) {\n    throw new Error(\n      'Invalid argument, expected Clarity tuple value to contain `version` and `hashbytes` buffers'\n    );\n  }\n  return {\n    version: versionCV.buffer[0],\n    hashBytes: hashBytesCV.buffer,\n  };\n}\n\nexport function getErrorString(error: StackingErrors): string {\n  switch (error) {\n    case StackingErrors.ERR_STACKING_UNREACHABLE:\n      return 'Stacking unreachable';\n    case StackingErrors.ERR_STACKING_CORRUPTED_STATE:\n      return 'Stacking state is corrupted';\n    case StackingErrors.ERR_STACKING_INSUFFICIENT_FUNDS:\n      return 'Insufficient funds';\n    case StackingErrors.ERR_STACKING_INVALID_LOCK_PERIOD:\n      return 'Invalid lock period';\n    case StackingErrors.ERR_STACKING_ALREADY_STACKED:\n      return 'Account already stacked. Concurrent stacking not allowed.';\n    case StackingErrors.ERR_STACKING_NO_SUCH_PRINCIPAL:\n      return 'Principal does not exist';\n    case StackingErrors.ERR_STACKING_EXPIRED:\n      return 'Stacking expired';\n    case StackingErrors.ERR_STACKING_STX_LOCKED:\n      return 'STX balance is locked';\n    case StackingErrors.ERR_STACKING_PERMISSION_DENIED:\n      return 'Permission denied';\n    case StackingErrors.ERR_STACKING_THRESHOLD_NOT_MET:\n      return 'Stacking threshold not met';\n    case StackingErrors.ERR_STACKING_POX_ADDRESS_IN_USE:\n      return 'PoX address already in use';\n    case StackingErrors.ERR_STACKING_INVALID_POX_ADDRESS:\n      return 'Invalid PoX address';\n    case StackingErrors.ERR_STACKING_ALREADY_REJECTED:\n      return 'Stacking already rejected';\n    case StackingErrors.ERR_STACKING_INVALID_AMOUNT:\n      return 'Invalid amount';\n    case StackingErrors.ERR_NOT_ALLOWED:\n      return 'Stacking not allowed';\n    case StackingErrors.ERR_STACKING_ALREADY_DELEGATED:\n      return 'Already delegated';\n    case StackingErrors.ERR_DELEGATION_EXPIRES_DURING_LOCK:\n      return 'Delegation expires during lock period';\n    case StackingErrors.ERR_DELEGATION_TOO_MUCH_LOCKED:\n      return 'Delegation too much locked';\n    case StackingErrors.ERR_DELEGATION_POX_ADDR_REQUIRED:\n      return 'PoX address required for delegation';\n    case StackingErrors.ERR_INVALID_START_BURN_HEIGHT:\n      return 'Invalid start burn height';\n    case StackingErrors.ERR_NOT_CURRENT_STACKER: // not used in pox contract\n      return 'ERR_NOT_CURRENT_STACKER';\n    case StackingErrors.ERR_STACK_EXTEND_NOT_LOCKED:\n      return 'Stacker must be currently locked';\n    case StackingErrors.ERR_STACK_INCREASE_NOT_LOCKED:\n      return 'Stacker must be currently locked';\n    case StackingErrors.ERR_DELEGATION_NO_REWARD_SLOT:\n      return 'Invalid reward-cycle and reward-cycle-index';\n    case StackingErrors.ERR_DELEGATION_WRONG_REWARD_SLOT:\n      return 'PoX address must match the one on record';\n    case StackingErrors.ERR_STACKING_IS_DELEGATED:\n      return 'Stacker must be directly stacking and not delegating';\n    case StackingErrors.ERR_STACKING_NOT_DELEGATED:\n      return 'Stacker must be delegating and not be directly stacking';\n  }\n}\n/**\n * Converts a PoX address to a tuple (e.g. to be used in a Clarity contract call).\n *\n * @param poxAddress - The PoX bitcoin address to be converted.\n * @returns The converted PoX address as a tuple of version and hashbytes.\n */\nexport function poxAddressToTuple(poxAddress: string) {\n  const { version, data } = decodeBtcAddress(poxAddress);\n  const versionBuff = bufferCV(bigIntToBytes(BigInt(version), 1));\n  const hashBuff = bufferCV(data);\n  return tupleCV({\n    version: versionBuff,\n    hashbytes: hashBuff,\n  });\n}\n\nfunction legacyHashModeToBtcAddressVersion(\n  hashMode: PoXAddressVersion,\n  network: StacksNetworkName\n): number {\n  switch (hashMode) {\n    case PoXAddressVersion.P2PKH:\n      return BitcoinNetworkVersion[network].P2PKH;\n    case PoXAddressVersion.P2SH:\n    case PoXAddressVersion.P2SHP2WPKH:\n    case PoXAddressVersion.P2SHP2WSH:\n      // P2SHP2WPKH and P2SHP2WSH are treated as P2SH for the sender\n      return BitcoinNetworkVersion[network].P2SH;\n    default:\n      throw new Error('Invalid pox address version');\n  }\n}\n\nfunction _poxAddressToBtcAddress_Values(\n  version: number,\n  hashBytes: Uint8Array,\n  network: StacksNetworkName\n): string {\n  if (!StacksNetworks.includes(network)) throw new Error('Invalid network.');\n\n  switch (version) {\n    case PoXAddressVersion.P2PKH:\n    case PoXAddressVersion.P2SH:\n    case PoXAddressVersion.P2SHP2WPKH:\n    case PoXAddressVersion.P2SHP2WSH: {\n      const btcAddrVersion = legacyHashModeToBtcAddressVersion(version, network);\n      return base58CheckEncode(btcAddrVersion, hashBytes);\n    }\n    case PoXAddressVersion.P2WPKH:\n    case PoXAddressVersion.P2WSH: {\n      const words = bech32.toWords(hashBytes);\n      return bech32.encode(SegwitPrefix[network], [SEGWIT_V0, ...words]);\n    }\n    case PoXAddressVersion.P2TR: {\n      const words = bech32m.toWords(hashBytes);\n      return bech32m.encode(SegwitPrefix[network], [SEGWIT_V1, ...words]);\n    }\n  }\n  throw new Error(`Unexpected address version: ${version}`);\n}\n\nfunction _poxAddressToBtcAddress_ClarityValue(\n  poxAddrClarityValue: ClarityValue,\n  network: StacksNetworkName\n): string {\n  const poxAddr = extractPoxAddressFromClarityValue(poxAddrClarityValue);\n  return _poxAddressToBtcAddress_Values(poxAddr.version, poxAddr.hashBytes, network);\n}\n\n/**\n * Converts a PoX address to a Bitcoin address.\n *\n * @param version - The version of the PoX address (as a single number, not a Uint8array).\n * @param hashBytes - The hash bytes of the PoX address.\n * @param network - The network the PoX address is on.\n * @returns The corresponding Bitcoin address.\n */\nexport function poxAddressToBtcAddress(\n  version: number,\n  hashBytes: Uint8Array,\n  network: StacksNetworkName\n): string;\n/**\n * Converts a PoX address to a Bitcoin address.\n *\n * @param poxAddrClarityValue - The clarity tuple of the PoX address (version and hashbytes).\n * @param network - The network the PoX address is on.\n * @returns The corresponding Bitcoin address.\n */\nexport function poxAddressToBtcAddress(\n  poxAddrClarityValue: ClarityValue,\n  network: StacksNetworkName\n): string;\nexport function poxAddressToBtcAddress(...args: any[]): string {\n  if (typeof args[0] === 'number') return _poxAddressToBtcAddress_Values(args[0], args[1], args[2]);\n  return _poxAddressToBtcAddress_ClarityValue(args[0], args[1]);\n}\n\n// todo: move unwrap to tx package and document\nexport function unwrap<T extends ClarityValue>(optional: OptionalCV<T>) {\n  if (optional.type === ClarityType.OptionalSome) return optional.value;\n  if (optional.type === ClarityType.OptionalNone) return undefined;\n  throw new Error(\"Object is not an 'Optional'\");\n}\n\nexport function unwrapMap<T extends ClarityValue, U>(optional: OptionalCV<T>, map: (t: T) => U) {\n  if (optional.type === ClarityType.OptionalSome) return map(optional.value);\n  if (optional.type === ClarityType.OptionalNone) return undefined;\n  throw new Error(\"Object is not an 'Optional'\");\n}\n\n/** @internal */\nexport function ensurePox2Activated(operationInfo: PoxOperationInfo) {\n  if (operationInfo.period === PoxOperationPeriod.Period1)\n    throw new Error(\n      `PoX-2 has not activated yet (currently in period ${operationInfo.period} of PoX-2 operation)`\n    );\n}\n\n/**\n * @internal\n * Throws if the given PoX address is not a legacy address for PoX-1.\n */\nexport function ensureLegacyBtcAddressForPox1({\n  contract,\n  poxAddress,\n}: {\n  contract: string;\n  poxAddress?: string;\n}) {\n  if (!poxAddress) return;\n  if (contract.endsWith('.pox') && !B58_ADDR_PREFIXES.test(poxAddress)) {\n    throw new Error('PoX-1 requires P2PKH/P2SH/P2SH-P2WPKH/P2SH-P2WSH bitcoin addresses');\n  }\n}\n\n/**\n * @internal\n * Throws if signer args are given for <= PoX-3 or the signer args are missing otherwise.\n */\nexport function ensureSignerArgsReadiness({\n  contract,\n  signerKey,\n  signerSignature,\n  maxAmount,\n  authId,\n}: {\n  contract: string;\n  signerKey?: string;\n  signerSignature?: string;\n  maxAmount?: IntegerType;\n  authId?: IntegerType;\n}) {\n  const hasMaxAmount = typeof maxAmount !== 'undefined';\n  const hasAuthId = typeof authId !== 'undefined';\n  if (/\\.pox(-[2-3])?$/.test(contract)) {\n    // .pox, .pox-2 or .pox-3\n    if (signerKey || signerSignature || hasMaxAmount || hasAuthId) {\n      throw new Error(\n        'PoX-1, PoX-2 and PoX-3 do not accept a `signerKey`, `signerSignature`, `maxAmount` or `authId`'\n      );\n    }\n  } else {\n    // .pox-4 or later\n    if (!signerKey || !hasMaxAmount || typeof authId === 'undefined') {\n      throw new Error(\n        'PoX-4 requires a `signerKey` (buff 33), `maxAmount` (uint), and `authId` (uint)'\n      );\n    }\n  }\n}\n\nexport enum Pox4SignatureTopic {\n  StackStx = 'stack-stx',\n  AggregateCommit = 'agg-commit',\n  AggregateIncrease = 'agg-increase',\n  StackExtend = 'stack-extend',\n  StackIncrease = 'stack-increase',\n}\n\nexport interface Pox4SignatureOptions {\n  /** topic of the signature (i.e. which stacking operation the signature is used for) */\n  topic: `${Pox4SignatureTopic}` | Pox4SignatureTopic;\n  poxAddress: string;\n  /** current reward cycle */\n  rewardCycle: number;\n  /** lock period (in cycles) */\n  period: number;\n  network: StacksNetwork;\n  /** Maximum amount of uSTX that can be locked during this function call */\n  maxAmount: IntegerType;\n  /** Random integer to prevent signature re-use */\n  authId: IntegerType;\n}\n\n/**\n * Generate a signature (`signer-sig` in PoX-4 stacking operations).\n */\nexport function signPox4SignatureHash({\n  topic,\n  poxAddress,\n  rewardCycle,\n  period,\n  network,\n  privateKey,\n  maxAmount,\n  authId,\n}: Pox4SignatureOptions & { privateKey: StacksPrivateKey }) {\n  return signStructuredData({\n    ...pox4SignatureMessage({ topic, poxAddress, rewardCycle, period, network, maxAmount, authId }),\n    privateKey,\n  }).data;\n}\n\n/**\n * Verify a signature (`signer-sig` in PoX-4 stacking operations) matches the given\n * public key (`signer-key`) and the structured data of the operation.\n */\nexport function verifyPox4SignatureHash({\n  topic,\n  poxAddress,\n  rewardCycle,\n  period,\n  network,\n  publicKey,\n  signature,\n  maxAmount,\n  authId,\n}: Pox4SignatureOptions & { publicKey: string; signature: string }) {\n  return verifyMessageSignatureRsv({\n    message: sha256(\n      encodeStructuredData(\n        pox4SignatureMessage({ topic, poxAddress, rewardCycle, period, network, maxAmount, authId })\n      )\n    ),\n    publicKey,\n    signature,\n  });\n}\n\n/**\n * Helper method used to generate SIP018 `message` and `domain` in\n * {@link signPox4SignatureHash} and {@link verifyPox4SignatureHash}.\n */\nexport function pox4SignatureMessage({\n  topic,\n  poxAddress,\n  rewardCycle,\n  period: lockPeriod,\n  network,\n  maxAmount,\n  authId,\n}: Pox4SignatureOptions) {\n  const message = tupleCV({\n    'pox-addr': poxAddressToTuple(poxAddress),\n    'reward-cycle': uintCV(rewardCycle),\n    topic: stringAsciiCV(topic),\n    period: uintCV(lockPeriod),\n    'max-amount': uintCV(maxAmount),\n    'auth-id': uintCV(authId),\n  });\n  const domain = tupleCV({\n    name: stringAsciiCV('pox-4-signer'),\n    version: stringAsciiCV('1.0.0'),\n    'chain-id': uintCV(network.chainId),\n  });\n  return { message, domain };\n}\n","import { IntegerType, hexToBytes, intToBigInt } from '@stacks/common';\nimport { StacksNetwork } from '@stacks/network';\nimport {\n  BurnchainRewardListResponse,\n  BurnchainRewardSlotHolderListResponse,\n  BurnchainRewardsTotal,\n} from '@stacks/stacks-blockchain-api-types';\nimport {\n  AnchorMode,\n  BufferCV,\n  ClarityType,\n  ClarityValue,\n  ContractCallOptions,\n  ContractCallPayload,\n  OptionalCV,\n  PrincipalCV,\n  ResponseErrorCV,\n  StacksPrivateKey,\n  StacksTransaction,\n  TupleCV,\n  TxBroadcastResult,\n  UIntCV,\n  broadcastTransaction,\n  bufferCV,\n  callReadOnlyFunction,\n  cvToString,\n  getFee,\n  makeContractCall,\n  noneCV,\n  principalCV,\n  principalToString,\n  someCV,\n  stringAsciiCV,\n  uintCV,\n  validateStacksAddress,\n} from '@stacks/transactions';\nimport { PoxOperationPeriod, StackingErrors } from './constants';\nimport {\n  Pox4SignatureTopic,\n  ensureLegacyBtcAddressForPox1,\n  ensurePox2Activated,\n  ensureSignerArgsReadiness,\n  poxAddressToTuple,\n  signPox4SignatureHash,\n  unwrap,\n  unwrapMap,\n} from './utils';\n\nexport * from './utils';\n\n/** @internal */\ninterface BaseTxOptions {\n  /** the fee for the transaction */\n  fee?: IntegerType;\n  /** the nonce for the transaction */\n  nonce?: IntegerType;\n  /** the private key (aka `senderkey`) for the transaction */\n  privateKey: string;\n}\n\nexport interface CycleInfo {\n  id: number;\n  min_threshold_ustx: number;\n  stacked_ustx: number;\n  is_pox_active: boolean;\n}\n\nexport interface ContractVersion {\n  contract_id: string;\n  activation_burnchain_block_height: number;\n  first_reward_cycle_id: number;\n}\n\nexport interface PoxInfo {\n  contract_id: string;\n  contract_versions: ContractVersion[];\n  current_burnchain_block_height?: number;\n  first_burnchain_block_height: number;\n  min_amount_ustx: string;\n  next_reward_cycle_in: number;\n  prepare_cycle_length: number;\n  prepare_phase_block_length: number;\n  reward_cycle_id: number;\n  reward_cycle_length: number;\n  reward_phase_block_length: number;\n  reward_slots: number;\n  current_cycle: CycleInfo;\n  next_cycle: CycleInfo & {\n    min_increment_ustx: number;\n    prepare_phase_start_block_height: number;\n    blocks_until_prepare_phase: number;\n    reward_phase_start_block_height: number;\n    blocks_until_reward_phase: number;\n    ustx_until_pox_rejection: number;\n  };\n}\n\nexport type PoxOperationInfo = {\n  /** @deprecated Period isn't needed anymore after 2.1 fork went live */\n  period: PoxOperationPeriod;\n  pox1: { contract_id: string };\n  pox2: ContractVersion;\n  pox3: ContractVersion;\n  pox4: ContractVersion;\n  current: ContractVersion;\n};\n\nexport interface AccountExtendedBalances {\n  stx: {\n    balance: IntegerType;\n    total_sent: IntegerType;\n    total_received: IntegerType;\n    locked: IntegerType;\n    lock_tx_id: string;\n    lock_height: number;\n    burnchain_lock_height: number;\n    burnchain_unlock_height: number;\n  };\n  fungible_tokens: any;\n  non_fungible_tokens: any;\n}\n\nexport type StackerInfo =\n  | {\n      stacked: false;\n    }\n  | {\n      stacked: true;\n      details: {\n        first_reward_cycle: number;\n        lock_period: number;\n        unlock_height: number;\n        pox_address: {\n          version: Uint8Array;\n          hashbytes: Uint8Array;\n        };\n      };\n    };\n\nexport type DelegationInfo =\n  | {\n      delegated: false;\n    }\n  | {\n      delegated: true;\n      details: {\n        amount_micro_stx: bigint;\n        delegated_to: string;\n        pox_address:\n          | {\n              version: Uint8Array;\n              hashbytes: Uint8Array;\n            }\n          | undefined;\n        until_burn_ht: number | undefined;\n      };\n    };\n\nexport interface BlockTimeInfo {\n  mainnet: {\n    target_block_time: number;\n  };\n  testnet: {\n    target_block_time: number;\n  };\n}\n\nexport interface CoreInfo {\n  burn_block_height: number;\n  stable_pox_consensus: string;\n}\n\nexport interface BalanceInfo {\n  balance: string;\n  nonce: number;\n}\n\nexport interface PaginationOptions {\n  limit: number;\n  offset: number;\n}\n\nexport interface RewardsError {\n  error: string;\n}\n\nexport interface RewardSetOptions {\n  contractId: string;\n  rewardCyleId: number;\n  rewardSetIndex: number;\n}\n\nexport interface RewardSetInfo {\n  pox_address: {\n    version: Uint8Array;\n    hashbytes: Uint8Array;\n  };\n  total_ustx: bigint;\n}\n\nexport interface StackingEligibility {\n  eligible: boolean;\n  reason?: string;\n}\n\n/**\n * Lock stx check options\n */\nexport interface CanLockStxOptions {\n  /** the reward Bitcoin address */\n  poxAddress: string;\n  /** number of cycles to lock */\n  cycles: number;\n}\n\n/**\n * Lock stx options\n */\nexport interface LockStxOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** number of cycles to lock */\n  cycles: number;\n  /** the reward Bitcoin address */\n  poxAddress: string;\n  /** number of microstacks to lock */\n  amountMicroStx: IntegerType;\n  /** the burnchain block height to begin lock */\n  burnBlockHeight: number;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\n/**\n * Stack extend stx options\n */\nexport interface StackExtendOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** number of cycles to extend by */\n  extendCycles: number;\n  /** the reward Bitcoin address */\n  poxAddress: string;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\n/**\n * Stack increase stx options\n */\nexport interface StackIncreaseOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** number of ustx to increase by */\n  increaseBy: IntegerType;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\n/**\n * Delegate stx options\n */\nexport interface DelegateStxOptions {\n  /** number of microstacks to delegate */\n  amountMicroStx: IntegerType;\n  /** the STX address of the delegatee */\n  delegateTo: string;\n  /** the burnchain block height after which delegation is revoked */\n  untilBurnBlockHeight?: number;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress?: string;\n  /** private key to sign transaction */\n  privateKey: string;\n}\n\n/**\n * Delegate stack stx options\n */\nexport interface DelegateStackStxOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** the STX address of the delegator */\n  stacker: string;\n  /** number of microstacks to lock */\n  amountMicroStx: IntegerType;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress: string;\n  /** the burnchain block height to begin lock */\n  burnBlockHeight: number;\n  /** number of cycles to lock */\n  cycles: number;\n}\n\n/**\n * Delegate stack extend options\n */\nexport interface DelegateStackExtendOptions {\n  /** the STX address of the delegator */\n  stacker: string;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress: string;\n  /** number of cycles to extend by */\n  extendCount: number;\n  /** private key to sign transaction */\n  privateKey: string;\n}\n\n/**\n * Delegate stack increase options\n */\nexport interface DelegateStackIncreaseOptions {\n  /** the STX address of the delegator */\n  stacker: string;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress: string;\n  /** number of ustx to increase by */\n  increaseBy: IntegerType;\n  /** private key to sign transaction */\n  privateKey: string;\n  /** nonce for the transaction */\n  nonce?: IntegerType;\n}\n\nexport interface StackAggregationCommitOptions {\n  poxAddress: string;\n  rewardCycle: number;\n  privateKey: string;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\nexport interface StackAggregationIncreaseOptions {\n  poxAddress: string;\n  rewardCycle: number;\n  rewardIndex: number;\n  privateKey: string;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\nexport class StackingClient {\n  constructor(\n    public address: string,\n    public network: StacksNetwork\n  ) {}\n\n  /**\n   * Get stacks node info\n   *\n   * @returns {Promise<CoreInfo>} that resolves to a CoreInfo response if the operation succeeds\n   */\n  async getCoreInfo(): Promise<CoreInfo> {\n    const url = this.network.getInfoUrl();\n    return this.network.fetchFn(url).then(res => res.json());\n  }\n\n  /**\n   * Get stacks node pox info\n   *\n   * @returns {Promise<PoxInfo>} that resolves to a PoxInfo response if the operation succeeds\n   */\n  async getPoxInfo(): Promise<PoxInfo> {\n    const url = this.network.getPoxInfoUrl();\n    return this.network.fetchFn(url).then(res => res.json());\n  }\n\n  /**\n   * Get stacks node target block time\n   *\n   * @returns {Promise<number>} resolves to a number if the operation succeeds\n   */\n  async getTargetBlockTime(): Promise<number> {\n    const url = this.network.getBlockTimeInfoUrl();\n    const res = await this.network.fetchFn(url).then(res => res.json());\n\n    if (this.network.isMainnet()) {\n      return res.mainnet.target_block_time;\n    } else {\n      return res.testnet.target_block_time;\n    }\n  }\n\n  async getAccountStatus(): Promise<any> {\n    const url = this.network.getAccountApiUrl(this.address);\n    return this.network.fetchFn(url).then(res => res.json());\n  }\n\n  /**\n   * Get account balance\n   * @returns {Promise<bigint>} resolves to a bigint if the operation succeeds\n   */\n  async getAccountBalance(): Promise<bigint> {\n    return this.getAccountStatus().then(res => {\n      return BigInt(res.balance);\n    });\n  }\n\n  /**\n   * Get extended account balances\n   * @returns {Promise<AccountExtendedBalances>} resolves to an AccountExtendedBalances response if the operation succeeds\n   */\n  async getAccountExtendedBalances(): Promise<AccountExtendedBalances> {\n    const url = this.network.getAccountExtendedBalancesApiUrl(this.address);\n    return this.network.fetchFn(url).then(res => res.json());\n  }\n\n  /**\n   * Get account balance of locked tokens\n   * @returns {Promise<bigint>} resolves to a bigint if the operation succeeds\n   */\n  async getAccountBalanceLocked(): Promise<bigint> {\n    return this.getAccountStatus().then(res => BigInt(res.locked));\n  }\n\n  /**\n   * Get reward cycle duration in seconds\n   * @returns {Promise<number>} resolves to a number if the operation succeeds\n   */\n  async getCycleDuration(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = await this.getTargetBlockTime();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise]).then(\n      ([poxInfo, targetBlockTime]) => {\n        return poxInfo.reward_cycle_length * targetBlockTime;\n      }\n    );\n  }\n\n  /**\n   * Get the total burnchain rewards total for the set address\n   * @returns {Promise<TotalRewardsResponse | RewardsError>} that resolves to TotalRewardsResponse or RewardsError\n   */\n  async getRewardsTotalForBtcAddress(): Promise<BurnchainRewardsTotal | RewardsError> {\n    const url = this.network.getRewardsTotalUrl(this.address);\n    return this.network.fetchFn(url).then(res => res.json());\n  }\n\n  /**\n   * Get burnchain rewards for the set address\n   * @returns {Promise<RewardsResponse | RewardsError>} that resolves to RewardsResponse or RewardsError\n   */\n  async getRewardsForBtcAddress(\n    options?: PaginationOptions\n  ): Promise<BurnchainRewardListResponse | RewardsError> {\n    const url = `${this.network.getRewardsUrl(this.address, options)}`;\n    return this.network.fetchFn(url).then(res => res.json());\n  }\n\n  /**\n   * Get burnchain rewards holders for the set address\n   * @returns {Promise<RewardHoldersResponse | RewardsError>} that resolves to RewardHoldersResponse or RewardsError\n   */\n  async getRewardHoldersForBtcAddress(\n    options?: PaginationOptions\n  ): Promise<BurnchainRewardSlotHolderListResponse | RewardsError> {\n    const url = `${this.network.getRewardHoldersUrl(this.address, options)}`;\n    return this.network.fetchFn(url).then(res => res.json());\n  }\n\n  /**\n   * Get PoX address from reward set by index\n   * @returns {Promise<RewardSetInfo | undefined>} that resolves to RewardSetInfo if the entry exists\n   */\n  async getRewardSet(options: RewardSetOptions): Promise<RewardSetInfo | undefined> {\n    const [contractAddress, contractName] = this.parseContractId(options?.contractId);\n    const result = await callReadOnlyFunction({\n      network: this.network,\n      senderAddress: this.address,\n      contractAddress,\n      contractName,\n      functionArgs: [uintCV(options.rewardCyleId), uintCV(options.rewardSetIndex)],\n      functionName: 'get-reward-set-pox-address',\n    });\n\n    return unwrapMap(result as OptionalCV<TupleCV>, tuple => ({\n      pox_address: {\n        version: ((tuple.data['pox-addr'] as TupleCV).data['version'] as BufferCV).buffer,\n        hashbytes: ((tuple.data['pox-addr'] as TupleCV).data['hashbytes'] as BufferCV).buffer,\n      },\n      total_ustx: (tuple.data['total-ustx'] as UIntCV).value,\n    }));\n  }\n\n  /**\n   * Get number of seconds until next reward cycle\n   * @returns {Promise<number>} resolves to a number if the operation succeeds\n   *\n   * See also:\n   * - {@link getSecondsUntilStackingDeadline}\n   */\n  async getSecondsUntilNextCycle(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = this.getTargetBlockTime();\n    const coreInfoPromise = this.getCoreInfo();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise, coreInfoPromise]).then(\n      ([poxInfo, targetBlockTime, coreInfo]) => {\n        const blocksToNextCycle =\n          poxInfo.reward_cycle_length -\n          ((coreInfo.burn_block_height - poxInfo.first_burnchain_block_height) %\n            poxInfo.reward_cycle_length);\n        return blocksToNextCycle * targetBlockTime;\n      }\n    );\n  }\n\n  /**\n   * Get number of seconds until the end of the stacking deadline.\n   * This is the estimated time stackers have to submit their stacking\n   * transactions to be included in the upcoming reward cycle.\n   * @returns {Promise<number>} resolves to a number of seconds if the operation succeeds.\n   * **⚠️ Attention**: The returned number of seconds can be negative if the deadline has passed and the prepare phase has started.\n   *\n   * See also:\n   * - {@link getSecondsUntilNextCycle}\n   */\n  async getSecondsUntilStackingDeadline(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = this.getTargetBlockTime();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise]).then(\n      ([poxInfo, targetBlockTime]) =>\n        poxInfo.next_cycle.blocks_until_prepare_phase * targetBlockTime\n    );\n  }\n\n  /**\n   * Get information on current PoX operation\n   *\n   * Periods:\n   * - Period 1: This is before the 2.1 fork.\n   * - Period 2: This is after the 2.1 fork, but before cycle (N+1).\n   * - Period 3: This is after cycle (N+1) has begun. Original PoX contract state will no longer have any impact on reward sets, account lock status, etc.\n   *\n   * @returns {Promise<PoxOperationInfo>} that resolves to PoX operation info\n   */\n  async getPoxOperationInfo(poxInfo?: PoxInfo): Promise<PoxOperationInfo> {\n    poxInfo = poxInfo ?? (await this.getPoxInfo());\n\n    const poxContractVersions = [...poxInfo.contract_versions].sort(\n      (a, b) => a.activation_burnchain_block_height - b.activation_burnchain_block_height\n    ); //  by activation height ASC (earliest first)\n    const [pox1, pox2, pox3, pox4] = poxContractVersions;\n\n    const activatedPoxs = poxContractVersions.filter(\n      (c: ContractVersion) =>\n        (poxInfo?.current_burnchain_block_height as number) >= c.activation_burnchain_block_height\n    );\n    const current = activatedPoxs[activatedPoxs.length - 1];\n\n    return { period: PoxOperationPeriod.Period3, pox1, pox2, pox3, pox4, current };\n  }\n\n  /**\n   * Check if account has minimum require amount of Stacks for stacking\n   * @returns {Promise<boolean>} that resolves to a bool if the operation succeeds\n   */\n  async hasMinimumStx(): Promise<boolean> {\n    const balance = await this.getAccountBalance();\n    const min = BigInt((await this.getPoxInfo()).min_amount_ustx);\n    return balance >= min;\n  }\n\n  /**\n   * readonly `can-stack-stx`\n   *\n   * Check if account can lock stx\n   * @param {CanLockStxOptions} options - a required lock STX options object\n   * @returns {Promise<StackingEligibility>} that resolves to a StackingEligibility object if the operation succeeds\n   */\n  async canStack({ poxAddress, cycles }: CanLockStxOptions): Promise<StackingEligibility> {\n    const balancePromise: Promise<bigint> = this.getAccountBalance();\n    const poxInfoPromise = this.getPoxInfo();\n\n    return Promise.all([balancePromise, poxInfoPromise])\n      .then(([balance, poxInfo]) => {\n        const address = poxAddressToTuple(poxAddress);\n        const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n\n        return callReadOnlyFunction({\n          network: this.network,\n          contractName,\n          contractAddress,\n          functionName: 'can-stack-stx',\n          senderAddress: this.address,\n          functionArgs: [\n            address,\n            uintCV(balance.toString()),\n            uintCV(poxInfo.reward_cycle_id),\n            uintCV(cycles.toString()),\n          ],\n        });\n      })\n      .then((responseCV: ClarityValue) => {\n        if (responseCV.type === ClarityType.ResponseOk) {\n          return {\n            eligible: true,\n          };\n        } else {\n          const errorCV = responseCV as ResponseErrorCV;\n          return {\n            eligible: false,\n            reason: StackingErrors[+cvToString(errorCV.value)],\n          };\n        }\n      });\n  }\n\n  /**\n   * `stack-stx`\n   *\n   * Generate and broadcast a stacking transaction to lock STX\n   * @param {LockStxOptions} options - a required lock STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stack({\n    amountMicroStx,\n    poxAddress,\n    cycles,\n    burnBlockHeight,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: LockStxOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    const contract = await this.getStackingContract(poxOperationInfo);\n\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackOptions({\n      contract,\n      amountMicroStx,\n      cycles,\n      poxAddress,\n      burnBlockHeight,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * `stack-extend`\n   *\n   * Generate and broadcast a stacking transaction to extend locked STX (`pox-2.stack-extend`)\n   * @category PoX-2\n   * @param {StackExtendOptions} - a required extend STX options object\n   * @returns a broadcasted txid if the operation succeeds\n   */\n  async stackExtend({\n    extendCycles,\n    poxAddress,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackExtendOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    ensurePox2Activated(poxOperationInfo);\n    ensureSignerArgsReadiness({\n      contract: poxInfo.contract_id,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n\n    const callOptions = this.getStackExtendOptions({\n      contract: poxInfo.contract_id,\n      extendCycles,\n      poxAddress,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * Generate and broadcast a stacking transaction to increase locked STX (`pox-2.stack-increase`)\n   * @category PoX-2\n   * @param {StackIncreaseOptions} - a required increase STX options object\n   * @returns a broadcasted txid if the operation succeeds\n   */\n  async stackIncrease({\n    increaseBy,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackIncreaseOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n    ensurePox2Activated(poxOperationInfo);\n    ensureSignerArgsReadiness({\n      contract: poxInfo.contract_id,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n\n    const callOptions = this.getStackIncreaseOptions({\n      contract: poxInfo.contract_id,\n      increaseBy,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * `delegate-stx`\n   *\n   * As a delegatee, generate and broadcast a transaction to create a delegation relationship\n   * @param {DelegateStxOptions} options - a required delegate STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStx({\n    amountMicroStx,\n    delegateTo,\n    untilBurnBlockHeight,\n    poxAddress,\n    ...txOptions\n  }: // todo: should we provide manual contract definitions? (for users to choose which contract to use)\n  DelegateStxOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    const contract = await this.getStackingContract(poxOperationInfo);\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n\n    const callOptions = this.getDelegateOptions({\n      contract,\n      amountMicroStx,\n      delegateTo,\n      untilBurnBlockHeight,\n      poxAddress,\n    });\n\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * `delegate-stack-stx`\n   *\n   * As a delegator, generate and broadcast transactions to stack for multiple delegatees. This will lock up tokens owned by the delegatees.\n   * @param {DelegateStackStxOptions} options - a required delegate stack STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStackStx({\n    stacker,\n    amountMicroStx,\n    poxAddress,\n    burnBlockHeight,\n    cycles,\n    ...txOptions\n  }: DelegateStackStxOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    const contract = await this.getStackingContract(poxOperationInfo);\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n\n    const callOptions = this.getDelegateStackOptions({\n      contract,\n      stacker,\n      amountMicroStx,\n      poxAddress,\n      burnBlockHeight,\n      cycles,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * `delegate-stack-extend`\n   *\n   * As a delegator, generate and broadcast transactions to extend stack for multiple delegatees.\n   * @category PoX-2\n   * @param {DelegateStackExtendOptions} options - a required delegate stack extend STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStackExtend({\n    stacker,\n    poxAddress,\n    extendCount,\n    ...txOptions\n  }: DelegateStackExtendOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const callOptions = this.getDelegateStackExtendOptions({\n      contract,\n      stacker,\n      poxAddress,\n      extendCount,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegator, generate and broadcast transactions to stack increase for multiple delegatees.\n   * @category PoX-2\n   * @param {DelegateStackIncreaseOptions} - a required delegate stack increase STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStackIncrease({\n    stacker,\n    poxAddress,\n    increaseBy,\n    ...txOptions\n  }: DelegateStackIncreaseOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n    ensurePox2Activated(poxOperationInfo);\n\n    const callOptions = this.getDelegateStackIncreaseOptions({\n      contract: poxInfo.contract_id,\n      stacker,\n      poxAddress,\n      increaseBy,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegator, generate and broadcast a transaction to commit partially committed delegatee tokens\n   * @param {StackAggregationCommitOptions} options - a required stack aggregation commit options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stackAggregationCommit({\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackAggregationCommitOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const contract = await this.getStackingContract();\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackAggregationCommitOptions({\n      contract,\n      poxAddress,\n      rewardCycle,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegator, generate and broadcast a transaction to commit partially committed delegatee tokens\n   *\n   * Commit partially stacked STX and allocate a new PoX reward address slot.\n   *   This allows a stacker/delegate to lock fewer STX than the minimal threshold in multiple transactions,\n   *   so long as: 1. The pox-addr is the same.\n   *               2. This \"commit\" transaction is called _before_ the PoX anchor block.\n   *   This ensures that each entry in the reward set returned to the stacks-node is greater than the threshold,\n   *   but does not require it be all locked up within a single transaction\n   *\n   * `stack-aggregation-commit-indexed` returns (ok uint) on success, where the given uint is the reward address's index in the list of reward\n   * addresses allocated in this reward cycle. This index can then be passed to `stack-aggregation-increase`\n   * to later increment the STX this PoX address represents, in amounts less than the stacking minimum.\n   *\n   * @category PoX-2\n   * @param {StackAggregationCommitOptions} options - a required stack aggregation commit options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stackAggregationCommitIndexed({\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackAggregationCommitOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const contract = await this.getStackingContract();\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackAggregationCommitOptionsIndexed({\n      contract,\n      poxAddress,\n      rewardCycle,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegator, generate and broadcast a transaction to increase partial commitment committed delegatee tokens\n   * @param {StackAggregationIncreaseOptions} options - a required stack aggregation increase options object\n   * @category PoX-2\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stackAggregationIncrease({\n    poxAddress,\n    rewardCycle,\n    rewardIndex,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackAggregationIncreaseOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    // todo: deprecate this method in favor of Indexed as soon as PoX-2 is live\n    const contract = await this.getStackingContract();\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackAggregationIncreaseOptions({\n      contract,\n      poxAddress,\n      rewardCycle,\n      rewardCycleIndex: rewardIndex,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegatee, generate and broadcast a transaction to terminate the delegation relationship\n   * @param {string} privateKey - the private key to be used for the revoke call\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async revokeDelegateStx(privateKey: string): Promise<TxBroadcastResult>;\n  /**\n   * As a delegatee, generate and broadcast a transaction to terminate the delegation relationship\n   * @param {BaseTxOptions} txOptions - the private key, fee, and nonce to be used for the revoke call\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async revokeDelegateStx(txOptions: BaseTxOptions): Promise<TxBroadcastResult>;\n  async revokeDelegateStx(arg: string | BaseTxOptions): Promise<TxBroadcastResult> {\n    if (typeof arg === 'string') arg = { privateKey: arg };\n\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const callOptions = this.getRevokeDelegateStxOptions(contract);\n\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(arg),\n    });\n\n    return broadcastTransaction(tx, callOptions.network as StacksNetwork);\n  }\n\n  getStackOptions({\n    amountMicroStx,\n    poxAddress,\n    cycles,\n    contract,\n    burnBlockHeight,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    cycles: number;\n    poxAddress: string;\n    amountMicroStx: IntegerType;\n    contract: string;\n    burnBlockHeight: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [\n      uintCV(amountMicroStx),\n      address,\n      uintCV(burnBlockHeight),\n      uintCV(cycles),\n    ] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-stx',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  getStackExtendOptions({\n    extendCycles,\n    poxAddress,\n    contract,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    extendCycles: number;\n    poxAddress: string;\n    contract: string;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [uintCV(extendCycles), address] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-extend',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  getStackIncreaseOptions({\n    increaseBy,\n    contract,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    increaseBy: IntegerType;\n    contract: string;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [uintCV(increaseBy)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-increase',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  getDelegateOptions({\n    contract,\n    amountMicroStx,\n    delegateTo,\n    untilBurnBlockHeight,\n    poxAddress,\n  }: {\n    contract: string;\n    amountMicroStx: IntegerType;\n    delegateTo: string;\n    untilBurnBlockHeight?: number;\n    poxAddress?: string;\n  }) {\n    const address = poxAddress ? someCV(poxAddressToTuple(poxAddress)) : noneCV();\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stx',\n      functionArgs: [\n        uintCV(amountMicroStx),\n        principalCV(delegateTo),\n        untilBurnBlockHeight ? someCV(uintCV(untilBurnBlockHeight)) : noneCV(),\n        address,\n      ],\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  getDelegateStackOptions({\n    contract,\n    stacker,\n    amountMicroStx,\n    poxAddress,\n    burnBlockHeight,\n    cycles,\n  }: {\n    contract: string;\n    stacker: string;\n    amountMicroStx: IntegerType;\n    poxAddress: string;\n    burnBlockHeight: number;\n    cycles: number;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stack-stx',\n      functionArgs: [\n        principalCV(stacker),\n        uintCV(amountMicroStx),\n        address,\n        uintCV(burnBlockHeight),\n        uintCV(cycles),\n      ],\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n\n    return callOptions;\n  }\n\n  getDelegateStackExtendOptions({\n    contract,\n    stacker,\n    poxAddress,\n    extendCount,\n  }: {\n    contract: string;\n    stacker: string;\n    poxAddress: string;\n    extendCount: number;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stack-extend',\n      functionArgs: [principalCV(stacker), address, uintCV(extendCount)],\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n\n    return callOptions;\n  }\n\n  getDelegateStackIncreaseOptions({\n    contract,\n    stacker,\n    poxAddress,\n    increaseBy,\n  }: {\n    contract: string;\n    stacker: string;\n    poxAddress: string;\n    increaseBy: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stack-increase',\n      functionArgs: [principalCV(stacker), address, uintCV(increaseBy)],\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n\n    return callOptions;\n  }\n\n  getStackAggregationCommitOptions({\n    contract,\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    contract: string;\n    poxAddress: string;\n    rewardCycle: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [address, uintCV(rewardCycle)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-aggregation-commit',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  getStackAggregationIncreaseOptions({\n    contract,\n    poxAddress,\n    rewardCycle,\n    rewardCycleIndex,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    contract: string;\n    poxAddress: string;\n    rewardCycle: number;\n    rewardCycleIndex: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [address, uintCV(rewardCycle), uintCV(rewardCycleIndex)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-aggregation-increase',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  getStackAggregationCommitOptionsIndexed({\n    contract,\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    contract: string;\n    poxAddress: string;\n    rewardCycle: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [address, uintCV(rewardCycle)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-aggregation-commit-indexed',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  getRevokeDelegateStxOptions(contract: string) {\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const callOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'revoke-delegate-stx',\n      functionArgs: [],\n      validateWithAbi: true,\n      network: this.network,\n      anchorMode: AnchorMode.Any,\n    };\n    return callOptions;\n  }\n\n  /**\n   * Check stacking status\n   *\n   * @returns {Promise<StackerInfo>} that resolves to a StackerInfo object if the operation succeeds\n   */\n  async getStatus(): Promise<StackerInfo> {\n    const poxInfo = await this.getPoxInfo();\n    const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n    const account = await this.getAccountStatus();\n    const functionName = 'get-stacker-info';\n\n    return callReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      senderAddress: this.address,\n      functionArgs: [principalCV(this.address)],\n      network: this.network,\n    }).then((responseCV: ClarityValue) => {\n      if (responseCV.type === ClarityType.OptionalSome) {\n        const someCV = responseCV;\n        const tupleCV: TupleCV = someCV.value as TupleCV;\n        const poxAddress: TupleCV = tupleCV.data['pox-addr'] as TupleCV;\n        const firstRewardCycle: UIntCV = tupleCV.data['first-reward-cycle'] as UIntCV;\n        const lockPeriod: UIntCV = tupleCV.data['lock-period'] as UIntCV;\n        const version: BufferCV = poxAddress.data['version'] as BufferCV;\n        const hashbytes: BufferCV = poxAddress.data['hashbytes'] as BufferCV;\n\n        return {\n          stacked: true,\n          details: {\n            first_reward_cycle: Number(firstRewardCycle.value),\n            lock_period: Number(lockPeriod.value),\n            unlock_height: account.unlock_height,\n            pox_address: {\n              version: version.buffer,\n              hashbytes: hashbytes.buffer,\n            },\n          },\n        };\n      } else if (responseCV.type === ClarityType.OptionalNone) {\n        return {\n          stacked: false,\n        };\n      } else {\n        throw new Error(`Error fetching stacker info`);\n      }\n    });\n  }\n\n  /**\n   * Check delegation status\n   *\n   * @returns {Promise<DelegationInfo>} that resolves to a DelegationInfo object if the operation succeeds\n   */\n  async getDelegationStatus(): Promise<DelegationInfo> {\n    const poxInfo = await this.getPoxInfo();\n    const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n    const functionName = 'get-delegation-info';\n\n    return callReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      senderAddress: this.address,\n      functionArgs: [principalCV(this.address)],\n      network: this.network,\n    }).then((responseCV: ClarityValue) => {\n      if (responseCV.type === ClarityType.OptionalSome) {\n        const tupleCV = responseCV.value as TupleCV;\n        const amountMicroStx = tupleCV.data['amount-ustx'] as UIntCV;\n        const delegatedTo = tupleCV.data['delegated-to'] as PrincipalCV;\n\n        const poxAddress = unwrapMap(tupleCV.data['pox-addr'] as OptionalCV<TupleCV>, tuple => ({\n          version: (tuple.data['version'] as BufferCV).buffer,\n          hashbytes: (tuple.data['hashbytes'] as BufferCV).buffer,\n        }));\n        const untilBurnBlockHeight = unwrap(tupleCV.data['until-burn-ht'] as OptionalCV<UIntCV>);\n\n        return {\n          delegated: true,\n          details: {\n            amount_micro_stx: BigInt(amountMicroStx.value),\n            delegated_to: principalToString(delegatedTo),\n            pox_address: poxAddress,\n            until_burn_ht: untilBurnBlockHeight ? Number(untilBurnBlockHeight.value) : undefined,\n          },\n        };\n      } else if (responseCV.type === ClarityType.OptionalNone) {\n        return {\n          delegated: false,\n        };\n      } else {\n        throw new Error(`Error fetching delegation info`);\n      }\n    });\n  }\n\n  /**\n   * Call the `verify-signer-key-sig` read-only function on the PoX contract.\n   * @returns (async) a boolean indicating if the signature is valid\n   */\n  async verifySignerKeySignature({\n    topic,\n    poxAddress,\n    rewardCycle,\n    period,\n    signerSignature,\n    signerKey,\n    amount,\n    maxAmount,\n    authId,\n  }: {\n    topic: string;\n    poxAddress: string;\n    rewardCycle: number;\n    period: number;\n    signerSignature?: string;\n    signerKey: string;\n    amount: IntegerType;\n    maxAmount: IntegerType;\n    authId: IntegerType;\n  }): Promise<boolean> {\n    const poxInfo = await this.getPoxInfo();\n\n    const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n    const functionName = 'verify-signer-key-sig';\n\n    const functionArgs = [\n      poxAddressToTuple(poxAddress),\n      uintCV(rewardCycle),\n      stringAsciiCV(topic),\n      uintCV(period),\n      signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV(),\n      bufferCV(hexToBytes(signerKey)),\n      uintCV(amount),\n      uintCV(maxAmount),\n      uintCV(authId),\n    ];\n\n    return callReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      functionArgs,\n      network: this.network,\n      senderAddress: this.address,\n    }).then(responseCV => responseCV.type === ClarityType.ResponseOk);\n  }\n\n  /**\n   * @returns {Promise<string>} that resolves to the contract id (address and name) to use for stacking\n   */\n  async getStackingContract(poxOperationInfo?: PoxOperationInfo): Promise<string> {\n    poxOperationInfo = poxOperationInfo ?? (await this.getPoxOperationInfo());\n    switch (poxOperationInfo.period) {\n      case PoxOperationPeriod.Period1:\n        return poxOperationInfo.pox1.contract_id;\n      case PoxOperationPeriod.Period2a:\n      case PoxOperationPeriod.Period2b:\n        // in the 2.1 fork we can always stack to PoX-2\n        return poxOperationInfo.pox2.contract_id;\n      case PoxOperationPeriod.Period3:\n      default:\n        return poxOperationInfo.current.contract_id;\n    }\n  }\n\n  /**\n   * Adjust microstacks amount for locking after taking into account transaction fees\n   *\n   * @returns {StacksTransaction} that resolves to a transaction object if the operation succeeds\n   */\n  modifyLockTxFee({ tx, amountMicroStx }: { tx: StacksTransaction; amountMicroStx: IntegerType }) {\n    const fee = getFee(tx.auth);\n    (tx.payload as ContractCallPayload).functionArgs[0] = uintCV(\n      intToBigInt(amountMicroStx, false) - fee\n    );\n    return tx;\n  }\n\n  /**\n   * Parses a contract identifier and ensures it is formatted correctly\n   *\n   * @returns {Array<string>} a contract address and name\n   */\n  parseContractId(contract: string): string[] {\n    // todo: move this function to a standalone utility, and @ignore deprecate it here\n    const parts = contract.split('.');\n\n    if (parts.length === 2 && validateStacksAddress(parts[0]) && parts[1].startsWith('pox')) {\n      return parts;\n    }\n\n    throw new Error('Stacking contract ID is malformed');\n  }\n\n  /**\n   * Generates a `signer-sig` string for the current PoX contract.\n   */\n  signPoxSignature({\n    topic,\n    poxAddress,\n    rewardCycle,\n    period,\n    signerPrivateKey,\n    authId,\n    maxAmount,\n  }: {\n    topic: `${Pox4SignatureTopic}`;\n    poxAddress: string;\n    rewardCycle: number;\n    period: number;\n    signerPrivateKey: StacksPrivateKey;\n    maxAmount: IntegerType;\n    authId: IntegerType;\n  }) {\n    // todo: in the future add logic to determine if a later version of pox\n    // needs a different domain and thus use a different `signPox4SignatureHash`\n    return signPox4SignatureHash({\n      topic,\n      poxAddress,\n      rewardCycle,\n      period,\n      network: this.network,\n      privateKey: signerPrivateKey,\n      maxAmount,\n      authId,\n    });\n  }\n}\n\n/** @ignore Rename `privateKey` to `senderKey`, for backwards compatibility */\nfunction renamePrivateKey(txOptions: BaseTxOptions) {\n  // @ts-ignore\n  txOptions.senderKey = txOptions.privateKey;\n  // @ts-ignore\n  delete txOptions.privateKey;\n  return txOptions as any as {\n    fee?: IntegerType;\n    nonce?: IntegerType;\n    senderKey: string;\n  };\n}\n"],"names":["root","factory","exports","module","define","amd","this","leafPrototypes","getProto","number","n","Number","isSafeInteger","Error","bool","b","bytes","lengths","Uint8Array","TypeError","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","Object","defineProperty","value","assert","SHA2","_assert_js_1","utils_js_1","Hash","constructor","padOffset","isLE","super","pos","buffer","view","createView","update","data","default","len","toBytes","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","i","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","crypto","node","undefined","web","self","sha224","sha256","_sha2_js_1","Maj","a","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","SHA224","wrapConstructor","randomBytes","wrapConstructorWithOpts","checkOpts","concatBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","u32","u8","crypto_1","arr","byteLength","floor","DataView","word","shift","hexes","Array","from","v","toString","padStart","str","TextEncoder","encode","uint8a","hex","array","j","hexByte","byte","parseInt","isNaN","async","iters","tick","cb","ts","Date","now","diff","arrays","every","reduce","result","pad","clone","defaults","opts","obj","prototype","call","assign","hashConstructor","hashC","message","tmp","hashCons","msg","bytesLength","getRandomValues","ALPHABET","BASE_MAP","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","isArray","pbegin","pend","b58","it1","it2","repeat","decode","string","lookup","revLookup","code","basex","c32ToB58","b58ToC32","c32addressDecode","c32address","versions","checksum_1","base58check","utils_1","mainnet","p2pkh","p2sh","testnet","ADDR_BITCOIN_TO_STACKS","ADDR_STACKS_TO_BITCOIN","version","hash160hex","match","c32checkEncode","c32addr","c32checkDecode","b58check","addrInfo","hash160String","addrVersion","prefix","stacksVersion","c32string","bitcoinVersion","sha256_1","dataBytes","prefixBytes","checksum","forEach","check","index","encoding_1","c32checksum","dataHex","dataHash","toLowerCase","versionHex","checksumHex","c32str","c32encode","c32","c32data","c32normalize","c32decode","versionChar","indexOf","substring","c32input","toUpperCase","replace","inputHex","minLength","currentCode","nextCode","nextBits","nextLowBits","curC32Digit","unshift","C32leadingZeros","zeroPrefix","TextDecoder","numLeadingZeroBytesInHex","count","join","numLeadingZeroBytes","carryBits","currentValue","currentHexDigit","hexLeadingZeros","hexStr","address_1","enumerable","support","Symbol","Blob","e","viewClasses","isArrayBufferView","normalizeName","name","String","test","normalizeValue","iteratorFor","items","iterator","next","done","Headers","headers","map","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","type","rejected","arrayBuffer","then","text","readAsText","chars","fromCharCode","readArrayBufferAsText","formData","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","methods","Request","input","options","method","upcased","url","credentials","mode","signal","referrer","form","trim","split","decodeURIComponent","Response","bodyInit","status","ok","statusText","response","redirectStatuses","redirect","RangeError","location","DOMException","err","stack","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","line","parts","key","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","g","freeSelf","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","func","transform","arg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","getPrototype","getPrototypeOf","objectCreate","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","tag","getTag","isFunc","copy","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","pop","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","getter","__esModule","d","t","ns","r","def","current","definition","o","globalThis","window","prop","toStringTag","nmd","paths","children","intToBytes","signed","parsedValue","isInteger","startsWith","SyntaxError","bn","width","nthBit","fromTwos","with0x","hexToBigInt","intToHex","integer","lengthBytes","_","u","paddedHex","asciiToBytes","byteArray","bytesToAscii","apply","isNotOctet","octet","octetsToBytes","numbers","some","elements","ChainID","PeerNetworkID","TransactionVersion","defaultFetchOpts","referrerPolicy","fetchWrapper","fetchOpts","createFetchFn","args","fetchLib","middlewares","argsForCreateFetchFn","fetchParams","middleware","pre","post","StacksNetworks","networkConfig","Mainnet","chainId","bnsLookupUrl","broadcastEndpoint","transferFeeEstimateEndpoint","transactionFeeEstimateEndpoint","accountEndpoint","contractAbiEndpoint","readOnlyFunctionCallEndpoint","isMainnet","getBroadcastApiUrl","coreApiUrl","getTransferFeeEstimateApiUrl","getTransactionFeeEstimateApiUrl","getAccountApiUrl","address","getAccountExtendedBalancesApiUrl","getAbiApiUrl","contract","getReadOnlyFunctionCallApiUrl","contractAddress","contractName","functionName","encodeURIComponent","getInfoUrl","getBlockTimeInfoUrl","getPoxInfoUrl","getRewardsUrl","limit","getRewardsTotalUrl","getRewardHoldersUrl","getStackerInfoUrl","getDataVarUrl","dataVarName","getMapEntryUrl","mapName","fetchFn","getNameInfo","fullyQualifiedName","nameLookupURL","resp","nameInfo","fromName","networkName","StacksDevnet","StacksMocknet","fromNameOrNetwork","network","Testnet","writeUInt8","destination","writeUInt32BE","writeUInt32LE","DEFAULT_CHAIN_ID","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","CLARITY_INT_BYTE_SIZE","AnchorMode","ClarityVersion","PayloadType","StacksMessageType","AnchorModeNames","AnchorModeMap","OnChainOnly","OffChainOnly","Any","AssetType","TxRejectedReason","PostConditionPrincipalID","NonFungibleConditionCode","FungibleConditionCode","PubKeyEncoding","AddressVersion","AddressHashMode","AuthType","PostConditionType","PostConditionMode","Rho","Id","Pi","idxL","idxR","k","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","f","group","y","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","U32_MASK64","fromBig","le","lst","Ah","Al","s","Bh","Bl","Cl","low","Ch","Dl","Dh","Eh","El","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512_256","_0n","_1n","_2n","_3n","_8n","CURVE","freeze","P","Gx","Gy","beta","divNearest","endo","splitScalar","a1","b1","a2","b2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","JacobianPoint","fromAffine","p","equals","ZERO","toAffineBatch","points","toInv","nums","scratch","inverted","invert","acc","num","reduceRight","invertBatch","toAffine","normalizeZ","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","k1p","k2p","precomputeWindow","W","windows","base","wNAF","affinePoint","_WINDOW_SIZE","precomputes","pointPrecomputes","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","multiply","point","fake","f1p","f2p","invZ","is0","iz1","iz2","iz3","ax","ay","zz","condition","item","neg","_setWindowSize","delete","hasEvenY","fromCompressedHex","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","assertValidity","fromUncompressedHex","fromHex","ensureBytes","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","signature","recovery","normalizeSignature","truncateHash","radj","rinv","u1","u2","R","numTo32bStr","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","toHex","toHexX","toRawX","left","aP","bQ","sum","sliceDER","parseDERInt","Signature","fromCompact","hexToNumber","fromDER","sBytes","rBytesLeft","parseDERSignature","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","toCompactHex","POW_2_256","numTo32b","power","modulo","q","m","truncateOnly","delta","bits2int_2","_sha256Sync","_hmacSha256Sync","HmacDrbg","qByteLen","counter","hmac","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","lowS","kinv","sig","bits2int","bits2octets","z1","z2","int2octets","vopts","strict","publicKey","normalizePublicKey","sinv","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","randomPrivateKey","precompute","cached","messages","subtle","createHash","ckey","importKey","sign","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","_JacobianPoint","defineProperties","configurable","val","HMAC","_key","iHash","oHash","COORDINATE_BYTES","parseRecoverableSignatureVrs","recoveryIdHex","recoveryId","Address","hash160","createStacksPublicKey","PublicKey","serializePublicKey","privKey","compressed","privateKeyBuffer","signWithKey","messageHash","rawSignature","extraEntropy","seedArgs","initSigArgs","drbg","canonical","recSig","der","recovered","hashed","finalizeSig","MessageSignature","content","lengthPrefixBytes","maxLengthBytes","prefixLength","maxLength","LengthPrefixedString","createAddress","c32AddressString","addressData","TenureChangeCause","AuthFieldType","ClarityType","OptionalNone","someCV","OptionalSome","serializePayload","payload","bytesArray","payloadType","TokenTransfer","recipient","amount","serializeStacksMessage","memo","ContractCall","numArgs","functionArgs","SmartContract","codeBody","VersionedSmartContract","clarityVersion","PoisonMicroblock","Coinbase","coinbaseBytes","CoinbaseToAltRecipient","NakamotoCoinbase","vrfProof","TenureChange","tenureHash","previousTenureHash","burnViewHash","previousTenureEnd","previousTenureBlocks","cause","publicKeyHash","msgs","TransactionError","captureStackTrace","SerializationError","NoEstimateAvailableError","SigningError","createTransactionAuthField","pubKeyEncoding","contents","TransactionAuthField","serializeMessageSignature","messageSignature","serializeAddress","Principal","serializePrincipal","serializeLPString","MemoString","memoString","contentBytes","paddedContent","rightPadHexToLength","serializeMemoString","AssetInfo","serializeAssetInfo","PostCondition","postCondition","conditionType","principal","Fungible","NonFungible","assetInfo","assetName","conditionCode","STX","serializePostCondition","LengthPrefixedList","serializeLPList","Payload","field","Compressed","PublicKeyCompressed","PublicKeyUncompressed","compressPublicKey","SignatureCompressed","SignatureUncompressed","serializeTransactionAuthField","addressFromPublicKeys","hashMode","numSigs","publicKeys","SerializeP2PKH","SerializeP2WPKH","SerializeP2WSH","hashP2WPKH","SerializeP2SH","hashP2SH","hashP2WSH","bytesReader","readBytes","Contract","lps","info","lpList","list","bytesWithTypeID","typeId","serializeStringCV","cv","encoding","BoolTrue","BoolFalse","serializeBoolCV","serializeBufferCV","UInt","serializeUIntCV","Int","toTwos","serializeIntCV","PrincipalStandard","serializeStandardPrincipalCV","PrincipalContract","serializeContractPrincipalCV","ResponseOk","ResponseErr","serializeResponseCV","List","serializedValue","serializeListCV","Tuple","lexicographicOrder","sort","localeCompare","nameWithLength","serializeTupleCV","StringASCII","serializeStringAsciiCV","StringUTF8","serializeStringUtf8CV","MAX_U128","MIN_U128","MAX_I128","MIN_I128","bigInt","stringify","addressString","contractPrincipalCVFromAddress","addr","tupleCV","enumCheckFunctions","isEnum","enumVariable","checker","newChecker","enumValues","filter","enumValueSet","createEnumChecker","readUInt32BE","readUInt8","readUInt16BE","readBigUIntLE","reverse","readBigUIntBE","readOffset","internalBytes","readUInt8Enum","invalidEnumErrorFormatter","serializedClarityValue","hasHexPrefix","bufferLength","responseErrorCV","listLength","listContents","tupleLength","tupleContents","clarityName","asciiStrLen","asciiStr","utf8StrLen","utf8Str","leftPadHex","hexString","padEnd","cloneDeep","txidFromData","keyHash","redeemScript","pubKeys","pubKey","scriptArray","script","emptyMessageSignature","nonce","fee","signer","keyEncoding","Uncompressed","isSingleSig","clearCondition","cloned","fields","serializeSpendingCondition","serializeSingleSigSpendingCondition","writeUInt16BE","signaturesRequired","serializeMultiSigSpendingCondition","makeSigHashPreSign","curSigHash","authType","sigHash","makeSigHashPostSign","hashLength","sigHashBytes","nextVerification","initialSigHash","sigHashPreSign","parsedSignature","publicKeyFromSignatureVrs","nextSigHash","spendingCondition","Standard","sponsorSpendingCondition","Sponsored","intoInitialSighashAuth","auth","MainnetSingleSig","newInitialSigHash","cvToString","getCVTypeString","ClarityAbiTypeId","isClarityAbiPrimitive","isClarityAbiBuffer","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","isClarityAbiOptional","optional","isClarityAbiTuple","tuple","isClarityAbiList","getTypeString","matchType","abiType","union","ClarityAbiTypeUInt128","ClarityAbiTypeInt128","ClarityAbiTypeBool","ClarityAbiTypePrincipal","ClarityAbiTypeTraitReference","ClarityAbiTypeNone","ClarityAbiTypeBuffer","ClarityAbiTypeResponse","ClarityAbiTypeOptional","ClarityAbiTypeTuple","ClarityAbiTypeList","ClarityAbiTypeStringAscii","ClarityAbiTypeStringUtf8","getTypeUnion","abiTupleEntry","transaction","signBegin","originDone","checkOversign","checkOverlap","nextVerify","createSponsorSigner","tx","setSponsor","originSigHash","verifyOrigin","signOrigin","nextSighash","signNextOrigin","appendOrigin","appendPubkey","signSponsor","signNextSponsor","getTxInComplete","resume","postConditions","postConditionMode","anchorMode","Deny","anchorModeFromNameOrValue","txid","verifyBegin","addrBytes","verifySingleSig","haveUncompressed","foundPubKey","verifyMultiSig","signAndAppend","cond","nextSig","nextSignature","endsWith","serialized","serialize","setFee","setNonce","setSponsorNonce","chainIdBytes","serializeAuthorization","broadcastTransaction","attachment","rawTx","derivedNetwork","deriveNetwork","validateTxId","broadcastRawTransaction","makeUnsignedContractCall","txOptions","defaultOptions","sponsored","validateWithAbi","abi","catch","getAbi","filtered","functions","fn","abiArgs","payloadArg","abiArg","argNum","validateContractCall","authorization","numSignatures","lpPostConditions","estimatedLen","multiSigSpendingCondition","existingSignatures","totalSignatureLength","estimateTransactionByteLength","transactionPayload","transaction_payload","estimated_len","reason","reason_data","estimations","estimateTransaction","Accept","feeRateResult","txBytes","estimateTransferUnsafe","estimateTransactionFeeWithFallback","addressVersion","TestnetSingleSig","senderAddress","txNonce","getNonce","makeContractCall","senderKey","signerKeys","pk","callReadOnlyFunction","readOnlyFunctionOptions","sender","arguments","responseJson","okay","parseReadOnlyResponse","PoXAddressVersion","BitcoinNetworkVersion","P2PKH","P2SH","devnet","mocknet","B58_ADDR_PREFIXES","SEGWIT_V0_ADDR_PREFIX","SEGWIT_V1_ADDR_PREFIX","SegwitPrefix","SEGWIT_ADDR_PREFIXES","SEGWIT_V0","SEGWIT_V1","PoxOperationPeriod","StackingErrors","assertNumber","chain","wrap","alphabet","digits","letter","separator","padding","bits","chr","end","normalize","convertRadix","digit","digitBase","gcd","radix2carry","convertRadix2","radix2","revPadding","unsafeWrapper","genBase58","abc","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","chk","bechChecksum","words","encodingConst","genBech32","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","lowered","sepIndex","lastIndexOf","actualLength","decodeToBytes","bech32","bech32m","ensureUInt53","chainPrefix","encodeMessage","messageBytes","encodedLength","writeUInt16LE","InvalidPublicKeyReason","STRUCTURED_DATA_PREFIX","hashStructuredData","structuredData","encodeStructuredData","domain","structuredDataHash","domainHash","InvalidAddressError","innerError","btcAddressVersionToLegacyHashMode","btcAddressVersion","decodeBtcAddress","btcAddress","newChecksum","base58CheckDecode","b32","bech32Words","witnessVersion","bech32Decode","bech32MWords","bech32MDecode","decodeNativeSegwitBtcAddress","dataLength","P2WPKH","P2WSH","P2TR","nativeAddressToSegwitVersion","extractPoxAddressFromClarityValue","poxAddrClarityValue","clarityValue","versionCV","hashBytesCV","hashBytes","getErrorString","ERR_STACKING_UNREACHABLE","ERR_STACKING_CORRUPTED_STATE","ERR_STACKING_INSUFFICIENT_FUNDS","ERR_STACKING_INVALID_LOCK_PERIOD","ERR_STACKING_ALREADY_STACKED","ERR_STACKING_NO_SUCH_PRINCIPAL","ERR_STACKING_EXPIRED","ERR_STACKING_STX_LOCKED","ERR_STACKING_PERMISSION_DENIED","ERR_STACKING_THRESHOLD_NOT_MET","ERR_STACKING_POX_ADDRESS_IN_USE","ERR_STACKING_INVALID_POX_ADDRESS","ERR_STACKING_ALREADY_REJECTED","ERR_STACKING_INVALID_AMOUNT","ERR_NOT_ALLOWED","ERR_STACKING_ALREADY_DELEGATED","ERR_DELEGATION_EXPIRES_DURING_LOCK","ERR_DELEGATION_TOO_MUCH_LOCKED","ERR_DELEGATION_POX_ADDR_REQUIRED","ERR_INVALID_START_BURN_HEIGHT","ERR_NOT_CURRENT_STACKER","ERR_STACK_EXTEND_NOT_LOCKED","ERR_STACK_INCREASE_NOT_LOCKED","ERR_DELEGATION_NO_REWARD_SLOT","ERR_DELEGATION_WRONG_REWARD_SLOT","ERR_STACKING_IS_DELEGATED","ERR_STACKING_NOT_DELEGATED","poxAddressToTuple","poxAddress","hashbytes","_poxAddressToBtcAddress_Values","P2SHP2WPKH","P2SHP2WSH","btcAddrVersion","legacyHashModeToBtcAddressVersion","base58Encode","base58CheckEncode","poxAddressToBtcAddress","poxAddr","_poxAddressToBtcAddress_ClarityValue","unwrap","unwrapMap","ensurePox2Activated","operationInfo","period","Period1","ensureLegacyBtcAddressForPox1","ensureSignerArgsReadiness","signerKey","signerSignature","maxAmount","authId","hasMaxAmount","hasAuthId","Pox4SignatureTopic","signPox4SignatureHash","topic","rewardCycle","signMessageHashRsv","StructuredDataSignature","signStructuredData","pox4SignatureMessage","verifyPox4SignatureHash","verificationResult","hashMessage","verifyMessageSignature","verifyMessageSignatureRsv","lockPeriod","StackingClient","getCoreInfo","getPoxInfo","getTargetBlockTime","target_block_time","getAccountStatus","getAccountBalance","balance","getAccountExtendedBalances","getAccountBalanceLocked","locked","getCycleDuration","poxInfoPromise","targetBlockTimePromise","all","poxInfo","targetBlockTime","reward_cycle_length","getRewardsTotalForBtcAddress","getRewardsForBtcAddress","getRewardHoldersForBtcAddress","getRewardSet","parseContractId","contractId","rewardCyleId","rewardSetIndex","pox_address","total_ustx","getSecondsUntilNextCycle","coreInfoPromise","coreInfo","burn_block_height","first_burnchain_block_height","getSecondsUntilStackingDeadline","next_cycle","blocks_until_prepare_phase","getPoxOperationInfo","poxContractVersions","contract_versions","activation_burnchain_block_height","pox1","pox2","pox3","pox4","activatedPoxs","current_burnchain_block_height","Period3","hasMinimumStx","min_amount_ustx","canStack","cycles","balancePromise","contract_id","reward_cycle_id","responseCV","eligible","amountMicroStx","burnBlockHeight","poxOperationInfo","getStackingContract","callOptions","getStackOptions","renamePrivateKey","stackExtend","extendCycles","getStackExtendOptions","stackIncrease","increaseBy","getStackIncreaseOptions","delegateStx","delegateTo","untilBurnBlockHeight","getDelegateOptions","delegateStackStx","stacker","getDelegateStackOptions","delegateStackExtend","extendCount","getDelegateStackExtendOptions","delegateStackIncrease","getDelegateStackIncreaseOptions","stackAggregationCommit","getStackAggregationCommitOptions","stackAggregationCommitIndexed","getStackAggregationCommitOptionsIndexed","stackAggregationIncrease","rewardIndex","getStackAggregationIncreaseOptions","rewardCycleIndex","revokeDelegateStx","getRevokeDelegateStxOptions","getStatus","account","firstRewardCycle","details","first_reward_cycle","lock_period","unlock_height","getDelegationStatus","delegatedTo","delegated","amount_micro_stx","delegated_to","until_burn_ht","verifySignerKeySignature","Period2a","Period2b","modifyLockTxFee","getFee","stacksAddress","validateStacksAddress","signPoxSignature","signerPrivateKey"],"sourceRoot":""}